
MPU6050_DOTMAT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071bc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  080072d0  080072d0  000172d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800767c  0800767c  000201fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800767c  0800767c  000201fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800767c  0800767c  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800767c  0800767c  0001767c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007680  08007680  00017680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08007684  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  200001fc  08007880  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000050c  08007880  0002050c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020225  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c4b9  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e20  00000000  00000000  0002c721  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bc8  00000000  00000000  0002e548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000092a  00000000  00000000  0002f110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018463  00000000  00000000  0002fa3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ed8a  00000000  00000000  00047e9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087e0d  00000000  00000000  00056c27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004264  00000000  00000000  000dea34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000e2c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001fc 	.word	0x200001fc
 800012c:	00000000 	.word	0x00000000
 8000130:	080072b4 	.word	0x080072b4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000200 	.word	0x20000200
 800014c:	080072b4 	.word	0x080072b4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__aeabi_f2iz>:
 8000f44:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f48:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f4c:	d30f      	bcc.n	8000f6e <__aeabi_f2iz+0x2a>
 8000f4e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f56:	d90d      	bls.n	8000f74 <__aeabi_f2iz+0x30>
 8000f58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f60:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f64:	fa23 f002 	lsr.w	r0, r3, r2
 8000f68:	bf18      	it	ne
 8000f6a:	4240      	negne	r0, r0
 8000f6c:	4770      	bx	lr
 8000f6e:	f04f 0000 	mov.w	r0, #0
 8000f72:	4770      	bx	lr
 8000f74:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f78:	d101      	bne.n	8000f7e <__aeabi_f2iz+0x3a>
 8000f7a:	0242      	lsls	r2, r0, #9
 8000f7c:	d105      	bne.n	8000f8a <__aeabi_f2iz+0x46>
 8000f7e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f82:	bf08      	it	eq
 8000f84:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f88:	4770      	bx	lr
 8000f8a:	f04f 0000 	mov.w	r0, #0
 8000f8e:	4770      	bx	lr

08000f90 <MPU6050_Init>:
#include "MPU6050.h"


extern I2C_HandleTypeDef hi2c1;

void MPU6050_Init(SensorData_t *pSensor, FS_SEL gyro, AFS_SEL accel){
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af04      	add	r7, sp, #16
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	460b      	mov	r3, r1
 8000f9a:	70fb      	strb	r3, [r7, #3]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	70bb      	strb	r3, [r7, #2]

	uint8_t pwr_data = 0x00;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS << 1, PWR_MGMT_1, 1, &pwr_data,1, HAL_MAX_DELAY);
 8000fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa8:	9302      	str	r3, [sp, #8]
 8000faa:	2301      	movs	r3, #1
 8000fac:	9301      	str	r3, [sp, #4]
 8000fae:	f107 030f 	add.w	r3, r7, #15
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	226b      	movs	r2, #107	; 0x6b
 8000fb8:	21d0      	movs	r1, #208	; 0xd0
 8000fba:	4808      	ldr	r0, [pc, #32]	; (8000fdc <MPU6050_Init+0x4c>)
 8000fbc:	f001 fdba 	bl	8002b34 <HAL_I2C_Mem_Write>
	Gyro_Config(pSensor, gyro);
 8000fc0:	78fb      	ldrb	r3, [r7, #3]
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f000 f80b 	bl	8000fe0 <Gyro_Config>
	Accel_Config(pSensor, accel);
 8000fca:	78bb      	ldrb	r3, [r7, #2]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f000 f856 	bl	8001080 <Accel_Config>

}
 8000fd4:	bf00      	nop
 8000fd6:	3710      	adds	r7, #16
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000218 	.word	0x20000218

08000fe0 <Gyro_Config>:

SensorStatus_t Gyro_Config(SensorData_t *pSensor, FS_SEL gyro){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b088      	sub	sp, #32
 8000fe4:	af04      	add	r7, sp, #16
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	460b      	mov	r3, r1
 8000fea:	70fb      	strb	r3, [r7, #3]

	HAL_StatusTypeDef check;

	uint8_t data = gyro<<3;
 8000fec:	78fb      	ldrb	r3, [r7, #3]
 8000fee:	00db      	lsls	r3, r3, #3
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	73bb      	strb	r3, [r7, #14]
	check = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS<<1, GYRO_CONFIG, 1, &data, 1, 1000);
 8000ff4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff8:	9302      	str	r3, [sp, #8]
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	9301      	str	r3, [sp, #4]
 8000ffe:	f107 030e 	add.w	r3, r7, #14
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	2301      	movs	r3, #1
 8001006:	221b      	movs	r2, #27
 8001008:	21d0      	movs	r1, #208	; 0xd0
 800100a:	4818      	ldr	r0, [pc, #96]	; (800106c <Gyro_Config+0x8c>)
 800100c:	f001 fd92 	bl	8002b34 <HAL_I2C_Mem_Write>
 8001010:	4603      	mov	r3, r0
 8001012:	73fb      	strb	r3, [r7, #15]

	if(HAL_OK != check) return SENSOR_ERROR;
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <Gyro_Config+0x3e>
 800101a:	2300      	movs	r3, #0
 800101c:	e021      	b.n	8001062 <Gyro_Config+0x82>

	switch(gyro){
 800101e:	78fb      	ldrb	r3, [r7, #3]
 8001020:	2b03      	cmp	r3, #3
 8001022:	d81b      	bhi.n	800105c <Gyro_Config+0x7c>
 8001024:	a201      	add	r2, pc, #4	; (adr r2, 800102c <Gyro_Config+0x4c>)
 8001026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800102a:	bf00      	nop
 800102c:	0800103d 	.word	0x0800103d
 8001030:	08001045 	.word	0x08001045
 8001034:	0800104d 	.word	0x0800104d
 8001038:	08001055 	.word	0x08001055
	case FS_250:
		pSensor->gyro_const = 131.0; break;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a0c      	ldr	r2, [pc, #48]	; (8001070 <Gyro_Config+0x90>)
 8001040:	625a      	str	r2, [r3, #36]	; 0x24
 8001042:	e00d      	b.n	8001060 <Gyro_Config+0x80>
	case FS_500:
		pSensor->gyro_const = 65.5; break;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4a0b      	ldr	r2, [pc, #44]	; (8001074 <Gyro_Config+0x94>)
 8001048:	625a      	str	r2, [r3, #36]	; 0x24
 800104a:	e009      	b.n	8001060 <Gyro_Config+0x80>
	case FS_1000:
		pSensor->gyro_const = 32.8; break;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <Gyro_Config+0x98>)
 8001050:	625a      	str	r2, [r3, #36]	; 0x24
 8001052:	e005      	b.n	8001060 <Gyro_Config+0x80>
	case FS_2000:
		pSensor->gyro_const = 16.4; break;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a09      	ldr	r2, [pc, #36]	; (800107c <Gyro_Config+0x9c>)
 8001058:	625a      	str	r2, [r3, #36]	; 0x24
 800105a:	e001      	b.n	8001060 <Gyro_Config+0x80>
	default:
		return SENSOR_ERROR;
 800105c:	2300      	movs	r3, #0
 800105e:	e000      	b.n	8001062 <Gyro_Config+0x82>
	}

	return SENSOR_OK;
 8001060:	2301      	movs	r3, #1

}
 8001062:	4618      	mov	r0, r3
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000218 	.word	0x20000218
 8001070:	43030000 	.word	0x43030000
 8001074:	42830000 	.word	0x42830000
 8001078:	42033333 	.word	0x42033333
 800107c:	41833333 	.word	0x41833333

08001080 <Accel_Config>:

SensorStatus_t Accel_Config(SensorData_t *pSensor, AFS_SEL accel){
 8001080:	b580      	push	{r7, lr}
 8001082:	b088      	sub	sp, #32
 8001084:	af04      	add	r7, sp, #16
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	460b      	mov	r3, r1
 800108a:	70fb      	strb	r3, [r7, #3]

	HAL_StatusTypeDef check;
	uint8_t data = accel<<3;
 800108c:	78fb      	ldrb	r3, [r7, #3]
 800108e:	00db      	lsls	r3, r3, #3
 8001090:	b2db      	uxtb	r3, r3
 8001092:	73bb      	strb	r3, [r7, #14]

	check = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS<<1, ACCEL_CONFIG, 1, &data, 1, 1000);
 8001094:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001098:	9302      	str	r3, [sp, #8]
 800109a:	2301      	movs	r3, #1
 800109c:	9301      	str	r3, [sp, #4]
 800109e:	f107 030e 	add.w	r3, r7, #14
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	2301      	movs	r3, #1
 80010a6:	221c      	movs	r2, #28
 80010a8:	21d0      	movs	r1, #208	; 0xd0
 80010aa:	4818      	ldr	r0, [pc, #96]	; (800110c <Accel_Config+0x8c>)
 80010ac:	f001 fd42 	bl	8002b34 <HAL_I2C_Mem_Write>
 80010b0:	4603      	mov	r3, r0
 80010b2:	73fb      	strb	r3, [r7, #15]
	if(HAL_OK != check) return SENSOR_ERROR;
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <Accel_Config+0x3e>
 80010ba:	2300      	movs	r3, #0
 80010bc:	e021      	b.n	8001102 <Accel_Config+0x82>

	switch(accel){
 80010be:	78fb      	ldrb	r3, [r7, #3]
 80010c0:	2b03      	cmp	r3, #3
 80010c2:	d81b      	bhi.n	80010fc <Accel_Config+0x7c>
 80010c4:	a201      	add	r2, pc, #4	; (adr r2, 80010cc <Accel_Config+0x4c>)
 80010c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ca:	bf00      	nop
 80010cc:	080010dd 	.word	0x080010dd
 80010d0:	080010e5 	.word	0x080010e5
 80010d4:	080010ed 	.word	0x080010ed
 80010d8:	080010f5 	.word	0x080010f5
	case AFS_2G:
		pSensor->accel_const = 16.384; break;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4a0c      	ldr	r2, [pc, #48]	; (8001110 <Accel_Config+0x90>)
 80010e0:	629a      	str	r2, [r3, #40]	; 0x28
 80010e2:	e00d      	b.n	8001100 <Accel_Config+0x80>
	case AFS_4G:
		pSensor->accel_const = 8.192; break;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a0b      	ldr	r2, [pc, #44]	; (8001114 <Accel_Config+0x94>)
 80010e8:	629a      	str	r2, [r3, #40]	; 0x28
 80010ea:	e009      	b.n	8001100 <Accel_Config+0x80>
	case AFS_8G:
		pSensor->accel_const = 4.096; break;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4a0a      	ldr	r2, [pc, #40]	; (8001118 <Accel_Config+0x98>)
 80010f0:	629a      	str	r2, [r3, #40]	; 0x28
 80010f2:	e005      	b.n	8001100 <Accel_Config+0x80>
	case AFS_16G:
		pSensor->accel_const = 2.048; break;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4a09      	ldr	r2, [pc, #36]	; (800111c <Accel_Config+0x9c>)
 80010f8:	629a      	str	r2, [r3, #40]	; 0x28
 80010fa:	e001      	b.n	8001100 <Accel_Config+0x80>
	default:
		return SENSOR_ERROR;
 80010fc:	2300      	movs	r3, #0
 80010fe:	e000      	b.n	8001102 <Accel_Config+0x82>
	}

	return SENSOR_OK;
 8001100:	2301      	movs	r3, #1

}
 8001102:	4618      	mov	r0, r3
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000218 	.word	0x20000218
 8001110:	4183126f 	.word	0x4183126f
 8001114:	4103126f 	.word	0x4103126f
 8001118:	4083126f 	.word	0x4083126f
 800111c:	4003126f 	.word	0x4003126f

08001120 <MPU6050_READ_DATA>:

void MPU6050_READ_DATA(SensorData_t *pSensor){
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	; 0x28
 8001124:	af02      	add	r7, sp, #8
 8001126:	6078      	str	r0, [r7, #4]

	uint8_t Buffer[14];
	uint8_t RegAdd = ACCEL_XOUT_H;
 8001128:	233b      	movs	r3, #59	; 0x3b
 800112a:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDRESS<<1, &RegAdd, 1, 1000);
 800112c:	f107 020f 	add.w	r2, r7, #15
 8001130:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	2301      	movs	r3, #1
 8001138:	21d0      	movs	r1, #208	; 0xd0
 800113a:	4856      	ldr	r0, [pc, #344]	; (8001294 <MPU6050_READ_DATA+0x174>)
 800113c:	f001 f990 	bl	8002460 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, MPU6050_ADDRESS<<1, Buffer, 14, 1000);
 8001140:	f107 0210 	add.w	r2, r7, #16
 8001144:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001148:	9300      	str	r3, [sp, #0]
 800114a:	230e      	movs	r3, #14
 800114c:	21d0      	movs	r1, #208	; 0xd0
 800114e:	4851      	ldr	r0, [pc, #324]	; (8001294 <MPU6050_READ_DATA+0x174>)
 8001150:	f001 fa84 	bl	800265c <HAL_I2C_Master_Receive>

	/* Accelerometer raw values */
	pSensor->accel_raw.raw_x = (int16_t)(Buffer[0]<<8 | Buffer[1]);
 8001154:	7c3b      	ldrb	r3, [r7, #16]
 8001156:	021b      	lsls	r3, r3, #8
 8001158:	b21a      	sxth	r2, r3
 800115a:	7c7b      	ldrb	r3, [r7, #17]
 800115c:	b21b      	sxth	r3, r3
 800115e:	4313      	orrs	r3, r2
 8001160:	b21a      	sxth	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	831a      	strh	r2, [r3, #24]
	pSensor->accel_raw.raw_y = (int16_t)(Buffer[2]<<8 | Buffer[3]);
 8001166:	7cbb      	ldrb	r3, [r7, #18]
 8001168:	021b      	lsls	r3, r3, #8
 800116a:	b21a      	sxth	r2, r3
 800116c:	7cfb      	ldrb	r3, [r7, #19]
 800116e:	b21b      	sxth	r3, r3
 8001170:	4313      	orrs	r3, r2
 8001172:	b21a      	sxth	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	835a      	strh	r2, [r3, #26]
	pSensor->accel_raw.raw_z = (int16_t)(Buffer[4]<<8 | Buffer[5]);
 8001178:	7d3b      	ldrb	r3, [r7, #20]
 800117a:	021b      	lsls	r3, r3, #8
 800117c:	b21a      	sxth	r2, r3
 800117e:	7d7b      	ldrb	r3, [r7, #21]
 8001180:	b21b      	sxth	r3, r3
 8001182:	4313      	orrs	r3, r2
 8001184:	b21a      	sxth	r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	839a      	strh	r2, [r3, #28]

	/* Gyroscope raw values */
	pSensor->gyros_raw.raw_x = (int16_t)(Buffer[8]<<8 | Buffer[9]);
 800118a:	7e3b      	ldrb	r3, [r7, #24]
 800118c:	021b      	lsls	r3, r3, #8
 800118e:	b21a      	sxth	r2, r3
 8001190:	7e7b      	ldrb	r3, [r7, #25]
 8001192:	b21b      	sxth	r3, r3
 8001194:	4313      	orrs	r3, r2
 8001196:	b21a      	sxth	r2, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	83da      	strh	r2, [r3, #30]
	pSensor->gyros_raw.raw_y = (int16_t)(Buffer[10]<<8 | Buffer[11]);
 800119c:	7ebb      	ldrb	r3, [r7, #26]
 800119e:	021b      	lsls	r3, r3, #8
 80011a0:	b21a      	sxth	r2, r3
 80011a2:	7efb      	ldrb	r3, [r7, #27]
 80011a4:	b21b      	sxth	r3, r3
 80011a6:	4313      	orrs	r3, r2
 80011a8:	b21a      	sxth	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	841a      	strh	r2, [r3, #32]
	pSensor->gyros_raw.raw_z = (int16_t)(Buffer[12]<<8 | Buffer[13]);
 80011ae:	7f3b      	ldrb	r3, [r7, #28]
 80011b0:	021b      	lsls	r3, r3, #8
 80011b2:	b21a      	sxth	r2, r3
 80011b4:	7f7b      	ldrb	r3, [r7, #29]
 80011b6:	b21b      	sxth	r3, r3
 80011b8:	4313      	orrs	r3, r2
 80011ba:	b21a      	sxth	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	845a      	strh	r2, [r3, #34]	; 0x22

	pSensor->accel.x = (float)(pSensor->accel_raw.raw_x / pSensor->accel_const);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff fd18 	bl	8000bfc <__aeabi_i2f>
 80011cc:	4602      	mov	r2, r0
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d2:	4619      	mov	r1, r3
 80011d4:	4610      	mov	r0, r2
 80011d6:	f7ff fe19 	bl	8000e0c <__aeabi_fdiv>
 80011da:	4603      	mov	r3, r0
 80011dc:	461a      	mov	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	601a      	str	r2, [r3, #0]
	pSensor->accel.y = (float)(pSensor->accel_raw.raw_y / pSensor->accel_const);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff fd07 	bl	8000bfc <__aeabi_i2f>
 80011ee:	4602      	mov	r2, r0
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f4:	4619      	mov	r1, r3
 80011f6:	4610      	mov	r0, r2
 80011f8:	f7ff fe08 	bl	8000e0c <__aeabi_fdiv>
 80011fc:	4603      	mov	r3, r0
 80011fe:	461a      	mov	r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	605a      	str	r2, [r3, #4]
	pSensor->accel.z = (float)(pSensor->accel_raw.raw_z / pSensor->accel_const);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff fcf6 	bl	8000bfc <__aeabi_i2f>
 8001210:	4602      	mov	r2, r0
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001216:	4619      	mov	r1, r3
 8001218:	4610      	mov	r0, r2
 800121a:	f7ff fdf7 	bl	8000e0c <__aeabi_fdiv>
 800121e:	4603      	mov	r3, r0
 8001220:	461a      	mov	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	609a      	str	r2, [r3, #8]

	pSensor->gyros.x = (float)(pSensor->gyros_raw.raw_x / pSensor->gyro_const);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff fce5 	bl	8000bfc <__aeabi_i2f>
 8001232:	4602      	mov	r2, r0
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001238:	4619      	mov	r1, r3
 800123a:	4610      	mov	r0, r2
 800123c:	f7ff fde6 	bl	8000e0c <__aeabi_fdiv>
 8001240:	4603      	mov	r3, r0
 8001242:	461a      	mov	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	60da      	str	r2, [r3, #12]
	pSensor->gyros.y = (float)(pSensor->gyros_raw.raw_y / pSensor->gyro_const);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff fcd4 	bl	8000bfc <__aeabi_i2f>
 8001254:	4602      	mov	r2, r0
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125a:	4619      	mov	r1, r3
 800125c:	4610      	mov	r0, r2
 800125e:	f7ff fdd5 	bl	8000e0c <__aeabi_fdiv>
 8001262:	4603      	mov	r3, r0
 8001264:	461a      	mov	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	611a      	str	r2, [r3, #16]
	pSensor->gyros.z = (float)(pSensor->gyros_raw.raw_z / pSensor->gyro_const);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff fcc3 	bl	8000bfc <__aeabi_i2f>
 8001276:	4602      	mov	r2, r0
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127c:	4619      	mov	r1, r3
 800127e:	4610      	mov	r0, r2
 8001280:	f7ff fdc4 	bl	8000e0c <__aeabi_fdiv>
 8001284:	4603      	mov	r3, r0
 8001286:	461a      	mov	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	615a      	str	r2, [r3, #20]


}
 800128c:	bf00      	nop
 800128e:	3720      	adds	r7, #32
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000218 	.word	0x20000218

08001298 <Zeros>:
#include "main.h"

extern SPI_HandleTypeDef hspi1;


void Zeros(void){
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0

	for(int i=1; i<9; i++){
 800129e:	2301      	movs	r3, #1
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	e008      	b.n	80012b6 <Zeros+0x1e>
		MAX_SendData(i, 0x00);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	2100      	movs	r1, #0
 80012aa:	4618      	mov	r0, r3
 80012ac:	f000 f826 	bl	80012fc <MAX_SendData>
	for(int i=1; i<9; i++){
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3301      	adds	r3, #1
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2b08      	cmp	r3, #8
 80012ba:	ddf3      	ble.n	80012a4 <Zeros+0xc>
	}

}
 80012bc:	bf00      	nop
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <MAX7219_Init>:


MAX_Status MAX7219_Init(void){
 80012c6:	b580      	push	{r7, lr}
 80012c8:	af00      	add	r7, sp, #0

	MAX_SendData(0x09, 0x00);			//No decoding.
 80012ca:	2100      	movs	r1, #0
 80012cc:	2009      	movs	r0, #9
 80012ce:	f000 f815 	bl	80012fc <MAX_SendData>
	MAX_SendData(0x0A, 0x03);			//Brightness intensity.
 80012d2:	2103      	movs	r1, #3
 80012d4:	200a      	movs	r0, #10
 80012d6:	f000 f811 	bl	80012fc <MAX_SendData>
	MAX_SendData(0x0B, 0x07);			//Scan limit leds = 8.
 80012da:	2107      	movs	r1, #7
 80012dc:	200b      	movs	r0, #11
 80012de:	f000 f80d 	bl	80012fc <MAX_SendData>
	MAX_SendData(0x0C, 0x01);			//power down = 0, normal mode = 1.
 80012e2:	2101      	movs	r1, #1
 80012e4:	200c      	movs	r0, #12
 80012e6:	f000 f809 	bl	80012fc <MAX_SendData>
	MAX_SendData(0x0F, 0x00);			//No test display.
 80012ea:	2100      	movs	r1, #0
 80012ec:	200f      	movs	r0, #15
 80012ee:	f000 f805 	bl	80012fc <MAX_SendData>
	Zeros();
 80012f2:	f7ff ffd1 	bl	8001298 <Zeros>
	return MAX_OK;
 80012f6:	2301      	movs	r3, #1
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	bd80      	pop	{r7, pc}

080012fc <MAX_SendData>:

MAX_Status MAX_SendData(uint8_t address, uint8_t data){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	460a      	mov	r2, r1
 8001306:	71fb      	strb	r3, [r7, #7]
 8001308:	4613      	mov	r3, r2
 800130a:	71bb      	strb	r3, [r7, #6]

	HAL_StatusTypeDef status;

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 800130c:	2200      	movs	r2, #0
 800130e:	2140      	movs	r1, #64	; 0x40
 8001310:	4813      	ldr	r0, [pc, #76]	; (8001360 <MAX_SendData+0x64>)
 8001312:	f000 ff49 	bl	80021a8 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(&hspi1, &address, 1, 100);
 8001316:	1df9      	adds	r1, r7, #7
 8001318:	2364      	movs	r3, #100	; 0x64
 800131a:	2201      	movs	r2, #1
 800131c:	4811      	ldr	r0, [pc, #68]	; (8001364 <MAX_SendData+0x68>)
 800131e:	f002 fdb3 	bl	8003e88 <HAL_SPI_Transmit>
 8001322:	4603      	mov	r3, r0
 8001324:	73fb      	strb	r3, [r7, #15]
	if(HAL_OK == status){
 8001326:	7bfb      	ldrb	r3, [r7, #15]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d113      	bne.n	8001354 <MAX_SendData+0x58>
		status = HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 800132c:	1db9      	adds	r1, r7, #6
 800132e:	2364      	movs	r3, #100	; 0x64
 8001330:	2201      	movs	r2, #1
 8001332:	480c      	ldr	r0, [pc, #48]	; (8001364 <MAX_SendData+0x68>)
 8001334:	f002 fda8 	bl	8003e88 <HAL_SPI_Transmit>
 8001338:	4603      	mov	r3, r0
 800133a:	73fb      	strb	r3, [r7, #15]
		if(HAL_OK == status){
 800133c:	7bfb      	ldrb	r3, [r7, #15]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d106      	bne.n	8001350 <MAX_SendData+0x54>
			HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 8001342:	2201      	movs	r2, #1
 8001344:	2140      	movs	r1, #64	; 0x40
 8001346:	4806      	ldr	r0, [pc, #24]	; (8001360 <MAX_SendData+0x64>)
 8001348:	f000 ff2e 	bl	80021a8 <HAL_GPIO_WritePin>
			return MAX_OK;
 800134c:	2301      	movs	r3, #1
 800134e:	e002      	b.n	8001356 <MAX_SendData+0x5a>
		}
		return MAX_ERROR;
 8001350:	2300      	movs	r3, #0
 8001352:	e000      	b.n	8001356 <MAX_SendData+0x5a>
	}
	return status;
 8001354:	7bfb      	ldrb	r3, [r7, #15]
}
 8001356:	4618      	mov	r0, r3
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40010800 	.word	0x40010800
 8001364:	2000026c 	.word	0x2000026c

08001368 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001368:	b5b0      	push	{r4, r5, r7, lr}
 800136a:	b088      	sub	sp, #32
 800136c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800136e:	f000 fc2d 	bl	8001bcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001372:	f000 f8f9 	bl	8001568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001376:	f000 f9cb 	bl	8001710 <MX_GPIO_Init>
  MX_I2C1_Init();
 800137a:	f000 f93b 	bl	80015f4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800137e:	f000 f99d 	bl	80016bc <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8001382:	f000 f965 	bl	8001650 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  MAX7219_Init();
 8001386:	f7ff ff9e 	bl	80012c6 <MAX7219_Init>
  MPU6050_Init(&pSensor, FS_500, AFS_4G);
 800138a:	2201      	movs	r2, #1
 800138c:	2101      	movs	r1, #1
 800138e:	4866      	ldr	r0, [pc, #408]	; (8001528 <main+0x1c0>)
 8001390:	f7ff fdfe 	bl	8000f90 <MPU6050_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  MPU6050_READ_DATA(&pSensor);
 8001394:	4864      	ldr	r0, [pc, #400]	; (8001528 <main+0x1c0>)
 8001396:	f7ff fec3 	bl	8001120 <MPU6050_READ_DATA>
	  Ax = pSensor.accel.x;
 800139a:	4b63      	ldr	r3, [pc, #396]	; (8001528 <main+0x1c0>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a63      	ldr	r2, [pc, #396]	; (800152c <main+0x1c4>)
 80013a0:	6013      	str	r3, [r2, #0]
	  Ay = pSensor.accel.y;
 80013a2:	4b61      	ldr	r3, [pc, #388]	; (8001528 <main+0x1c0>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	4a62      	ldr	r2, [pc, #392]	; (8001530 <main+0x1c8>)
 80013a8:	6013      	str	r3, [r2, #0]
	  Az = pSensor.accel.z;
 80013aa:	4b5f      	ldr	r3, [pc, #380]	; (8001528 <main+0x1c0>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	4a61      	ldr	r2, [pc, #388]	; (8001534 <main+0x1cc>)
 80013b0:	6013      	str	r3, [r2, #0]

	  Gx = pSensor.gyros.x;
 80013b2:	4b5d      	ldr	r3, [pc, #372]	; (8001528 <main+0x1c0>)
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	4a60      	ldr	r2, [pc, #384]	; (8001538 <main+0x1d0>)
 80013b8:	6013      	str	r3, [r2, #0]
	  Gy = pSensor.gyros.y;
 80013ba:	4b5b      	ldr	r3, [pc, #364]	; (8001528 <main+0x1c0>)
 80013bc:	691b      	ldr	r3, [r3, #16]
 80013be:	4a5f      	ldr	r2, [pc, #380]	; (800153c <main+0x1d4>)
 80013c0:	6013      	str	r3, [r2, #0]
	  Gz = pSensor.gyros.z;
 80013c2:	4b59      	ldr	r3, [pc, #356]	; (8001528 <main+0x1c0>)
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	4a5e      	ldr	r2, [pc, #376]	; (8001540 <main+0x1d8>)
 80013c8:	6013      	str	r3, [r2, #0]

	  sizee = sprintf((char *)TxBuffer, "Ax: %.1f\tAy: %.1f\n", Ax, Ay);
 80013ca:	4b58      	ldr	r3, [pc, #352]	; (800152c <main+0x1c4>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f82a 	bl	8000428 <__aeabi_f2d>
 80013d4:	4604      	mov	r4, r0
 80013d6:	460d      	mov	r5, r1
 80013d8:	4b55      	ldr	r3, [pc, #340]	; (8001530 <main+0x1c8>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff f823 	bl	8000428 <__aeabi_f2d>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	e9cd 2300 	strd	r2, r3, [sp]
 80013ea:	4622      	mov	r2, r4
 80013ec:	462b      	mov	r3, r5
 80013ee:	4955      	ldr	r1, [pc, #340]	; (8001544 <main+0x1dc>)
 80013f0:	4855      	ldr	r0, [pc, #340]	; (8001548 <main+0x1e0>)
 80013f2:	f003 fe11 	bl	8005018 <siprintf>
 80013f6:	4603      	mov	r3, r0
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	4b54      	ldr	r3, [pc, #336]	; (800154c <main+0x1e4>)
 80013fc:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, TxBuffer, sizee, 10);
 80013fe:	4b53      	ldr	r3, [pc, #332]	; (800154c <main+0x1e4>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	b29a      	uxth	r2, r3
 8001404:	230a      	movs	r3, #10
 8001406:	4950      	ldr	r1, [pc, #320]	; (8001548 <main+0x1e0>)
 8001408:	4851      	ldr	r0, [pc, #324]	; (8001550 <main+0x1e8>)
 800140a:	f002 ff77 	bl	80042fc <HAL_UART_Transmit>

	  if((int)Ay > 400){
 800140e:	4b48      	ldr	r3, [pc, #288]	; (8001530 <main+0x1c8>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff fd96 	bl	8000f44 <__aeabi_f2iz>
 8001418:	4603      	mov	r3, r0
 800141a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800141e:	dd13      	ble.n	8001448 <main+0xe0>
		  for(int i=1; i<9; ++i){
 8001420:	2301      	movs	r3, #1
 8001422:	617b      	str	r3, [r7, #20]
 8001424:	e00c      	b.n	8001440 <main+0xd8>
			  MAX_SendData(i, sol[i-1]);
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	b2da      	uxtb	r2, r3
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	3b01      	subs	r3, #1
 800142e:	4949      	ldr	r1, [pc, #292]	; (8001554 <main+0x1ec>)
 8001430:	5ccb      	ldrb	r3, [r1, r3]
 8001432:	4619      	mov	r1, r3
 8001434:	4610      	mov	r0, r2
 8001436:	f7ff ff61 	bl	80012fc <MAX_SendData>
		  for(int i=1; i<9; ++i){
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	3301      	adds	r3, #1
 800143e:	617b      	str	r3, [r7, #20]
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	2b08      	cmp	r3, #8
 8001444:	ddef      	ble.n	8001426 <main+0xbe>
 8001446:	e069      	b.n	800151c <main+0x1b4>

		  }
	  }

	  else if((int)Ay < -400){
 8001448:	4b39      	ldr	r3, [pc, #228]	; (8001530 <main+0x1c8>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff fd79 	bl	8000f44 <__aeabi_f2iz>
 8001452:	4603      	mov	r3, r0
 8001454:	f513 7fc8 	cmn.w	r3, #400	; 0x190
 8001458:	da13      	bge.n	8001482 <main+0x11a>
		  for(int i=1; i<9; ++i){
 800145a:	2301      	movs	r3, #1
 800145c:	613b      	str	r3, [r7, #16]
 800145e:	e00c      	b.n	800147a <main+0x112>
			  MAX_SendData(i, sag[i-1]);
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	b2da      	uxtb	r2, r3
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	3b01      	subs	r3, #1
 8001468:	493b      	ldr	r1, [pc, #236]	; (8001558 <main+0x1f0>)
 800146a:	5ccb      	ldrb	r3, [r1, r3]
 800146c:	4619      	mov	r1, r3
 800146e:	4610      	mov	r0, r2
 8001470:	f7ff ff44 	bl	80012fc <MAX_SendData>
		  for(int i=1; i<9; ++i){
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	3301      	adds	r3, #1
 8001478:	613b      	str	r3, [r7, #16]
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	2b08      	cmp	r3, #8
 800147e:	ddef      	ble.n	8001460 <main+0xf8>
 8001480:	e04c      	b.n	800151c <main+0x1b4>
		  }
	  }

	  else if((int)Ax > 400)
 8001482:	4b2a      	ldr	r3, [pc, #168]	; (800152c <main+0x1c4>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff fd5c 	bl	8000f44 <__aeabi_f2iz>
 800148c:	4603      	mov	r3, r0
 800148e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001492:	dd13      	ble.n	80014bc <main+0x154>
	  {
		  for(int i=1; i<9; ++i){
 8001494:	2301      	movs	r3, #1
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	e00c      	b.n	80014b4 <main+0x14c>
			  MAX_SendData(i, up[i-1]);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	b2da      	uxtb	r2, r3
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	3b01      	subs	r3, #1
 80014a2:	492e      	ldr	r1, [pc, #184]	; (800155c <main+0x1f4>)
 80014a4:	5ccb      	ldrb	r3, [r1, r3]
 80014a6:	4619      	mov	r1, r3
 80014a8:	4610      	mov	r0, r2
 80014aa:	f7ff ff27 	bl	80012fc <MAX_SendData>
		  for(int i=1; i<9; ++i){
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	3301      	adds	r3, #1
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2b08      	cmp	r3, #8
 80014b8:	ddef      	ble.n	800149a <main+0x132>
 80014ba:	e02f      	b.n	800151c <main+0x1b4>
		  }
	  }

	  else if((int)Ax < -400){
 80014bc:	4b1b      	ldr	r3, [pc, #108]	; (800152c <main+0x1c4>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fd3f 	bl	8000f44 <__aeabi_f2iz>
 80014c6:	4603      	mov	r3, r0
 80014c8:	f513 7fc8 	cmn.w	r3, #400	; 0x190
 80014cc:	da13      	bge.n	80014f6 <main+0x18e>
		  for(int i=1; i<9; ++i){
 80014ce:	2301      	movs	r3, #1
 80014d0:	60bb      	str	r3, [r7, #8]
 80014d2:	e00c      	b.n	80014ee <main+0x186>
			  MAX_SendData(i, down[i-1]);
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	3b01      	subs	r3, #1
 80014dc:	4920      	ldr	r1, [pc, #128]	; (8001560 <main+0x1f8>)
 80014de:	5ccb      	ldrb	r3, [r1, r3]
 80014e0:	4619      	mov	r1, r3
 80014e2:	4610      	mov	r0, r2
 80014e4:	f7ff ff0a 	bl	80012fc <MAX_SendData>
		  for(int i=1; i<9; ++i){
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	3301      	adds	r3, #1
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	2b08      	cmp	r3, #8
 80014f2:	ddef      	ble.n	80014d4 <main+0x16c>
 80014f4:	e012      	b.n	800151c <main+0x1b4>
		  }
	  }
	  else{
		  for(int i=1; i<9; ++i){
 80014f6:	2301      	movs	r3, #1
 80014f8:	607b      	str	r3, [r7, #4]
 80014fa:	e00c      	b.n	8001516 <main+0x1ae>
			  MAX_SendData(i, orta[i-1]);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3b01      	subs	r3, #1
 8001504:	4917      	ldr	r1, [pc, #92]	; (8001564 <main+0x1fc>)
 8001506:	5ccb      	ldrb	r3, [r1, r3]
 8001508:	4619      	mov	r1, r3
 800150a:	4610      	mov	r0, r2
 800150c:	f7ff fef6 	bl	80012fc <MAX_SendData>
		  for(int i=1; i<9; ++i){
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3301      	adds	r3, #1
 8001514:	607b      	str	r3, [r7, #4]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b08      	cmp	r3, #8
 800151a:	ddef      	ble.n	80014fc <main+0x194>
		  }
	  }



	  HAL_Delay(300);
 800151c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001520:	f000 fbb6 	bl	8001c90 <HAL_Delay>
	  MPU6050_READ_DATA(&pSensor);
 8001524:	e736      	b.n	8001394 <main+0x2c>
 8001526:	bf00      	nop
 8001528:	2000030c 	.word	0x2000030c
 800152c:	20000338 	.word	0x20000338
 8001530:	2000033c 	.word	0x2000033c
 8001534:	20000340 	.word	0x20000340
 8001538:	20000344 	.word	0x20000344
 800153c:	20000348 	.word	0x20000348
 8001540:	2000034c 	.word	0x2000034c
 8001544:	080072d0 	.word	0x080072d0
 8001548:	20000350 	.word	0x20000350
 800154c:	200003b4 	.word	0x200003b4
 8001550:	200002c4 	.word	0x200002c4
 8001554:	20000008 	.word	0x20000008
 8001558:	20000000 	.word	0x20000000
 800155c:	20000018 	.word	0x20000018
 8001560:	20000020 	.word	0x20000020
 8001564:	20000010 	.word	0x20000010

08001568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b090      	sub	sp, #64	; 0x40
 800156c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800156e:	f107 0318 	add.w	r3, r7, #24
 8001572:	2228      	movs	r2, #40	; 0x28
 8001574:	2100      	movs	r1, #0
 8001576:	4618      	mov	r0, r3
 8001578:	f003 fdb1 	bl	80050de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800157c:	1d3b      	adds	r3, r7, #4
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	60da      	str	r2, [r3, #12]
 8001588:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800158a:	2301      	movs	r3, #1
 800158c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800158e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001592:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001594:	2300      	movs	r3, #0
 8001596:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001598:	2301      	movs	r3, #1
 800159a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800159c:	2302      	movs	r3, #2
 800159e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015a6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80015aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ac:	f107 0318 	add.w	r3, r7, #24
 80015b0:	4618      	mov	r0, r3
 80015b2:	f001 ffd5 	bl	8003560 <HAL_RCC_OscConfig>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80015bc:	f000 f8f2 	bl	80017a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015c0:	230f      	movs	r3, #15
 80015c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015c4:	2302      	movs	r3, #2
 80015c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	2102      	movs	r1, #2
 80015da:	4618      	mov	r0, r3
 80015dc:	f002 fa42 	bl	8003a64 <HAL_RCC_ClockConfig>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <SystemClock_Config+0x82>
  {
    Error_Handler();
 80015e6:	f000 f8dd 	bl	80017a4 <Error_Handler>
  }
}
 80015ea:	bf00      	nop
 80015ec:	3740      	adds	r7, #64	; 0x40
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
	...

080015f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015f8:	4b12      	ldr	r3, [pc, #72]	; (8001644 <MX_I2C1_Init+0x50>)
 80015fa:	4a13      	ldr	r2, [pc, #76]	; (8001648 <MX_I2C1_Init+0x54>)
 80015fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <MX_I2C1_Init+0x50>)
 8001600:	4a12      	ldr	r2, [pc, #72]	; (800164c <MX_I2C1_Init+0x58>)
 8001602:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001604:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <MX_I2C1_Init+0x50>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800160a:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <MX_I2C1_Init+0x50>)
 800160c:	2200      	movs	r2, #0
 800160e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001610:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <MX_I2C1_Init+0x50>)
 8001612:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001616:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001618:	4b0a      	ldr	r3, [pc, #40]	; (8001644 <MX_I2C1_Init+0x50>)
 800161a:	2200      	movs	r2, #0
 800161c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800161e:	4b09      	ldr	r3, [pc, #36]	; (8001644 <MX_I2C1_Init+0x50>)
 8001620:	2200      	movs	r2, #0
 8001622:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001624:	4b07      	ldr	r3, [pc, #28]	; (8001644 <MX_I2C1_Init+0x50>)
 8001626:	2200      	movs	r2, #0
 8001628:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800162a:	4b06      	ldr	r3, [pc, #24]	; (8001644 <MX_I2C1_Init+0x50>)
 800162c:	2200      	movs	r2, #0
 800162e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001630:	4804      	ldr	r0, [pc, #16]	; (8001644 <MX_I2C1_Init+0x50>)
 8001632:	f000 fdd1 	bl	80021d8 <HAL_I2C_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800163c:	f000 f8b2 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000218 	.word	0x20000218
 8001648:	40005400 	.word	0x40005400
 800164c:	000186a0 	.word	0x000186a0

08001650 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001654:	4b17      	ldr	r3, [pc, #92]	; (80016b4 <MX_SPI1_Init+0x64>)
 8001656:	4a18      	ldr	r2, [pc, #96]	; (80016b8 <MX_SPI1_Init+0x68>)
 8001658:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800165a:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <MX_SPI1_Init+0x64>)
 800165c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001660:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001662:	4b14      	ldr	r3, [pc, #80]	; (80016b4 <MX_SPI1_Init+0x64>)
 8001664:	2200      	movs	r2, #0
 8001666:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <MX_SPI1_Init+0x64>)
 800166a:	2200      	movs	r2, #0
 800166c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800166e:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <MX_SPI1_Init+0x64>)
 8001670:	2200      	movs	r2, #0
 8001672:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001674:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <MX_SPI1_Init+0x64>)
 8001676:	2200      	movs	r2, #0
 8001678:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800167a:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <MX_SPI1_Init+0x64>)
 800167c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001680:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001682:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <MX_SPI1_Init+0x64>)
 8001684:	2210      	movs	r2, #16
 8001686:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001688:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <MX_SPI1_Init+0x64>)
 800168a:	2200      	movs	r2, #0
 800168c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800168e:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <MX_SPI1_Init+0x64>)
 8001690:	2200      	movs	r2, #0
 8001692:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001694:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <MX_SPI1_Init+0x64>)
 8001696:	2200      	movs	r2, #0
 8001698:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800169a:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <MX_SPI1_Init+0x64>)
 800169c:	220a      	movs	r2, #10
 800169e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016a0:	4804      	ldr	r0, [pc, #16]	; (80016b4 <MX_SPI1_Init+0x64>)
 80016a2:	f002 fb6d 	bl	8003d80 <HAL_SPI_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80016ac:	f000 f87a 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	2000026c 	.word	0x2000026c
 80016b8:	40013000 	.word	0x40013000

080016bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016c0:	4b11      	ldr	r3, [pc, #68]	; (8001708 <MX_USART1_UART_Init+0x4c>)
 80016c2:	4a12      	ldr	r2, [pc, #72]	; (800170c <MX_USART1_UART_Init+0x50>)
 80016c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016c6:	4b10      	ldr	r3, [pc, #64]	; (8001708 <MX_USART1_UART_Init+0x4c>)
 80016c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016ce:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <MX_USART1_UART_Init+0x4c>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016d4:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <MX_USART1_UART_Init+0x4c>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016da:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <MX_USART1_UART_Init+0x4c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016e0:	4b09      	ldr	r3, [pc, #36]	; (8001708 <MX_USART1_UART_Init+0x4c>)
 80016e2:	220c      	movs	r2, #12
 80016e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016e6:	4b08      	ldr	r3, [pc, #32]	; (8001708 <MX_USART1_UART_Init+0x4c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016ec:	4b06      	ldr	r3, [pc, #24]	; (8001708 <MX_USART1_UART_Init+0x4c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016f2:	4805      	ldr	r0, [pc, #20]	; (8001708 <MX_USART1_UART_Init+0x4c>)
 80016f4:	f002 fdb2 	bl	800425c <HAL_UART_Init>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016fe:	f000 f851 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200002c4 	.word	0x200002c4
 800170c:	40013800 	.word	0x40013800

08001710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b088      	sub	sp, #32
 8001714:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001716:	f107 0310 	add.w	r3, r7, #16
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	609a      	str	r2, [r3, #8]
 8001722:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001724:	4b1d      	ldr	r3, [pc, #116]	; (800179c <MX_GPIO_Init+0x8c>)
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	4a1c      	ldr	r2, [pc, #112]	; (800179c <MX_GPIO_Init+0x8c>)
 800172a:	f043 0320 	orr.w	r3, r3, #32
 800172e:	6193      	str	r3, [r2, #24]
 8001730:	4b1a      	ldr	r3, [pc, #104]	; (800179c <MX_GPIO_Init+0x8c>)
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	f003 0320 	and.w	r3, r3, #32
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800173c:	4b17      	ldr	r3, [pc, #92]	; (800179c <MX_GPIO_Init+0x8c>)
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	4a16      	ldr	r2, [pc, #88]	; (800179c <MX_GPIO_Init+0x8c>)
 8001742:	f043 0304 	orr.w	r3, r3, #4
 8001746:	6193      	str	r3, [r2, #24]
 8001748:	4b14      	ldr	r3, [pc, #80]	; (800179c <MX_GPIO_Init+0x8c>)
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	f003 0304 	and.w	r3, r3, #4
 8001750:	60bb      	str	r3, [r7, #8]
 8001752:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001754:	4b11      	ldr	r3, [pc, #68]	; (800179c <MX_GPIO_Init+0x8c>)
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	4a10      	ldr	r2, [pc, #64]	; (800179c <MX_GPIO_Init+0x8c>)
 800175a:	f043 0308 	orr.w	r3, r3, #8
 800175e:	6193      	str	r3, [r2, #24]
 8001760:	4b0e      	ldr	r3, [pc, #56]	; (800179c <MX_GPIO_Init+0x8c>)
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	f003 0308 	and.w	r3, r3, #8
 8001768:	607b      	str	r3, [r7, #4]
 800176a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800176c:	2200      	movs	r2, #0
 800176e:	2140      	movs	r1, #64	; 0x40
 8001770:	480b      	ldr	r0, [pc, #44]	; (80017a0 <MX_GPIO_Init+0x90>)
 8001772:	f000 fd19 	bl	80021a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8001776:	2340      	movs	r3, #64	; 0x40
 8001778:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177a:	2301      	movs	r3, #1
 800177c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001782:	2302      	movs	r3, #2
 8001784:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001786:	f107 0310 	add.w	r3, r7, #16
 800178a:	4619      	mov	r1, r3
 800178c:	4804      	ldr	r0, [pc, #16]	; (80017a0 <MX_GPIO_Init+0x90>)
 800178e:	f000 fb87 	bl	8001ea0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001792:	bf00      	nop
 8001794:	3720      	adds	r7, #32
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40021000 	.word	0x40021000
 80017a0:	40010800 	.word	0x40010800

080017a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017a8:	b672      	cpsid	i
}
 80017aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017ac:	e7fe      	b.n	80017ac <Error_Handler+0x8>
	...

080017b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017b6:	4b15      	ldr	r3, [pc, #84]	; (800180c <HAL_MspInit+0x5c>)
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	4a14      	ldr	r2, [pc, #80]	; (800180c <HAL_MspInit+0x5c>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	6193      	str	r3, [r2, #24]
 80017c2:	4b12      	ldr	r3, [pc, #72]	; (800180c <HAL_MspInit+0x5c>)
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	60bb      	str	r3, [r7, #8]
 80017cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ce:	4b0f      	ldr	r3, [pc, #60]	; (800180c <HAL_MspInit+0x5c>)
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	4a0e      	ldr	r2, [pc, #56]	; (800180c <HAL_MspInit+0x5c>)
 80017d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d8:	61d3      	str	r3, [r2, #28]
 80017da:	4b0c      	ldr	r3, [pc, #48]	; (800180c <HAL_MspInit+0x5c>)
 80017dc:	69db      	ldr	r3, [r3, #28]
 80017de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e2:	607b      	str	r3, [r7, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017e6:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <HAL_MspInit+0x60>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	4a04      	ldr	r2, [pc, #16]	; (8001810 <HAL_MspInit+0x60>)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001802:	bf00      	nop
 8001804:	3714      	adds	r7, #20
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr
 800180c:	40021000 	.word	0x40021000
 8001810:	40010000 	.word	0x40010000

08001814 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b088      	sub	sp, #32
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181c:	f107 0310 	add.w	r3, r7, #16
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a15      	ldr	r2, [pc, #84]	; (8001884 <HAL_I2C_MspInit+0x70>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d123      	bne.n	800187c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001834:	4b14      	ldr	r3, [pc, #80]	; (8001888 <HAL_I2C_MspInit+0x74>)
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	4a13      	ldr	r2, [pc, #76]	; (8001888 <HAL_I2C_MspInit+0x74>)
 800183a:	f043 0308 	orr.w	r3, r3, #8
 800183e:	6193      	str	r3, [r2, #24]
 8001840:	4b11      	ldr	r3, [pc, #68]	; (8001888 <HAL_I2C_MspInit+0x74>)
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	f003 0308 	and.w	r3, r3, #8
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800184c:	23c0      	movs	r3, #192	; 0xc0
 800184e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001850:	2312      	movs	r3, #18
 8001852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001854:	2303      	movs	r3, #3
 8001856:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001858:	f107 0310 	add.w	r3, r7, #16
 800185c:	4619      	mov	r1, r3
 800185e:	480b      	ldr	r0, [pc, #44]	; (800188c <HAL_I2C_MspInit+0x78>)
 8001860:	f000 fb1e 	bl	8001ea0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001864:	4b08      	ldr	r3, [pc, #32]	; (8001888 <HAL_I2C_MspInit+0x74>)
 8001866:	69db      	ldr	r3, [r3, #28]
 8001868:	4a07      	ldr	r2, [pc, #28]	; (8001888 <HAL_I2C_MspInit+0x74>)
 800186a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800186e:	61d3      	str	r3, [r2, #28]
 8001870:	4b05      	ldr	r3, [pc, #20]	; (8001888 <HAL_I2C_MspInit+0x74>)
 8001872:	69db      	ldr	r3, [r3, #28]
 8001874:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800187c:	bf00      	nop
 800187e:	3720      	adds	r7, #32
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40005400 	.word	0x40005400
 8001888:	40021000 	.word	0x40021000
 800188c:	40010c00 	.word	0x40010c00

08001890 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b088      	sub	sp, #32
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	f107 0310 	add.w	r3, r7, #16
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a15      	ldr	r2, [pc, #84]	; (8001900 <HAL_SPI_MspInit+0x70>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d123      	bne.n	80018f8 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018b0:	4b14      	ldr	r3, [pc, #80]	; (8001904 <HAL_SPI_MspInit+0x74>)
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	4a13      	ldr	r2, [pc, #76]	; (8001904 <HAL_SPI_MspInit+0x74>)
 80018b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018ba:	6193      	str	r3, [r2, #24]
 80018bc:	4b11      	ldr	r3, [pc, #68]	; (8001904 <HAL_SPI_MspInit+0x74>)
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c8:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <HAL_SPI_MspInit+0x74>)
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	4a0d      	ldr	r2, [pc, #52]	; (8001904 <HAL_SPI_MspInit+0x74>)
 80018ce:	f043 0304 	orr.w	r3, r3, #4
 80018d2:	6193      	str	r3, [r2, #24]
 80018d4:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <HAL_SPI_MspInit+0x74>)
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80018e0:	23a0      	movs	r3, #160	; 0xa0
 80018e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e4:	2302      	movs	r3, #2
 80018e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018e8:	2303      	movs	r3, #3
 80018ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ec:	f107 0310 	add.w	r3, r7, #16
 80018f0:	4619      	mov	r1, r3
 80018f2:	4805      	ldr	r0, [pc, #20]	; (8001908 <HAL_SPI_MspInit+0x78>)
 80018f4:	f000 fad4 	bl	8001ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80018f8:	bf00      	nop
 80018fa:	3720      	adds	r7, #32
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40013000 	.word	0x40013000
 8001904:	40021000 	.word	0x40021000
 8001908:	40010800 	.word	0x40010800

0800190c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b088      	sub	sp, #32
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001914:	f107 0310 	add.w	r3, r7, #16
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a1c      	ldr	r2, [pc, #112]	; (8001998 <HAL_UART_MspInit+0x8c>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d131      	bne.n	8001990 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800192c:	4b1b      	ldr	r3, [pc, #108]	; (800199c <HAL_UART_MspInit+0x90>)
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	4a1a      	ldr	r2, [pc, #104]	; (800199c <HAL_UART_MspInit+0x90>)
 8001932:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001936:	6193      	str	r3, [r2, #24]
 8001938:	4b18      	ldr	r3, [pc, #96]	; (800199c <HAL_UART_MspInit+0x90>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001944:	4b15      	ldr	r3, [pc, #84]	; (800199c <HAL_UART_MspInit+0x90>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	4a14      	ldr	r2, [pc, #80]	; (800199c <HAL_UART_MspInit+0x90>)
 800194a:	f043 0304 	orr.w	r3, r3, #4
 800194e:	6193      	str	r3, [r2, #24]
 8001950:	4b12      	ldr	r3, [pc, #72]	; (800199c <HAL_UART_MspInit+0x90>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	f003 0304 	and.w	r3, r3, #4
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800195c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001960:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001962:	2302      	movs	r3, #2
 8001964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001966:	2303      	movs	r3, #3
 8001968:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196a:	f107 0310 	add.w	r3, r7, #16
 800196e:	4619      	mov	r1, r3
 8001970:	480b      	ldr	r0, [pc, #44]	; (80019a0 <HAL_UART_MspInit+0x94>)
 8001972:	f000 fa95 	bl	8001ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001976:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800197a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001984:	f107 0310 	add.w	r3, r7, #16
 8001988:	4619      	mov	r1, r3
 800198a:	4805      	ldr	r0, [pc, #20]	; (80019a0 <HAL_UART_MspInit+0x94>)
 800198c:	f000 fa88 	bl	8001ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001990:	bf00      	nop
 8001992:	3720      	adds	r7, #32
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40013800 	.word	0x40013800
 800199c:	40021000 	.word	0x40021000
 80019a0:	40010800 	.word	0x40010800

080019a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <NMI_Handler+0x4>

080019aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ae:	e7fe      	b.n	80019ae <HardFault_Handler+0x4>

080019b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b4:	e7fe      	b.n	80019b4 <MemManage_Handler+0x4>

080019b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ba:	e7fe      	b.n	80019ba <BusFault_Handler+0x4>

080019bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c0:	e7fe      	b.n	80019c0 <UsageFault_Handler+0x4>

080019c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr

080019ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr

080019da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr

080019e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ea:	f000 f935 	bl	8001c58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0
  return 1;
 80019f6:	2301      	movs	r3, #1
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc80      	pop	{r7}
 80019fe:	4770      	bx	lr

08001a00 <_kill>:

int _kill(int pid, int sig)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a0a:	f003 fbbb 	bl	8005184 <__errno>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2216      	movs	r2, #22
 8001a12:	601a      	str	r2, [r3, #0]
  return -1;
 8001a14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <_exit>:

void _exit (int status)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a28:	f04f 31ff 	mov.w	r1, #4294967295
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f7ff ffe7 	bl	8001a00 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a32:	e7fe      	b.n	8001a32 <_exit+0x12>

08001a34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]
 8001a44:	e00a      	b.n	8001a5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a46:	f3af 8000 	nop.w
 8001a4a:	4601      	mov	r1, r0
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	1c5a      	adds	r2, r3, #1
 8001a50:	60ba      	str	r2, [r7, #8]
 8001a52:	b2ca      	uxtb	r2, r1
 8001a54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	697a      	ldr	r2, [r7, #20]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	dbf0      	blt.n	8001a46 <_read+0x12>
  }

  return len;
 8001a64:	687b      	ldr	r3, [r7, #4]
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b086      	sub	sp, #24
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	60f8      	str	r0, [r7, #12]
 8001a76:	60b9      	str	r1, [r7, #8]
 8001a78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]
 8001a7e:	e009      	b.n	8001a94 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	1c5a      	adds	r2, r3, #1
 8001a84:	60ba      	str	r2, [r7, #8]
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	3301      	adds	r3, #1
 8001a92:	617b      	str	r3, [r7, #20]
 8001a94:	697a      	ldr	r2, [r7, #20]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	dbf1      	blt.n	8001a80 <_write+0x12>
  }
  return len;
 8001a9c:	687b      	ldr	r3, [r7, #4]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3718      	adds	r7, #24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <_close>:

int _close(int file)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001aae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr

08001abc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001acc:	605a      	str	r2, [r3, #4]
  return 0;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr

08001ada <_isatty>:

int _isatty(int file)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ae2:	2301      	movs	r3, #1
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr

08001aee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b085      	sub	sp, #20
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	60f8      	str	r0, [r7, #12]
 8001af6:	60b9      	str	r1, [r7, #8]
 8001af8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3714      	adds	r7, #20
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bc80      	pop	{r7}
 8001b04:	4770      	bx	lr
	...

08001b08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b10:	4a14      	ldr	r2, [pc, #80]	; (8001b64 <_sbrk+0x5c>)
 8001b12:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <_sbrk+0x60>)
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b1c:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <_sbrk+0x64>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d102      	bne.n	8001b2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b24:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <_sbrk+0x64>)
 8001b26:	4a12      	ldr	r2, [pc, #72]	; (8001b70 <_sbrk+0x68>)
 8001b28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b2a:	4b10      	ldr	r3, [pc, #64]	; (8001b6c <_sbrk+0x64>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4413      	add	r3, r2
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d207      	bcs.n	8001b48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b38:	f003 fb24 	bl	8005184 <__errno>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	220c      	movs	r2, #12
 8001b40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b42:	f04f 33ff 	mov.w	r3, #4294967295
 8001b46:	e009      	b.n	8001b5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b48:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <_sbrk+0x64>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b4e:	4b07      	ldr	r3, [pc, #28]	; (8001b6c <_sbrk+0x64>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4413      	add	r3, r2
 8001b56:	4a05      	ldr	r2, [pc, #20]	; (8001b6c <_sbrk+0x64>)
 8001b58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20005000 	.word	0x20005000
 8001b68:	00000400 	.word	0x00000400
 8001b6c:	200003b8 	.word	0x200003b8
 8001b70:	20000510 	.word	0x20000510

08001b74 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b78:	bf00      	nop
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr

08001b80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b80:	f7ff fff8 	bl	8001b74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b84:	480b      	ldr	r0, [pc, #44]	; (8001bb4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b86:	490c      	ldr	r1, [pc, #48]	; (8001bb8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b88:	4a0c      	ldr	r2, [pc, #48]	; (8001bbc <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b8c:	e002      	b.n	8001b94 <LoopCopyDataInit>

08001b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b92:	3304      	adds	r3, #4

08001b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b98:	d3f9      	bcc.n	8001b8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b9a:	4a09      	ldr	r2, [pc, #36]	; (8001bc0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b9c:	4c09      	ldr	r4, [pc, #36]	; (8001bc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ba0:	e001      	b.n	8001ba6 <LoopFillZerobss>

08001ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ba4:	3204      	adds	r2, #4

08001ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ba8:	d3fb      	bcc.n	8001ba2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001baa:	f003 faf1 	bl	8005190 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bae:	f7ff fbdb 	bl	8001368 <main>
  bx lr
 8001bb2:	4770      	bx	lr
  ldr r0, =_sdata
 8001bb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bb8:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8001bbc:	08007684 	.word	0x08007684
  ldr r2, =_sbss
 8001bc0:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8001bc4:	2000050c 	.word	0x2000050c

08001bc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bc8:	e7fe      	b.n	8001bc8 <ADC1_2_IRQHandler>
	...

08001bcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bd0:	4b08      	ldr	r3, [pc, #32]	; (8001bf4 <HAL_Init+0x28>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a07      	ldr	r2, [pc, #28]	; (8001bf4 <HAL_Init+0x28>)
 8001bd6:	f043 0310 	orr.w	r3, r3, #16
 8001bda:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bdc:	2003      	movs	r0, #3
 8001bde:	f000 f92b 	bl	8001e38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001be2:	200f      	movs	r0, #15
 8001be4:	f000 f808 	bl	8001bf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001be8:	f7ff fde2 	bl	80017b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40022000 	.word	0x40022000

08001bf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c00:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <HAL_InitTick+0x54>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <HAL_InitTick+0x58>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	4619      	mov	r1, r3
 8001c0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c16:	4618      	mov	r0, r3
 8001c18:	f000 f935 	bl	8001e86 <HAL_SYSTICK_Config>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e00e      	b.n	8001c44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2b0f      	cmp	r3, #15
 8001c2a:	d80a      	bhi.n	8001c42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	f04f 30ff 	mov.w	r0, #4294967295
 8001c34:	f000 f90b 	bl	8001e4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c38:	4a06      	ldr	r2, [pc, #24]	; (8001c54 <HAL_InitTick+0x5c>)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	e000      	b.n	8001c44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20000028 	.word	0x20000028
 8001c50:	20000030 	.word	0x20000030
 8001c54:	2000002c 	.word	0x2000002c

08001c58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c5c:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <HAL_IncTick+0x1c>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	461a      	mov	r2, r3
 8001c62:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <HAL_IncTick+0x20>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4413      	add	r3, r2
 8001c68:	4a03      	ldr	r2, [pc, #12]	; (8001c78 <HAL_IncTick+0x20>)
 8001c6a:	6013      	str	r3, [r2, #0]
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr
 8001c74:	20000030 	.word	0x20000030
 8001c78:	200003bc 	.word	0x200003bc

08001c7c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c80:	4b02      	ldr	r3, [pc, #8]	; (8001c8c <HAL_GetTick+0x10>)
 8001c82:	681b      	ldr	r3, [r3, #0]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr
 8001c8c:	200003bc 	.word	0x200003bc

08001c90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c98:	f7ff fff0 	bl	8001c7c <HAL_GetTick>
 8001c9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca8:	d005      	beq.n	8001cb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001caa:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <HAL_Delay+0x44>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cb6:	bf00      	nop
 8001cb8:	f7ff ffe0 	bl	8001c7c <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d8f7      	bhi.n	8001cb8 <HAL_Delay+0x28>
  {
  }
}
 8001cc8:	bf00      	nop
 8001cca:	bf00      	nop
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20000030 	.word	0x20000030

08001cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce8:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <__NVIC_SetPriorityGrouping+0x44>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d0a:	4a04      	ldr	r2, [pc, #16]	; (8001d1c <__NVIC_SetPriorityGrouping+0x44>)
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	60d3      	str	r3, [r2, #12]
}
 8001d10:	bf00      	nop
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d24:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <__NVIC_GetPriorityGrouping+0x18>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	0a1b      	lsrs	r3, r3, #8
 8001d2a:	f003 0307 	and.w	r3, r3, #7
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	6039      	str	r1, [r7, #0]
 8001d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	db0a      	blt.n	8001d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	490c      	ldr	r1, [pc, #48]	; (8001d88 <__NVIC_SetPriority+0x4c>)
 8001d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5a:	0112      	lsls	r2, r2, #4
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	440b      	add	r3, r1
 8001d60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d64:	e00a      	b.n	8001d7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	4908      	ldr	r1, [pc, #32]	; (8001d8c <__NVIC_SetPriority+0x50>)
 8001d6c:	79fb      	ldrb	r3, [r7, #7]
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	3b04      	subs	r3, #4
 8001d74:	0112      	lsls	r2, r2, #4
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	440b      	add	r3, r1
 8001d7a:	761a      	strb	r2, [r3, #24]
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bc80      	pop	{r7}
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	e000e100 	.word	0xe000e100
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b089      	sub	sp, #36	; 0x24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	f1c3 0307 	rsb	r3, r3, #7
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	bf28      	it	cs
 8001dae:	2304      	movcs	r3, #4
 8001db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	3304      	adds	r3, #4
 8001db6:	2b06      	cmp	r3, #6
 8001db8:	d902      	bls.n	8001dc0 <NVIC_EncodePriority+0x30>
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	3b03      	subs	r3, #3
 8001dbe:	e000      	b.n	8001dc2 <NVIC_EncodePriority+0x32>
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	43da      	mvns	r2, r3
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	401a      	ands	r2, r3
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	fa01 f303 	lsl.w	r3, r1, r3
 8001de2:	43d9      	mvns	r1, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de8:	4313      	orrs	r3, r2
         );
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3724      	adds	r7, #36	; 0x24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bc80      	pop	{r7}
 8001df2:	4770      	bx	lr

08001df4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e04:	d301      	bcc.n	8001e0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e06:	2301      	movs	r3, #1
 8001e08:	e00f      	b.n	8001e2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e0a:	4a0a      	ldr	r2, [pc, #40]	; (8001e34 <SysTick_Config+0x40>)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e12:	210f      	movs	r1, #15
 8001e14:	f04f 30ff 	mov.w	r0, #4294967295
 8001e18:	f7ff ff90 	bl	8001d3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <SysTick_Config+0x40>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e22:	4b04      	ldr	r3, [pc, #16]	; (8001e34 <SysTick_Config+0x40>)
 8001e24:	2207      	movs	r2, #7
 8001e26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	e000e010 	.word	0xe000e010

08001e38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f7ff ff49 	bl	8001cd8 <__NVIC_SetPriorityGrouping>
}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b086      	sub	sp, #24
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	4603      	mov	r3, r0
 8001e56:	60b9      	str	r1, [r7, #8]
 8001e58:	607a      	str	r2, [r7, #4]
 8001e5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e60:	f7ff ff5e 	bl	8001d20 <__NVIC_GetPriorityGrouping>
 8001e64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	68b9      	ldr	r1, [r7, #8]
 8001e6a:	6978      	ldr	r0, [r7, #20]
 8001e6c:	f7ff ff90 	bl	8001d90 <NVIC_EncodePriority>
 8001e70:	4602      	mov	r2, r0
 8001e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e76:	4611      	mov	r1, r2
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff ff5f 	bl	8001d3c <__NVIC_SetPriority>
}
 8001e7e:	bf00      	nop
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b082      	sub	sp, #8
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff ffb0 	bl	8001df4 <SysTick_Config>
 8001e94:	4603      	mov	r3, r0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b08b      	sub	sp, #44	; 0x2c
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eb2:	e169      	b.n	8002188 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	69fa      	ldr	r2, [r7, #28]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	f040 8158 	bne.w	8002182 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	4a9a      	ldr	r2, [pc, #616]	; (8002140 <HAL_GPIO_Init+0x2a0>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d05e      	beq.n	8001f9a <HAL_GPIO_Init+0xfa>
 8001edc:	4a98      	ldr	r2, [pc, #608]	; (8002140 <HAL_GPIO_Init+0x2a0>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d875      	bhi.n	8001fce <HAL_GPIO_Init+0x12e>
 8001ee2:	4a98      	ldr	r2, [pc, #608]	; (8002144 <HAL_GPIO_Init+0x2a4>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d058      	beq.n	8001f9a <HAL_GPIO_Init+0xfa>
 8001ee8:	4a96      	ldr	r2, [pc, #600]	; (8002144 <HAL_GPIO_Init+0x2a4>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d86f      	bhi.n	8001fce <HAL_GPIO_Init+0x12e>
 8001eee:	4a96      	ldr	r2, [pc, #600]	; (8002148 <HAL_GPIO_Init+0x2a8>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d052      	beq.n	8001f9a <HAL_GPIO_Init+0xfa>
 8001ef4:	4a94      	ldr	r2, [pc, #592]	; (8002148 <HAL_GPIO_Init+0x2a8>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d869      	bhi.n	8001fce <HAL_GPIO_Init+0x12e>
 8001efa:	4a94      	ldr	r2, [pc, #592]	; (800214c <HAL_GPIO_Init+0x2ac>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d04c      	beq.n	8001f9a <HAL_GPIO_Init+0xfa>
 8001f00:	4a92      	ldr	r2, [pc, #584]	; (800214c <HAL_GPIO_Init+0x2ac>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d863      	bhi.n	8001fce <HAL_GPIO_Init+0x12e>
 8001f06:	4a92      	ldr	r2, [pc, #584]	; (8002150 <HAL_GPIO_Init+0x2b0>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d046      	beq.n	8001f9a <HAL_GPIO_Init+0xfa>
 8001f0c:	4a90      	ldr	r2, [pc, #576]	; (8002150 <HAL_GPIO_Init+0x2b0>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d85d      	bhi.n	8001fce <HAL_GPIO_Init+0x12e>
 8001f12:	2b12      	cmp	r3, #18
 8001f14:	d82a      	bhi.n	8001f6c <HAL_GPIO_Init+0xcc>
 8001f16:	2b12      	cmp	r3, #18
 8001f18:	d859      	bhi.n	8001fce <HAL_GPIO_Init+0x12e>
 8001f1a:	a201      	add	r2, pc, #4	; (adr r2, 8001f20 <HAL_GPIO_Init+0x80>)
 8001f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f20:	08001f9b 	.word	0x08001f9b
 8001f24:	08001f75 	.word	0x08001f75
 8001f28:	08001f87 	.word	0x08001f87
 8001f2c:	08001fc9 	.word	0x08001fc9
 8001f30:	08001fcf 	.word	0x08001fcf
 8001f34:	08001fcf 	.word	0x08001fcf
 8001f38:	08001fcf 	.word	0x08001fcf
 8001f3c:	08001fcf 	.word	0x08001fcf
 8001f40:	08001fcf 	.word	0x08001fcf
 8001f44:	08001fcf 	.word	0x08001fcf
 8001f48:	08001fcf 	.word	0x08001fcf
 8001f4c:	08001fcf 	.word	0x08001fcf
 8001f50:	08001fcf 	.word	0x08001fcf
 8001f54:	08001fcf 	.word	0x08001fcf
 8001f58:	08001fcf 	.word	0x08001fcf
 8001f5c:	08001fcf 	.word	0x08001fcf
 8001f60:	08001fcf 	.word	0x08001fcf
 8001f64:	08001f7d 	.word	0x08001f7d
 8001f68:	08001f91 	.word	0x08001f91
 8001f6c:	4a79      	ldr	r2, [pc, #484]	; (8002154 <HAL_GPIO_Init+0x2b4>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d013      	beq.n	8001f9a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f72:	e02c      	b.n	8001fce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	623b      	str	r3, [r7, #32]
          break;
 8001f7a:	e029      	b.n	8001fd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	3304      	adds	r3, #4
 8001f82:	623b      	str	r3, [r7, #32]
          break;
 8001f84:	e024      	b.n	8001fd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	3308      	adds	r3, #8
 8001f8c:	623b      	str	r3, [r7, #32]
          break;
 8001f8e:	e01f      	b.n	8001fd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	330c      	adds	r3, #12
 8001f96:	623b      	str	r3, [r7, #32]
          break;
 8001f98:	e01a      	b.n	8001fd0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d102      	bne.n	8001fa8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fa2:	2304      	movs	r3, #4
 8001fa4:	623b      	str	r3, [r7, #32]
          break;
 8001fa6:	e013      	b.n	8001fd0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d105      	bne.n	8001fbc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fb0:	2308      	movs	r3, #8
 8001fb2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	69fa      	ldr	r2, [r7, #28]
 8001fb8:	611a      	str	r2, [r3, #16]
          break;
 8001fba:	e009      	b.n	8001fd0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fbc:	2308      	movs	r3, #8
 8001fbe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69fa      	ldr	r2, [r7, #28]
 8001fc4:	615a      	str	r2, [r3, #20]
          break;
 8001fc6:	e003      	b.n	8001fd0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	623b      	str	r3, [r7, #32]
          break;
 8001fcc:	e000      	b.n	8001fd0 <HAL_GPIO_Init+0x130>
          break;
 8001fce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	2bff      	cmp	r3, #255	; 0xff
 8001fd4:	d801      	bhi.n	8001fda <HAL_GPIO_Init+0x13a>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	e001      	b.n	8001fde <HAL_GPIO_Init+0x13e>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3304      	adds	r3, #4
 8001fde:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	2bff      	cmp	r3, #255	; 0xff
 8001fe4:	d802      	bhi.n	8001fec <HAL_GPIO_Init+0x14c>
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	e002      	b.n	8001ff2 <HAL_GPIO_Init+0x152>
 8001fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fee:	3b08      	subs	r3, #8
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	210f      	movs	r1, #15
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	401a      	ands	r2, r3
 8002004:	6a39      	ldr	r1, [r7, #32]
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	fa01 f303 	lsl.w	r3, r1, r3
 800200c:	431a      	orrs	r2, r3
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201a:	2b00      	cmp	r3, #0
 800201c:	f000 80b1 	beq.w	8002182 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002020:	4b4d      	ldr	r3, [pc, #308]	; (8002158 <HAL_GPIO_Init+0x2b8>)
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	4a4c      	ldr	r2, [pc, #304]	; (8002158 <HAL_GPIO_Init+0x2b8>)
 8002026:	f043 0301 	orr.w	r3, r3, #1
 800202a:	6193      	str	r3, [r2, #24]
 800202c:	4b4a      	ldr	r3, [pc, #296]	; (8002158 <HAL_GPIO_Init+0x2b8>)
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002038:	4a48      	ldr	r2, [pc, #288]	; (800215c <HAL_GPIO_Init+0x2bc>)
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	089b      	lsrs	r3, r3, #2
 800203e:	3302      	adds	r3, #2
 8002040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002044:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	f003 0303 	and.w	r3, r3, #3
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	220f      	movs	r2, #15
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43db      	mvns	r3, r3
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	4013      	ands	r3, r2
 800205a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a40      	ldr	r2, [pc, #256]	; (8002160 <HAL_GPIO_Init+0x2c0>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d013      	beq.n	800208c <HAL_GPIO_Init+0x1ec>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a3f      	ldr	r2, [pc, #252]	; (8002164 <HAL_GPIO_Init+0x2c4>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d00d      	beq.n	8002088 <HAL_GPIO_Init+0x1e8>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a3e      	ldr	r2, [pc, #248]	; (8002168 <HAL_GPIO_Init+0x2c8>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d007      	beq.n	8002084 <HAL_GPIO_Init+0x1e4>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a3d      	ldr	r2, [pc, #244]	; (800216c <HAL_GPIO_Init+0x2cc>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d101      	bne.n	8002080 <HAL_GPIO_Init+0x1e0>
 800207c:	2303      	movs	r3, #3
 800207e:	e006      	b.n	800208e <HAL_GPIO_Init+0x1ee>
 8002080:	2304      	movs	r3, #4
 8002082:	e004      	b.n	800208e <HAL_GPIO_Init+0x1ee>
 8002084:	2302      	movs	r3, #2
 8002086:	e002      	b.n	800208e <HAL_GPIO_Init+0x1ee>
 8002088:	2301      	movs	r3, #1
 800208a:	e000      	b.n	800208e <HAL_GPIO_Init+0x1ee>
 800208c:	2300      	movs	r3, #0
 800208e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002090:	f002 0203 	and.w	r2, r2, #3
 8002094:	0092      	lsls	r2, r2, #2
 8002096:	4093      	lsls	r3, r2
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	4313      	orrs	r3, r2
 800209c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800209e:	492f      	ldr	r1, [pc, #188]	; (800215c <HAL_GPIO_Init+0x2bc>)
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	089b      	lsrs	r3, r3, #2
 80020a4:	3302      	adds	r3, #2
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d006      	beq.n	80020c6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020b8:	4b2d      	ldr	r3, [pc, #180]	; (8002170 <HAL_GPIO_Init+0x2d0>)
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	492c      	ldr	r1, [pc, #176]	; (8002170 <HAL_GPIO_Init+0x2d0>)
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	608b      	str	r3, [r1, #8]
 80020c4:	e006      	b.n	80020d4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020c6:	4b2a      	ldr	r3, [pc, #168]	; (8002170 <HAL_GPIO_Init+0x2d0>)
 80020c8:	689a      	ldr	r2, [r3, #8]
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	43db      	mvns	r3, r3
 80020ce:	4928      	ldr	r1, [pc, #160]	; (8002170 <HAL_GPIO_Init+0x2d0>)
 80020d0:	4013      	ands	r3, r2
 80020d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d006      	beq.n	80020ee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020e0:	4b23      	ldr	r3, [pc, #140]	; (8002170 <HAL_GPIO_Init+0x2d0>)
 80020e2:	68da      	ldr	r2, [r3, #12]
 80020e4:	4922      	ldr	r1, [pc, #136]	; (8002170 <HAL_GPIO_Init+0x2d0>)
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	60cb      	str	r3, [r1, #12]
 80020ec:	e006      	b.n	80020fc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020ee:	4b20      	ldr	r3, [pc, #128]	; (8002170 <HAL_GPIO_Init+0x2d0>)
 80020f0:	68da      	ldr	r2, [r3, #12]
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	43db      	mvns	r3, r3
 80020f6:	491e      	ldr	r1, [pc, #120]	; (8002170 <HAL_GPIO_Init+0x2d0>)
 80020f8:	4013      	ands	r3, r2
 80020fa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d006      	beq.n	8002116 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002108:	4b19      	ldr	r3, [pc, #100]	; (8002170 <HAL_GPIO_Init+0x2d0>)
 800210a:	685a      	ldr	r2, [r3, #4]
 800210c:	4918      	ldr	r1, [pc, #96]	; (8002170 <HAL_GPIO_Init+0x2d0>)
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	4313      	orrs	r3, r2
 8002112:	604b      	str	r3, [r1, #4]
 8002114:	e006      	b.n	8002124 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002116:	4b16      	ldr	r3, [pc, #88]	; (8002170 <HAL_GPIO_Init+0x2d0>)
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	43db      	mvns	r3, r3
 800211e:	4914      	ldr	r1, [pc, #80]	; (8002170 <HAL_GPIO_Init+0x2d0>)
 8002120:	4013      	ands	r3, r2
 8002122:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d021      	beq.n	8002174 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002130:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <HAL_GPIO_Init+0x2d0>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	490e      	ldr	r1, [pc, #56]	; (8002170 <HAL_GPIO_Init+0x2d0>)
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	4313      	orrs	r3, r2
 800213a:	600b      	str	r3, [r1, #0]
 800213c:	e021      	b.n	8002182 <HAL_GPIO_Init+0x2e2>
 800213e:	bf00      	nop
 8002140:	10320000 	.word	0x10320000
 8002144:	10310000 	.word	0x10310000
 8002148:	10220000 	.word	0x10220000
 800214c:	10210000 	.word	0x10210000
 8002150:	10120000 	.word	0x10120000
 8002154:	10110000 	.word	0x10110000
 8002158:	40021000 	.word	0x40021000
 800215c:	40010000 	.word	0x40010000
 8002160:	40010800 	.word	0x40010800
 8002164:	40010c00 	.word	0x40010c00
 8002168:	40011000 	.word	0x40011000
 800216c:	40011400 	.word	0x40011400
 8002170:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002174:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <HAL_GPIO_Init+0x304>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	43db      	mvns	r3, r3
 800217c:	4909      	ldr	r1, [pc, #36]	; (80021a4 <HAL_GPIO_Init+0x304>)
 800217e:	4013      	ands	r3, r2
 8002180:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002184:	3301      	adds	r3, #1
 8002186:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	fa22 f303 	lsr.w	r3, r2, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	f47f ae8e 	bne.w	8001eb4 <HAL_GPIO_Init+0x14>
  }
}
 8002198:	bf00      	nop
 800219a:	bf00      	nop
 800219c:	372c      	adds	r7, #44	; 0x2c
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr
 80021a4:	40010400 	.word	0x40010400

080021a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	460b      	mov	r3, r1
 80021b2:	807b      	strh	r3, [r7, #2]
 80021b4:	4613      	mov	r3, r2
 80021b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021b8:	787b      	ldrb	r3, [r7, #1]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021be:	887a      	ldrh	r2, [r7, #2]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021c4:	e003      	b.n	80021ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021c6:	887b      	ldrh	r3, [r7, #2]
 80021c8:	041a      	lsls	r2, r3, #16
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	611a      	str	r2, [r3, #16]
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr

080021d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e12b      	b.n	8002442 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d106      	bne.n	8002204 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f7ff fb08 	bl	8001814 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2224      	movs	r2, #36	; 0x24
 8002208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 0201 	bic.w	r2, r2, #1
 800221a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800222a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800223a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800223c:	f001 fd5a 	bl	8003cf4 <HAL_RCC_GetPCLK1Freq>
 8002240:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	4a81      	ldr	r2, [pc, #516]	; (800244c <HAL_I2C_Init+0x274>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d807      	bhi.n	800225c <HAL_I2C_Init+0x84>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4a80      	ldr	r2, [pc, #512]	; (8002450 <HAL_I2C_Init+0x278>)
 8002250:	4293      	cmp	r3, r2
 8002252:	bf94      	ite	ls
 8002254:	2301      	movls	r3, #1
 8002256:	2300      	movhi	r3, #0
 8002258:	b2db      	uxtb	r3, r3
 800225a:	e006      	b.n	800226a <HAL_I2C_Init+0x92>
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	4a7d      	ldr	r2, [pc, #500]	; (8002454 <HAL_I2C_Init+0x27c>)
 8002260:	4293      	cmp	r3, r2
 8002262:	bf94      	ite	ls
 8002264:	2301      	movls	r3, #1
 8002266:	2300      	movhi	r3, #0
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e0e7      	b.n	8002442 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	4a78      	ldr	r2, [pc, #480]	; (8002458 <HAL_I2C_Init+0x280>)
 8002276:	fba2 2303 	umull	r2, r3, r2, r3
 800227a:	0c9b      	lsrs	r3, r3, #18
 800227c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	430a      	orrs	r2, r1
 8002290:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6a1b      	ldr	r3, [r3, #32]
 8002298:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	4a6a      	ldr	r2, [pc, #424]	; (800244c <HAL_I2C_Init+0x274>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d802      	bhi.n	80022ac <HAL_I2C_Init+0xd4>
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	3301      	adds	r3, #1
 80022aa:	e009      	b.n	80022c0 <HAL_I2C_Init+0xe8>
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80022b2:	fb02 f303 	mul.w	r3, r2, r3
 80022b6:	4a69      	ldr	r2, [pc, #420]	; (800245c <HAL_I2C_Init+0x284>)
 80022b8:	fba2 2303 	umull	r2, r3, r2, r3
 80022bc:	099b      	lsrs	r3, r3, #6
 80022be:	3301      	adds	r3, #1
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	6812      	ldr	r2, [r2, #0]
 80022c4:	430b      	orrs	r3, r1
 80022c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80022d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	495c      	ldr	r1, [pc, #368]	; (800244c <HAL_I2C_Init+0x274>)
 80022dc:	428b      	cmp	r3, r1
 80022de:	d819      	bhi.n	8002314 <HAL_I2C_Init+0x13c>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	1e59      	subs	r1, r3, #1
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80022ee:	1c59      	adds	r1, r3, #1
 80022f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80022f4:	400b      	ands	r3, r1
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00a      	beq.n	8002310 <HAL_I2C_Init+0x138>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	1e59      	subs	r1, r3, #1
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	fbb1 f3f3 	udiv	r3, r1, r3
 8002308:	3301      	adds	r3, #1
 800230a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800230e:	e051      	b.n	80023b4 <HAL_I2C_Init+0x1dc>
 8002310:	2304      	movs	r3, #4
 8002312:	e04f      	b.n	80023b4 <HAL_I2C_Init+0x1dc>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d111      	bne.n	8002340 <HAL_I2C_Init+0x168>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	1e58      	subs	r0, r3, #1
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6859      	ldr	r1, [r3, #4]
 8002324:	460b      	mov	r3, r1
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	440b      	add	r3, r1
 800232a:	fbb0 f3f3 	udiv	r3, r0, r3
 800232e:	3301      	adds	r3, #1
 8002330:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002334:	2b00      	cmp	r3, #0
 8002336:	bf0c      	ite	eq
 8002338:	2301      	moveq	r3, #1
 800233a:	2300      	movne	r3, #0
 800233c:	b2db      	uxtb	r3, r3
 800233e:	e012      	b.n	8002366 <HAL_I2C_Init+0x18e>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	1e58      	subs	r0, r3, #1
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6859      	ldr	r1, [r3, #4]
 8002348:	460b      	mov	r3, r1
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	440b      	add	r3, r1
 800234e:	0099      	lsls	r1, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	fbb0 f3f3 	udiv	r3, r0, r3
 8002356:	3301      	adds	r3, #1
 8002358:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800235c:	2b00      	cmp	r3, #0
 800235e:	bf0c      	ite	eq
 8002360:	2301      	moveq	r3, #1
 8002362:	2300      	movne	r3, #0
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <HAL_I2C_Init+0x196>
 800236a:	2301      	movs	r3, #1
 800236c:	e022      	b.n	80023b4 <HAL_I2C_Init+0x1dc>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10e      	bne.n	8002394 <HAL_I2C_Init+0x1bc>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	1e58      	subs	r0, r3, #1
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6859      	ldr	r1, [r3, #4]
 800237e:	460b      	mov	r3, r1
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	440b      	add	r3, r1
 8002384:	fbb0 f3f3 	udiv	r3, r0, r3
 8002388:	3301      	adds	r3, #1
 800238a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800238e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002392:	e00f      	b.n	80023b4 <HAL_I2C_Init+0x1dc>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	1e58      	subs	r0, r3, #1
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6859      	ldr	r1, [r3, #4]
 800239c:	460b      	mov	r3, r1
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	440b      	add	r3, r1
 80023a2:	0099      	lsls	r1, r3, #2
 80023a4:	440b      	add	r3, r1
 80023a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80023aa:	3301      	adds	r3, #1
 80023ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	6809      	ldr	r1, [r1, #0]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	69da      	ldr	r2, [r3, #28]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a1b      	ldr	r3, [r3, #32]
 80023ce:	431a      	orrs	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	430a      	orrs	r2, r1
 80023d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80023e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	6911      	ldr	r1, [r2, #16]
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	68d2      	ldr	r2, [r2, #12]
 80023ee:	4311      	orrs	r1, r2
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	6812      	ldr	r2, [r2, #0]
 80023f4:	430b      	orrs	r3, r1
 80023f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	695a      	ldr	r2, [r3, #20]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	431a      	orrs	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	430a      	orrs	r2, r1
 8002412:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f042 0201 	orr.w	r2, r2, #1
 8002422:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2220      	movs	r2, #32
 800242e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	000186a0 	.word	0x000186a0
 8002450:	001e847f 	.word	0x001e847f
 8002454:	003d08ff 	.word	0x003d08ff
 8002458:	431bde83 	.word	0x431bde83
 800245c:	10624dd3 	.word	0x10624dd3

08002460 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b088      	sub	sp, #32
 8002464:	af02      	add	r7, sp, #8
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	607a      	str	r2, [r7, #4]
 800246a:	461a      	mov	r2, r3
 800246c:	460b      	mov	r3, r1
 800246e:	817b      	strh	r3, [r7, #10]
 8002470:	4613      	mov	r3, r2
 8002472:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002474:	f7ff fc02 	bl	8001c7c <HAL_GetTick>
 8002478:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b20      	cmp	r3, #32
 8002484:	f040 80e0 	bne.w	8002648 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	9300      	str	r3, [sp, #0]
 800248c:	2319      	movs	r3, #25
 800248e:	2201      	movs	r2, #1
 8002490:	4970      	ldr	r1, [pc, #448]	; (8002654 <HAL_I2C_Master_Transmit+0x1f4>)
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f000 fe2e 	bl	80030f4 <I2C_WaitOnFlagUntilTimeout>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800249e:	2302      	movs	r3, #2
 80024a0:	e0d3      	b.n	800264a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d101      	bne.n	80024b0 <HAL_I2C_Master_Transmit+0x50>
 80024ac:	2302      	movs	r3, #2
 80024ae:	e0cc      	b.n	800264a <HAL_I2C_Master_Transmit+0x1ea>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d007      	beq.n	80024d6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f042 0201 	orr.w	r2, r2, #1
 80024d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2221      	movs	r2, #33	; 0x21
 80024ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2210      	movs	r2, #16
 80024f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	893a      	ldrh	r2, [r7, #8]
 8002506:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800250c:	b29a      	uxth	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	4a50      	ldr	r2, [pc, #320]	; (8002658 <HAL_I2C_Master_Transmit+0x1f8>)
 8002516:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002518:	8979      	ldrh	r1, [r7, #10]
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	6a3a      	ldr	r2, [r7, #32]
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f000 fc02 	bl	8002d28 <I2C_MasterRequestWrite>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e08d      	b.n	800264a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800252e:	2300      	movs	r3, #0
 8002530:	613b      	str	r3, [r7, #16]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	613b      	str	r3, [r7, #16]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	613b      	str	r3, [r7, #16]
 8002542:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002544:	e066      	b.n	8002614 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	6a39      	ldr	r1, [r7, #32]
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f000 feec 	bl	8003328 <I2C_WaitOnTXEFlagUntilTimeout>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00d      	beq.n	8002572 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	2b04      	cmp	r3, #4
 800255c:	d107      	bne.n	800256e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800256c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e06b      	b.n	800264a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002576:	781a      	ldrb	r2, [r3, #0]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002582:	1c5a      	adds	r2, r3, #1
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800258c:	b29b      	uxth	r3, r3
 800258e:	3b01      	subs	r3, #1
 8002590:	b29a      	uxth	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800259a:	3b01      	subs	r3, #1
 800259c:	b29a      	uxth	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	2b04      	cmp	r3, #4
 80025ae:	d11b      	bne.n	80025e8 <HAL_I2C_Master_Transmit+0x188>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d017      	beq.n	80025e8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025bc:	781a      	ldrb	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c8:	1c5a      	adds	r2, r3, #1
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	3b01      	subs	r3, #1
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e0:	3b01      	subs	r3, #1
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025e8:	697a      	ldr	r2, [r7, #20]
 80025ea:	6a39      	ldr	r1, [r7, #32]
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f000 fee3 	bl	80033b8 <I2C_WaitOnBTFFlagUntilTimeout>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00d      	beq.n	8002614 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fc:	2b04      	cmp	r3, #4
 80025fe:	d107      	bne.n	8002610 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800260e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e01a      	b.n	800264a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002618:	2b00      	cmp	r3, #0
 800261a:	d194      	bne.n	8002546 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800262a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2220      	movs	r2, #32
 8002630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002644:	2300      	movs	r3, #0
 8002646:	e000      	b.n	800264a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002648:	2302      	movs	r3, #2
  }
}
 800264a:	4618      	mov	r0, r3
 800264c:	3718      	adds	r7, #24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	00100002 	.word	0x00100002
 8002658:	ffff0000 	.word	0xffff0000

0800265c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b08c      	sub	sp, #48	; 0x30
 8002660:	af02      	add	r7, sp, #8
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	607a      	str	r2, [r7, #4]
 8002666:	461a      	mov	r2, r3
 8002668:	460b      	mov	r3, r1
 800266a:	817b      	strh	r3, [r7, #10]
 800266c:	4613      	mov	r3, r2
 800266e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002674:	f7ff fb02 	bl	8001c7c <HAL_GetTick>
 8002678:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b20      	cmp	r3, #32
 8002684:	f040 824b 	bne.w	8002b1e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268a:	9300      	str	r3, [sp, #0]
 800268c:	2319      	movs	r3, #25
 800268e:	2201      	movs	r2, #1
 8002690:	497f      	ldr	r1, [pc, #508]	; (8002890 <HAL_I2C_Master_Receive+0x234>)
 8002692:	68f8      	ldr	r0, [r7, #12]
 8002694:	f000 fd2e 	bl	80030f4 <I2C_WaitOnFlagUntilTimeout>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800269e:	2302      	movs	r3, #2
 80026a0:	e23e      	b.n	8002b20 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d101      	bne.n	80026b0 <HAL_I2C_Master_Receive+0x54>
 80026ac:	2302      	movs	r3, #2
 80026ae:	e237      	b.n	8002b20 <HAL_I2C_Master_Receive+0x4c4>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d007      	beq.n	80026d6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f042 0201 	orr.w	r2, r2, #1
 80026d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2222      	movs	r2, #34	; 0x22
 80026ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2210      	movs	r2, #16
 80026f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2200      	movs	r2, #0
 80026fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	893a      	ldrh	r2, [r7, #8]
 8002706:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270c:	b29a      	uxth	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	4a5f      	ldr	r2, [pc, #380]	; (8002894 <HAL_I2C_Master_Receive+0x238>)
 8002716:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002718:	8979      	ldrh	r1, [r7, #10]
 800271a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f000 fb84 	bl	8002e2c <I2C_MasterRequestRead>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e1f8      	b.n	8002b20 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002732:	2b00      	cmp	r3, #0
 8002734:	d113      	bne.n	800275e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002736:	2300      	movs	r3, #0
 8002738:	61fb      	str	r3, [r7, #28]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	695b      	ldr	r3, [r3, #20]
 8002740:	61fb      	str	r3, [r7, #28]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	61fb      	str	r3, [r7, #28]
 800274a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	e1cc      	b.n	8002af8 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002762:	2b01      	cmp	r3, #1
 8002764:	d11e      	bne.n	80027a4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002774:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002776:	b672      	cpsid	i
}
 8002778:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800277a:	2300      	movs	r3, #0
 800277c:	61bb      	str	r3, [r7, #24]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	61bb      	str	r3, [r7, #24]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	61bb      	str	r3, [r7, #24]
 800278e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800279e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80027a0:	b662      	cpsie	i
}
 80027a2:	e035      	b.n	8002810 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d11e      	bne.n	80027ea <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027ba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80027bc:	b672      	cpsid	i
}
 80027be:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027c0:	2300      	movs	r3, #0
 80027c2:	617b      	str	r3, [r7, #20]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	617b      	str	r3, [r7, #20]
 80027d4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80027e6:	b662      	cpsie	i
}
 80027e8:	e012      	b.n	8002810 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027fa:	2300      	movs	r3, #0
 80027fc:	613b      	str	r3, [r7, #16]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	613b      	str	r3, [r7, #16]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	613b      	str	r3, [r7, #16]
 800280e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002810:	e172      	b.n	8002af8 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002816:	2b03      	cmp	r3, #3
 8002818:	f200 811f 	bhi.w	8002a5a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002820:	2b01      	cmp	r3, #1
 8002822:	d123      	bne.n	800286c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002826:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f000 fe0d 	bl	8003448 <I2C_WaitOnRXNEFlagUntilTimeout>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e173      	b.n	8002b20 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	691a      	ldr	r2, [r3, #16]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284a:	1c5a      	adds	r2, r3, #1
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002854:	3b01      	subs	r3, #1
 8002856:	b29a      	uxth	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002860:	b29b      	uxth	r3, r3
 8002862:	3b01      	subs	r3, #1
 8002864:	b29a      	uxth	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	855a      	strh	r2, [r3, #42]	; 0x2a
 800286a:	e145      	b.n	8002af8 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002870:	2b02      	cmp	r3, #2
 8002872:	d152      	bne.n	800291a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800287a:	2200      	movs	r2, #0
 800287c:	4906      	ldr	r1, [pc, #24]	; (8002898 <HAL_I2C_Master_Receive+0x23c>)
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f000 fc38 	bl	80030f4 <I2C_WaitOnFlagUntilTimeout>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d008      	beq.n	800289c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e148      	b.n	8002b20 <HAL_I2C_Master_Receive+0x4c4>
 800288e:	bf00      	nop
 8002890:	00100002 	.word	0x00100002
 8002894:	ffff0000 	.word	0xffff0000
 8002898:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800289c:	b672      	cpsid	i
}
 800289e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	691a      	ldr	r2, [r3, #16]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c2:	1c5a      	adds	r2, r3, #1
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028cc:	3b01      	subs	r3, #1
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d8:	b29b      	uxth	r3, r3
 80028da:	3b01      	subs	r3, #1
 80028dc:	b29a      	uxth	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80028e2:	b662      	cpsie	i
}
 80028e4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	691a      	ldr	r2, [r3, #16]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	b2d2      	uxtb	r2, r2
 80028f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f8:	1c5a      	adds	r2, r3, #1
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002902:	3b01      	subs	r3, #1
 8002904:	b29a      	uxth	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800290e:	b29b      	uxth	r3, r3
 8002910:	3b01      	subs	r3, #1
 8002912:	b29a      	uxth	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002918:	e0ee      	b.n	8002af8 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002920:	2200      	movs	r2, #0
 8002922:	4981      	ldr	r1, [pc, #516]	; (8002b28 <HAL_I2C_Master_Receive+0x4cc>)
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f000 fbe5 	bl	80030f4 <I2C_WaitOnFlagUntilTimeout>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e0f5      	b.n	8002b20 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002942:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002944:	b672      	cpsid	i
}
 8002946:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	691a      	ldr	r2, [r3, #16]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295a:	1c5a      	adds	r2, r3, #1
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002964:	3b01      	subs	r3, #1
 8002966:	b29a      	uxth	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002970:	b29b      	uxth	r3, r3
 8002972:	3b01      	subs	r3, #1
 8002974:	b29a      	uxth	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800297a:	4b6c      	ldr	r3, [pc, #432]	; (8002b2c <HAL_I2C_Master_Receive+0x4d0>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	08db      	lsrs	r3, r3, #3
 8002980:	4a6b      	ldr	r2, [pc, #428]	; (8002b30 <HAL_I2C_Master_Receive+0x4d4>)
 8002982:	fba2 2303 	umull	r2, r3, r2, r3
 8002986:	0a1a      	lsrs	r2, r3, #8
 8002988:	4613      	mov	r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4413      	add	r3, r2
 800298e:	00da      	lsls	r2, r3, #3
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002994:	6a3b      	ldr	r3, [r7, #32]
 8002996:	3b01      	subs	r3, #1
 8002998:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800299a:	6a3b      	ldr	r3, [r7, #32]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d118      	bne.n	80029d2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2220      	movs	r2, #32
 80029aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	f043 0220 	orr.w	r2, r3, #32
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80029c2:	b662      	cpsie	i
}
 80029c4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e0a6      	b.n	8002b20 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	695b      	ldr	r3, [r3, #20]
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	2b04      	cmp	r3, #4
 80029de:	d1d9      	bne.n	8002994 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	691a      	ldr	r2, [r3, #16]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fa:	b2d2      	uxtb	r2, r2
 80029fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a02:	1c5a      	adds	r2, r3, #1
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002a22:	b662      	cpsie	i
}
 8002a24:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	691a      	ldr	r2, [r3, #16]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a30:	b2d2      	uxtb	r2, r2
 8002a32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a38:	1c5a      	adds	r2, r3, #1
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a42:	3b01      	subs	r3, #1
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	3b01      	subs	r3, #1
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a58:	e04e      	b.n	8002af8 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f000 fcf2 	bl	8003448 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e058      	b.n	8002b20 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	691a      	ldr	r2, [r3, #16]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a78:	b2d2      	uxtb	r2, r2
 8002a7a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a80:	1c5a      	adds	r2, r3, #1
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	b29a      	uxth	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	f003 0304 	and.w	r3, r3, #4
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	d124      	bne.n	8002af8 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab2:	2b03      	cmp	r3, #3
 8002ab4:	d107      	bne.n	8002ac6 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ac4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	691a      	ldr	r2, [r3, #16]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	b2d2      	uxtb	r2, r2
 8002ad2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad8:	1c5a      	adds	r2, r3, #1
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	3b01      	subs	r3, #1
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f47f ae88 	bne.w	8002812 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2220      	movs	r2, #32
 8002b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	e000      	b.n	8002b20 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002b1e:	2302      	movs	r3, #2
  }
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3728      	adds	r7, #40	; 0x28
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	00010004 	.word	0x00010004
 8002b2c:	20000028 	.word	0x20000028
 8002b30:	14f8b589 	.word	0x14f8b589

08002b34 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b088      	sub	sp, #32
 8002b38:	af02      	add	r7, sp, #8
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	4608      	mov	r0, r1
 8002b3e:	4611      	mov	r1, r2
 8002b40:	461a      	mov	r2, r3
 8002b42:	4603      	mov	r3, r0
 8002b44:	817b      	strh	r3, [r7, #10]
 8002b46:	460b      	mov	r3, r1
 8002b48:	813b      	strh	r3, [r7, #8]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b4e:	f7ff f895 	bl	8001c7c <HAL_GetTick>
 8002b52:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b20      	cmp	r3, #32
 8002b5e:	f040 80d9 	bne.w	8002d14 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	9300      	str	r3, [sp, #0]
 8002b66:	2319      	movs	r3, #25
 8002b68:	2201      	movs	r2, #1
 8002b6a:	496d      	ldr	r1, [pc, #436]	; (8002d20 <HAL_I2C_Mem_Write+0x1ec>)
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	f000 fac1 	bl	80030f4 <I2C_WaitOnFlagUntilTimeout>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002b78:	2302      	movs	r3, #2
 8002b7a:	e0cc      	b.n	8002d16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d101      	bne.n	8002b8a <HAL_I2C_Mem_Write+0x56>
 8002b86:	2302      	movs	r3, #2
 8002b88:	e0c5      	b.n	8002d16 <HAL_I2C_Mem_Write+0x1e2>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d007      	beq.n	8002bb0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0201 	orr.w	r2, r2, #1
 8002bae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bbe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2221      	movs	r2, #33	; 0x21
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2240      	movs	r2, #64	; 0x40
 8002bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6a3a      	ldr	r2, [r7, #32]
 8002bda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002be0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	4a4d      	ldr	r2, [pc, #308]	; (8002d24 <HAL_I2C_Mem_Write+0x1f0>)
 8002bf0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bf2:	88f8      	ldrh	r0, [r7, #6]
 8002bf4:	893a      	ldrh	r2, [r7, #8]
 8002bf6:	8979      	ldrh	r1, [r7, #10]
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	9301      	str	r3, [sp, #4]
 8002bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	4603      	mov	r3, r0
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f000 f9e0 	bl	8002fc8 <I2C_RequestMemoryWrite>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d052      	beq.n	8002cb4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e081      	b.n	8002d16 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 fb86 	bl	8003328 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00d      	beq.n	8002c3e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d107      	bne.n	8002c3a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e06b      	b.n	8002d16 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c42:	781a      	ldrb	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	1c5a      	adds	r2, r3, #1
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	3b01      	subs	r3, #1
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	f003 0304 	and.w	r3, r3, #4
 8002c78:	2b04      	cmp	r3, #4
 8002c7a:	d11b      	bne.n	8002cb4 <HAL_I2C_Mem_Write+0x180>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d017      	beq.n	8002cb4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	781a      	ldrb	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c94:	1c5a      	adds	r2, r3, #1
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	3b01      	subs	r3, #1
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1aa      	bne.n	8002c12 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f000 fb79 	bl	80033b8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00d      	beq.n	8002ce8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd0:	2b04      	cmp	r3, #4
 8002cd2:	d107      	bne.n	8002ce4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ce2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e016      	b.n	8002d16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d10:	2300      	movs	r3, #0
 8002d12:	e000      	b.n	8002d16 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002d14:	2302      	movs	r3, #2
  }
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3718      	adds	r7, #24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	00100002 	.word	0x00100002
 8002d24:	ffff0000 	.word	0xffff0000

08002d28 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b088      	sub	sp, #32
 8002d2c:	af02      	add	r7, sp, #8
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	607a      	str	r2, [r7, #4]
 8002d32:	603b      	str	r3, [r7, #0]
 8002d34:	460b      	mov	r3, r1
 8002d36:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	2b08      	cmp	r3, #8
 8002d42:	d006      	beq.n	8002d52 <I2C_MasterRequestWrite+0x2a>
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d003      	beq.n	8002d52 <I2C_MasterRequestWrite+0x2a>
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d50:	d108      	bne.n	8002d64 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d60:	601a      	str	r2, [r3, #0]
 8002d62:	e00b      	b.n	8002d7c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d68:	2b12      	cmp	r3, #18
 8002d6a:	d107      	bne.n	8002d7c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d7a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	9300      	str	r3, [sp, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f000 f9b3 	bl	80030f4 <I2C_WaitOnFlagUntilTimeout>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00d      	beq.n	8002db0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002da2:	d103      	bne.n	8002dac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002daa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e035      	b.n	8002e1c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002db8:	d108      	bne.n	8002dcc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002dba:	897b      	ldrh	r3, [r7, #10]
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002dc8:	611a      	str	r2, [r3, #16]
 8002dca:	e01b      	b.n	8002e04 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002dcc:	897b      	ldrh	r3, [r7, #10]
 8002dce:	11db      	asrs	r3, r3, #7
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	f003 0306 	and.w	r3, r3, #6
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	f063 030f 	orn	r3, r3, #15
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	490e      	ldr	r1, [pc, #56]	; (8002e24 <I2C_MasterRequestWrite+0xfc>)
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f000 f9fc 	bl	80031e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e010      	b.n	8002e1c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002dfa:	897b      	ldrh	r3, [r7, #10]
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	4907      	ldr	r1, [pc, #28]	; (8002e28 <I2C_MasterRequestWrite+0x100>)
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 f9ec 	bl	80031e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e000      	b.n	8002e1c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3718      	adds	r7, #24
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	00010008 	.word	0x00010008
 8002e28:	00010002 	.word	0x00010002

08002e2c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b088      	sub	sp, #32
 8002e30:	af02      	add	r7, sp, #8
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	607a      	str	r2, [r7, #4]
 8002e36:	603b      	str	r3, [r7, #0]
 8002e38:	460b      	mov	r3, r1
 8002e3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e40:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e50:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	d006      	beq.n	8002e66 <I2C_MasterRequestRead+0x3a>
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d003      	beq.n	8002e66 <I2C_MasterRequestRead+0x3a>
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e64:	d108      	bne.n	8002e78 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	e00b      	b.n	8002e90 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7c:	2b11      	cmp	r3, #17
 8002e7e:	d107      	bne.n	8002e90 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e8e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	9300      	str	r3, [sp, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e9c:	68f8      	ldr	r0, [r7, #12]
 8002e9e:	f000 f929 	bl	80030f4 <I2C_WaitOnFlagUntilTimeout>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00d      	beq.n	8002ec4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eb6:	d103      	bne.n	8002ec0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ebe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e079      	b.n	8002fb8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ecc:	d108      	bne.n	8002ee0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002ece:	897b      	ldrh	r3, [r7, #10]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	f043 0301 	orr.w	r3, r3, #1
 8002ed6:	b2da      	uxtb	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	611a      	str	r2, [r3, #16]
 8002ede:	e05f      	b.n	8002fa0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ee0:	897b      	ldrh	r3, [r7, #10]
 8002ee2:	11db      	asrs	r3, r3, #7
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	f003 0306 	and.w	r3, r3, #6
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	f063 030f 	orn	r3, r3, #15
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	4930      	ldr	r1, [pc, #192]	; (8002fc0 <I2C_MasterRequestRead+0x194>)
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f000 f972 	bl	80031e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e054      	b.n	8002fb8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f0e:	897b      	ldrh	r3, [r7, #10]
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	4929      	ldr	r1, [pc, #164]	; (8002fc4 <I2C_MasterRequestRead+0x198>)
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f000 f962 	bl	80031e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e044      	b.n	8002fb8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f2e:	2300      	movs	r3, #0
 8002f30:	613b      	str	r3, [r7, #16]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	613b      	str	r3, [r7, #16]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	613b      	str	r3, [r7, #16]
 8002f42:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f52:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 f8c7 	bl	80030f4 <I2C_WaitOnFlagUntilTimeout>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00d      	beq.n	8002f88 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f7a:	d103      	bne.n	8002f84 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f82:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e017      	b.n	8002fb8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002f88:	897b      	ldrh	r3, [r7, #10]
 8002f8a:	11db      	asrs	r3, r3, #7
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	f003 0306 	and.w	r3, r3, #6
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	f063 030e 	orn	r3, r3, #14
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	4907      	ldr	r1, [pc, #28]	; (8002fc4 <I2C_MasterRequestRead+0x198>)
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f000 f91e 	bl	80031e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e000      	b.n	8002fb8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3718      	adds	r7, #24
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	00010008 	.word	0x00010008
 8002fc4:	00010002 	.word	0x00010002

08002fc8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b088      	sub	sp, #32
 8002fcc:	af02      	add	r7, sp, #8
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	4608      	mov	r0, r1
 8002fd2:	4611      	mov	r1, r2
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	817b      	strh	r3, [r7, #10]
 8002fda:	460b      	mov	r3, r1
 8002fdc:	813b      	strh	r3, [r7, #8]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ff0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	6a3b      	ldr	r3, [r7, #32]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f000 f878 	bl	80030f4 <I2C_WaitOnFlagUntilTimeout>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00d      	beq.n	8003026 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003014:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003018:	d103      	bne.n	8003022 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003020:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e05f      	b.n	80030e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003026:	897b      	ldrh	r3, [r7, #10]
 8003028:	b2db      	uxtb	r3, r3
 800302a:	461a      	mov	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003034:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	6a3a      	ldr	r2, [r7, #32]
 800303a:	492d      	ldr	r1, [pc, #180]	; (80030f0 <I2C_RequestMemoryWrite+0x128>)
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f000 f8d3 	bl	80031e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e04c      	b.n	80030e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800304c:	2300      	movs	r3, #0
 800304e:	617b      	str	r3, [r7, #20]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	617b      	str	r3, [r7, #20]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	617b      	str	r3, [r7, #20]
 8003060:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003064:	6a39      	ldr	r1, [r7, #32]
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f000 f95e 	bl	8003328 <I2C_WaitOnTXEFlagUntilTimeout>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00d      	beq.n	800308e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	2b04      	cmp	r3, #4
 8003078:	d107      	bne.n	800308a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003088:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e02b      	b.n	80030e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800308e:	88fb      	ldrh	r3, [r7, #6]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d105      	bne.n	80030a0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003094:	893b      	ldrh	r3, [r7, #8]
 8003096:	b2da      	uxtb	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	611a      	str	r2, [r3, #16]
 800309e:	e021      	b.n	80030e4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80030a0:	893b      	ldrh	r3, [r7, #8]
 80030a2:	0a1b      	lsrs	r3, r3, #8
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030b0:	6a39      	ldr	r1, [r7, #32]
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f000 f938 	bl	8003328 <I2C_WaitOnTXEFlagUntilTimeout>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00d      	beq.n	80030da <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d107      	bne.n	80030d6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e005      	b.n	80030e6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030da:	893b      	ldrh	r3, [r7, #8]
 80030dc:	b2da      	uxtb	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3718      	adds	r7, #24
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	00010002 	.word	0x00010002

080030f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	603b      	str	r3, [r7, #0]
 8003100:	4613      	mov	r3, r2
 8003102:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003104:	e048      	b.n	8003198 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310c:	d044      	beq.n	8003198 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800310e:	f7fe fdb5 	bl	8001c7c <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	429a      	cmp	r2, r3
 800311c:	d302      	bcc.n	8003124 <I2C_WaitOnFlagUntilTimeout+0x30>
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d139      	bne.n	8003198 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	0c1b      	lsrs	r3, r3, #16
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b01      	cmp	r3, #1
 800312c:	d10d      	bne.n	800314a <I2C_WaitOnFlagUntilTimeout+0x56>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	43da      	mvns	r2, r3
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	4013      	ands	r3, r2
 800313a:	b29b      	uxth	r3, r3
 800313c:	2b00      	cmp	r3, #0
 800313e:	bf0c      	ite	eq
 8003140:	2301      	moveq	r3, #1
 8003142:	2300      	movne	r3, #0
 8003144:	b2db      	uxtb	r3, r3
 8003146:	461a      	mov	r2, r3
 8003148:	e00c      	b.n	8003164 <I2C_WaitOnFlagUntilTimeout+0x70>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	43da      	mvns	r2, r3
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	4013      	ands	r3, r2
 8003156:	b29b      	uxth	r3, r3
 8003158:	2b00      	cmp	r3, #0
 800315a:	bf0c      	ite	eq
 800315c:	2301      	moveq	r3, #1
 800315e:	2300      	movne	r3, #0
 8003160:	b2db      	uxtb	r3, r3
 8003162:	461a      	mov	r2, r3
 8003164:	79fb      	ldrb	r3, [r7, #7]
 8003166:	429a      	cmp	r2, r3
 8003168:	d116      	bne.n	8003198 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2220      	movs	r2, #32
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003184:	f043 0220 	orr.w	r2, r3, #32
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e023      	b.n	80031e0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	0c1b      	lsrs	r3, r3, #16
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d10d      	bne.n	80031be <I2C_WaitOnFlagUntilTimeout+0xca>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	43da      	mvns	r2, r3
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	4013      	ands	r3, r2
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	bf0c      	ite	eq
 80031b4:	2301      	moveq	r3, #1
 80031b6:	2300      	movne	r3, #0
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	461a      	mov	r2, r3
 80031bc:	e00c      	b.n	80031d8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	43da      	mvns	r2, r3
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	4013      	ands	r3, r2
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	bf0c      	ite	eq
 80031d0:	2301      	moveq	r3, #1
 80031d2:	2300      	movne	r3, #0
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	461a      	mov	r2, r3
 80031d8:	79fb      	ldrb	r3, [r7, #7]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d093      	beq.n	8003106 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3710      	adds	r7, #16
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
 80031f4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031f6:	e071      	b.n	80032dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003206:	d123      	bne.n	8003250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003216:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003220:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2220      	movs	r2, #32
 800322c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323c:	f043 0204 	orr.w	r2, r3, #4
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e067      	b.n	8003320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003256:	d041      	beq.n	80032dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003258:	f7fe fd10 	bl	8001c7c <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	429a      	cmp	r2, r3
 8003266:	d302      	bcc.n	800326e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d136      	bne.n	80032dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	0c1b      	lsrs	r3, r3, #16
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b01      	cmp	r3, #1
 8003276:	d10c      	bne.n	8003292 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	43da      	mvns	r2, r3
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	4013      	ands	r3, r2
 8003284:	b29b      	uxth	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	bf14      	ite	ne
 800328a:	2301      	movne	r3, #1
 800328c:	2300      	moveq	r3, #0
 800328e:	b2db      	uxtb	r3, r3
 8003290:	e00b      	b.n	80032aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	43da      	mvns	r2, r3
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	4013      	ands	r3, r2
 800329e:	b29b      	uxth	r3, r3
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	bf14      	ite	ne
 80032a4:	2301      	movne	r3, #1
 80032a6:	2300      	moveq	r3, #0
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d016      	beq.n	80032dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2220      	movs	r2, #32
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c8:	f043 0220 	orr.w	r2, r3, #32
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e021      	b.n	8003320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	0c1b      	lsrs	r3, r3, #16
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d10c      	bne.n	8003300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	43da      	mvns	r2, r3
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	4013      	ands	r3, r2
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	bf14      	ite	ne
 80032f8:	2301      	movne	r3, #1
 80032fa:	2300      	moveq	r3, #0
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	e00b      	b.n	8003318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	43da      	mvns	r2, r3
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	4013      	ands	r3, r2
 800330c:	b29b      	uxth	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	bf14      	ite	ne
 8003312:	2301      	movne	r3, #1
 8003314:	2300      	moveq	r3, #0
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	f47f af6d 	bne.w	80031f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003334:	e034      	b.n	80033a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f000 f8e3 	bl	8003502 <I2C_IsAcknowledgeFailed>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e034      	b.n	80033b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800334c:	d028      	beq.n	80033a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800334e:	f7fe fc95 	bl	8001c7c <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	68ba      	ldr	r2, [r7, #8]
 800335a:	429a      	cmp	r2, r3
 800335c:	d302      	bcc.n	8003364 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d11d      	bne.n	80033a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800336e:	2b80      	cmp	r3, #128	; 0x80
 8003370:	d016      	beq.n	80033a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2220      	movs	r2, #32
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338c:	f043 0220 	orr.w	r2, r3, #32
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e007      	b.n	80033b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033aa:	2b80      	cmp	r3, #128	; 0x80
 80033ac:	d1c3      	bne.n	8003336 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033c4:	e034      	b.n	8003430 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 f89b 	bl	8003502 <I2C_IsAcknowledgeFailed>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e034      	b.n	8003440 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033dc:	d028      	beq.n	8003430 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033de:	f7fe fc4d 	bl	8001c7c <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d302      	bcc.n	80033f4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d11d      	bne.n	8003430 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	f003 0304 	and.w	r3, r3, #4
 80033fe:	2b04      	cmp	r3, #4
 8003400:	d016      	beq.n	8003430 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2220      	movs	r2, #32
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341c:	f043 0220 	orr.w	r2, r3, #32
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e007      	b.n	8003440 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	f003 0304 	and.w	r3, r3, #4
 800343a:	2b04      	cmp	r3, #4
 800343c:	d1c3      	bne.n	80033c6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003454:	e049      	b.n	80034ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	f003 0310 	and.w	r3, r3, #16
 8003460:	2b10      	cmp	r3, #16
 8003462:	d119      	bne.n	8003498 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f06f 0210 	mvn.w	r2, #16
 800346c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2220      	movs	r2, #32
 8003478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e030      	b.n	80034fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003498:	f7fe fbf0 	bl	8001c7c <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d302      	bcc.n	80034ae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d11d      	bne.n	80034ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	695b      	ldr	r3, [r3, #20]
 80034b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b8:	2b40      	cmp	r3, #64	; 0x40
 80034ba:	d016      	beq.n	80034ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2220      	movs	r2, #32
 80034c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	f043 0220 	orr.w	r2, r3, #32
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e007      	b.n	80034fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f4:	2b40      	cmp	r3, #64	; 0x40
 80034f6:	d1ae      	bne.n	8003456 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003502:	b480      	push	{r7}
 8003504:	b083      	sub	sp, #12
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003514:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003518:	d11b      	bne.n	8003552 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003522:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2220      	movs	r2, #32
 800352e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	f043 0204 	orr.w	r2, r3, #4
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e000      	b.n	8003554 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	bc80      	pop	{r7}
 800355c:	4770      	bx	lr
	...

08003560 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e272      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b00      	cmp	r3, #0
 800357c:	f000 8087 	beq.w	800368e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003580:	4b92      	ldr	r3, [pc, #584]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f003 030c 	and.w	r3, r3, #12
 8003588:	2b04      	cmp	r3, #4
 800358a:	d00c      	beq.n	80035a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800358c:	4b8f      	ldr	r3, [pc, #572]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f003 030c 	and.w	r3, r3, #12
 8003594:	2b08      	cmp	r3, #8
 8003596:	d112      	bne.n	80035be <HAL_RCC_OscConfig+0x5e>
 8003598:	4b8c      	ldr	r3, [pc, #560]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035a4:	d10b      	bne.n	80035be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a6:	4b89      	ldr	r3, [pc, #548]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d06c      	beq.n	800368c <HAL_RCC_OscConfig+0x12c>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d168      	bne.n	800368c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e24c      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035c6:	d106      	bne.n	80035d6 <HAL_RCC_OscConfig+0x76>
 80035c8:	4b80      	ldr	r3, [pc, #512]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a7f      	ldr	r2, [pc, #508]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 80035ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d2:	6013      	str	r3, [r2, #0]
 80035d4:	e02e      	b.n	8003634 <HAL_RCC_OscConfig+0xd4>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10c      	bne.n	80035f8 <HAL_RCC_OscConfig+0x98>
 80035de:	4b7b      	ldr	r3, [pc, #492]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a7a      	ldr	r2, [pc, #488]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 80035e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	4b78      	ldr	r3, [pc, #480]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a77      	ldr	r2, [pc, #476]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 80035f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035f4:	6013      	str	r3, [r2, #0]
 80035f6:	e01d      	b.n	8003634 <HAL_RCC_OscConfig+0xd4>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003600:	d10c      	bne.n	800361c <HAL_RCC_OscConfig+0xbc>
 8003602:	4b72      	ldr	r3, [pc, #456]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a71      	ldr	r2, [pc, #452]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 8003608:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800360c:	6013      	str	r3, [r2, #0]
 800360e:	4b6f      	ldr	r3, [pc, #444]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a6e      	ldr	r2, [pc, #440]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 8003614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	e00b      	b.n	8003634 <HAL_RCC_OscConfig+0xd4>
 800361c:	4b6b      	ldr	r3, [pc, #428]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a6a      	ldr	r2, [pc, #424]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 8003622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003626:	6013      	str	r3, [r2, #0]
 8003628:	4b68      	ldr	r3, [pc, #416]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a67      	ldr	r2, [pc, #412]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 800362e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003632:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d013      	beq.n	8003664 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800363c:	f7fe fb1e 	bl	8001c7c <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003644:	f7fe fb1a 	bl	8001c7c <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b64      	cmp	r3, #100	; 0x64
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e200      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003656:	4b5d      	ldr	r3, [pc, #372]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0f0      	beq.n	8003644 <HAL_RCC_OscConfig+0xe4>
 8003662:	e014      	b.n	800368e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003664:	f7fe fb0a 	bl	8001c7c <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800366c:	f7fe fb06 	bl	8001c7c <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b64      	cmp	r3, #100	; 0x64
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e1ec      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800367e:	4b53      	ldr	r3, [pc, #332]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1f0      	bne.n	800366c <HAL_RCC_OscConfig+0x10c>
 800368a:	e000      	b.n	800368e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800368c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d063      	beq.n	8003762 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800369a:	4b4c      	ldr	r3, [pc, #304]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f003 030c 	and.w	r3, r3, #12
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00b      	beq.n	80036be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80036a6:	4b49      	ldr	r3, [pc, #292]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f003 030c 	and.w	r3, r3, #12
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d11c      	bne.n	80036ec <HAL_RCC_OscConfig+0x18c>
 80036b2:	4b46      	ldr	r3, [pc, #280]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d116      	bne.n	80036ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036be:	4b43      	ldr	r3, [pc, #268]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d005      	beq.n	80036d6 <HAL_RCC_OscConfig+0x176>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d001      	beq.n	80036d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e1c0      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d6:	4b3d      	ldr	r3, [pc, #244]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	4939      	ldr	r1, [pc, #228]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ea:	e03a      	b.n	8003762 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d020      	beq.n	8003736 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036f4:	4b36      	ldr	r3, [pc, #216]	; (80037d0 <HAL_RCC_OscConfig+0x270>)
 80036f6:	2201      	movs	r2, #1
 80036f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fa:	f7fe fabf 	bl	8001c7c <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003700:	e008      	b.n	8003714 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003702:	f7fe fabb 	bl	8001c7c <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e1a1      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003714:	4b2d      	ldr	r3, [pc, #180]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d0f0      	beq.n	8003702 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003720:	4b2a      	ldr	r3, [pc, #168]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	4927      	ldr	r1, [pc, #156]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 8003730:	4313      	orrs	r3, r2
 8003732:	600b      	str	r3, [r1, #0]
 8003734:	e015      	b.n	8003762 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003736:	4b26      	ldr	r3, [pc, #152]	; (80037d0 <HAL_RCC_OscConfig+0x270>)
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800373c:	f7fe fa9e 	bl	8001c7c <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003744:	f7fe fa9a 	bl	8001c7c <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e180      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003756:	4b1d      	ldr	r3, [pc, #116]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1f0      	bne.n	8003744 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0308 	and.w	r3, r3, #8
 800376a:	2b00      	cmp	r3, #0
 800376c:	d03a      	beq.n	80037e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d019      	beq.n	80037aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003776:	4b17      	ldr	r3, [pc, #92]	; (80037d4 <HAL_RCC_OscConfig+0x274>)
 8003778:	2201      	movs	r2, #1
 800377a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800377c:	f7fe fa7e 	bl	8001c7c <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003784:	f7fe fa7a 	bl	8001c7c <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e160      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003796:	4b0d      	ldr	r3, [pc, #52]	; (80037cc <HAL_RCC_OscConfig+0x26c>)
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0f0      	beq.n	8003784 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80037a2:	2001      	movs	r0, #1
 80037a4:	f000 face 	bl	8003d44 <RCC_Delay>
 80037a8:	e01c      	b.n	80037e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037aa:	4b0a      	ldr	r3, [pc, #40]	; (80037d4 <HAL_RCC_OscConfig+0x274>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037b0:	f7fe fa64 	bl	8001c7c <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037b6:	e00f      	b.n	80037d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037b8:	f7fe fa60 	bl	8001c7c <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d908      	bls.n	80037d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e146      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
 80037ca:	bf00      	nop
 80037cc:	40021000 	.word	0x40021000
 80037d0:	42420000 	.word	0x42420000
 80037d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037d8:	4b92      	ldr	r3, [pc, #584]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80037da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1e9      	bne.n	80037b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0304 	and.w	r3, r3, #4
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 80a6 	beq.w	800393e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037f2:	2300      	movs	r3, #0
 80037f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037f6:	4b8b      	ldr	r3, [pc, #556]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80037f8:	69db      	ldr	r3, [r3, #28]
 80037fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10d      	bne.n	800381e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003802:	4b88      	ldr	r3, [pc, #544]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 8003804:	69db      	ldr	r3, [r3, #28]
 8003806:	4a87      	ldr	r2, [pc, #540]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 8003808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800380c:	61d3      	str	r3, [r2, #28]
 800380e:	4b85      	ldr	r3, [pc, #532]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003816:	60bb      	str	r3, [r7, #8]
 8003818:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800381a:	2301      	movs	r3, #1
 800381c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800381e:	4b82      	ldr	r3, [pc, #520]	; (8003a28 <HAL_RCC_OscConfig+0x4c8>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003826:	2b00      	cmp	r3, #0
 8003828:	d118      	bne.n	800385c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800382a:	4b7f      	ldr	r3, [pc, #508]	; (8003a28 <HAL_RCC_OscConfig+0x4c8>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a7e      	ldr	r2, [pc, #504]	; (8003a28 <HAL_RCC_OscConfig+0x4c8>)
 8003830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003834:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003836:	f7fe fa21 	bl	8001c7c <HAL_GetTick>
 800383a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800383c:	e008      	b.n	8003850 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800383e:	f7fe fa1d 	bl	8001c7c <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b64      	cmp	r3, #100	; 0x64
 800384a:	d901      	bls.n	8003850 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e103      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003850:	4b75      	ldr	r3, [pc, #468]	; (8003a28 <HAL_RCC_OscConfig+0x4c8>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003858:	2b00      	cmp	r3, #0
 800385a:	d0f0      	beq.n	800383e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d106      	bne.n	8003872 <HAL_RCC_OscConfig+0x312>
 8003864:	4b6f      	ldr	r3, [pc, #444]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	4a6e      	ldr	r2, [pc, #440]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 800386a:	f043 0301 	orr.w	r3, r3, #1
 800386e:	6213      	str	r3, [r2, #32]
 8003870:	e02d      	b.n	80038ce <HAL_RCC_OscConfig+0x36e>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10c      	bne.n	8003894 <HAL_RCC_OscConfig+0x334>
 800387a:	4b6a      	ldr	r3, [pc, #424]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	4a69      	ldr	r2, [pc, #420]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 8003880:	f023 0301 	bic.w	r3, r3, #1
 8003884:	6213      	str	r3, [r2, #32]
 8003886:	4b67      	ldr	r3, [pc, #412]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	4a66      	ldr	r2, [pc, #408]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 800388c:	f023 0304 	bic.w	r3, r3, #4
 8003890:	6213      	str	r3, [r2, #32]
 8003892:	e01c      	b.n	80038ce <HAL_RCC_OscConfig+0x36e>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	2b05      	cmp	r3, #5
 800389a:	d10c      	bne.n	80038b6 <HAL_RCC_OscConfig+0x356>
 800389c:	4b61      	ldr	r3, [pc, #388]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	4a60      	ldr	r2, [pc, #384]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80038a2:	f043 0304 	orr.w	r3, r3, #4
 80038a6:	6213      	str	r3, [r2, #32]
 80038a8:	4b5e      	ldr	r3, [pc, #376]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	4a5d      	ldr	r2, [pc, #372]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80038ae:	f043 0301 	orr.w	r3, r3, #1
 80038b2:	6213      	str	r3, [r2, #32]
 80038b4:	e00b      	b.n	80038ce <HAL_RCC_OscConfig+0x36e>
 80038b6:	4b5b      	ldr	r3, [pc, #364]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	4a5a      	ldr	r2, [pc, #360]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80038bc:	f023 0301 	bic.w	r3, r3, #1
 80038c0:	6213      	str	r3, [r2, #32]
 80038c2:	4b58      	ldr	r3, [pc, #352]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	4a57      	ldr	r2, [pc, #348]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80038c8:	f023 0304 	bic.w	r3, r3, #4
 80038cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d015      	beq.n	8003902 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038d6:	f7fe f9d1 	bl	8001c7c <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038dc:	e00a      	b.n	80038f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038de:	f7fe f9cd 	bl	8001c7c <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e0b1      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038f4:	4b4b      	ldr	r3, [pc, #300]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d0ee      	beq.n	80038de <HAL_RCC_OscConfig+0x37e>
 8003900:	e014      	b.n	800392c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003902:	f7fe f9bb 	bl	8001c7c <HAL_GetTick>
 8003906:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003908:	e00a      	b.n	8003920 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800390a:	f7fe f9b7 	bl	8001c7c <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	f241 3288 	movw	r2, #5000	; 0x1388
 8003918:	4293      	cmp	r3, r2
 800391a:	d901      	bls.n	8003920 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e09b      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003920:	4b40      	ldr	r3, [pc, #256]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1ee      	bne.n	800390a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800392c:	7dfb      	ldrb	r3, [r7, #23]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d105      	bne.n	800393e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003932:	4b3c      	ldr	r3, [pc, #240]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	4a3b      	ldr	r2, [pc, #236]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 8003938:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800393c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	2b00      	cmp	r3, #0
 8003944:	f000 8087 	beq.w	8003a56 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003948:	4b36      	ldr	r3, [pc, #216]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f003 030c 	and.w	r3, r3, #12
 8003950:	2b08      	cmp	r3, #8
 8003952:	d061      	beq.n	8003a18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	69db      	ldr	r3, [r3, #28]
 8003958:	2b02      	cmp	r3, #2
 800395a:	d146      	bne.n	80039ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800395c:	4b33      	ldr	r3, [pc, #204]	; (8003a2c <HAL_RCC_OscConfig+0x4cc>)
 800395e:	2200      	movs	r2, #0
 8003960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003962:	f7fe f98b 	bl	8001c7c <HAL_GetTick>
 8003966:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003968:	e008      	b.n	800397c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800396a:	f7fe f987 	bl	8001c7c <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d901      	bls.n	800397c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e06d      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800397c:	4b29      	ldr	r3, [pc, #164]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1f0      	bne.n	800396a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003990:	d108      	bne.n	80039a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003992:	4b24      	ldr	r3, [pc, #144]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	4921      	ldr	r1, [pc, #132]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039a4:	4b1f      	ldr	r3, [pc, #124]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a19      	ldr	r1, [r3, #32]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	430b      	orrs	r3, r1
 80039b6:	491b      	ldr	r1, [pc, #108]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039bc:	4b1b      	ldr	r3, [pc, #108]	; (8003a2c <HAL_RCC_OscConfig+0x4cc>)
 80039be:	2201      	movs	r2, #1
 80039c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c2:	f7fe f95b 	bl	8001c7c <HAL_GetTick>
 80039c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039c8:	e008      	b.n	80039dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ca:	f7fe f957 	bl	8001c7c <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e03d      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039dc:	4b11      	ldr	r3, [pc, #68]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d0f0      	beq.n	80039ca <HAL_RCC_OscConfig+0x46a>
 80039e8:	e035      	b.n	8003a56 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ea:	4b10      	ldr	r3, [pc, #64]	; (8003a2c <HAL_RCC_OscConfig+0x4cc>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f0:	f7fe f944 	bl	8001c7c <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f8:	f7fe f940 	bl	8001c7c <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e026      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a0a:	4b06      	ldr	r3, [pc, #24]	; (8003a24 <HAL_RCC_OscConfig+0x4c4>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1f0      	bne.n	80039f8 <HAL_RCC_OscConfig+0x498>
 8003a16:	e01e      	b.n	8003a56 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d107      	bne.n	8003a30 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e019      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
 8003a24:	40021000 	.word	0x40021000
 8003a28:	40007000 	.word	0x40007000
 8003a2c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a30:	4b0b      	ldr	r3, [pc, #44]	; (8003a60 <HAL_RCC_OscConfig+0x500>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d106      	bne.n	8003a52 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d001      	beq.n	8003a56 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e000      	b.n	8003a58 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3718      	adds	r7, #24
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40021000 	.word	0x40021000

08003a64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d101      	bne.n	8003a78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e0d0      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a78:	4b6a      	ldr	r3, [pc, #424]	; (8003c24 <HAL_RCC_ClockConfig+0x1c0>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0307 	and.w	r3, r3, #7
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d910      	bls.n	8003aa8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a86:	4b67      	ldr	r3, [pc, #412]	; (8003c24 <HAL_RCC_ClockConfig+0x1c0>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f023 0207 	bic.w	r2, r3, #7
 8003a8e:	4965      	ldr	r1, [pc, #404]	; (8003c24 <HAL_RCC_ClockConfig+0x1c0>)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a96:	4b63      	ldr	r3, [pc, #396]	; (8003c24 <HAL_RCC_ClockConfig+0x1c0>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0307 	and.w	r3, r3, #7
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d001      	beq.n	8003aa8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e0b8      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d020      	beq.n	8003af6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d005      	beq.n	8003acc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ac0:	4b59      	ldr	r3, [pc, #356]	; (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	4a58      	ldr	r2, [pc, #352]	; (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003aca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0308 	and.w	r3, r3, #8
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d005      	beq.n	8003ae4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ad8:	4b53      	ldr	r3, [pc, #332]	; (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	4a52      	ldr	r2, [pc, #328]	; (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003ade:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003ae2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ae4:	4b50      	ldr	r3, [pc, #320]	; (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	494d      	ldr	r1, [pc, #308]	; (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d040      	beq.n	8003b84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d107      	bne.n	8003b1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b0a:	4b47      	ldr	r3, [pc, #284]	; (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d115      	bne.n	8003b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e07f      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d107      	bne.n	8003b32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b22:	4b41      	ldr	r3, [pc, #260]	; (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d109      	bne.n	8003b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e073      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b32:	4b3d      	ldr	r3, [pc, #244]	; (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e06b      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b42:	4b39      	ldr	r3, [pc, #228]	; (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f023 0203 	bic.w	r2, r3, #3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	4936      	ldr	r1, [pc, #216]	; (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b54:	f7fe f892 	bl	8001c7c <HAL_GetTick>
 8003b58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b5a:	e00a      	b.n	8003b72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b5c:	f7fe f88e 	bl	8001c7c <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e053      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b72:	4b2d      	ldr	r3, [pc, #180]	; (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f003 020c 	and.w	r2, r3, #12
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d1eb      	bne.n	8003b5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b84:	4b27      	ldr	r3, [pc, #156]	; (8003c24 <HAL_RCC_ClockConfig+0x1c0>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0307 	and.w	r3, r3, #7
 8003b8c:	683a      	ldr	r2, [r7, #0]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d210      	bcs.n	8003bb4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b92:	4b24      	ldr	r3, [pc, #144]	; (8003c24 <HAL_RCC_ClockConfig+0x1c0>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f023 0207 	bic.w	r2, r3, #7
 8003b9a:	4922      	ldr	r1, [pc, #136]	; (8003c24 <HAL_RCC_ClockConfig+0x1c0>)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ba2:	4b20      	ldr	r3, [pc, #128]	; (8003c24 <HAL_RCC_ClockConfig+0x1c0>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0307 	and.w	r3, r3, #7
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d001      	beq.n	8003bb4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e032      	b.n	8003c1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0304 	and.w	r3, r3, #4
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d008      	beq.n	8003bd2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bc0:	4b19      	ldr	r3, [pc, #100]	; (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	4916      	ldr	r1, [pc, #88]	; (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0308 	and.w	r3, r3, #8
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d009      	beq.n	8003bf2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003bde:	4b12      	ldr	r3, [pc, #72]	; (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	490e      	ldr	r1, [pc, #56]	; (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bf2:	f000 f821 	bl	8003c38 <HAL_RCC_GetSysClockFreq>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	4b0b      	ldr	r3, [pc, #44]	; (8003c28 <HAL_RCC_ClockConfig+0x1c4>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	091b      	lsrs	r3, r3, #4
 8003bfe:	f003 030f 	and.w	r3, r3, #15
 8003c02:	490a      	ldr	r1, [pc, #40]	; (8003c2c <HAL_RCC_ClockConfig+0x1c8>)
 8003c04:	5ccb      	ldrb	r3, [r1, r3]
 8003c06:	fa22 f303 	lsr.w	r3, r2, r3
 8003c0a:	4a09      	ldr	r2, [pc, #36]	; (8003c30 <HAL_RCC_ClockConfig+0x1cc>)
 8003c0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c0e:	4b09      	ldr	r3, [pc, #36]	; (8003c34 <HAL_RCC_ClockConfig+0x1d0>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7fd fff0 	bl	8001bf8 <HAL_InitTick>

  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	40022000 	.word	0x40022000
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	080072e4 	.word	0x080072e4
 8003c30:	20000028 	.word	0x20000028
 8003c34:	2000002c 	.word	0x2000002c

08003c38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b087      	sub	sp, #28
 8003c3c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60fb      	str	r3, [r7, #12]
 8003c42:	2300      	movs	r3, #0
 8003c44:	60bb      	str	r3, [r7, #8]
 8003c46:	2300      	movs	r3, #0
 8003c48:	617b      	str	r3, [r7, #20]
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c52:	4b1e      	ldr	r3, [pc, #120]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x94>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f003 030c 	and.w	r3, r3, #12
 8003c5e:	2b04      	cmp	r3, #4
 8003c60:	d002      	beq.n	8003c68 <HAL_RCC_GetSysClockFreq+0x30>
 8003c62:	2b08      	cmp	r3, #8
 8003c64:	d003      	beq.n	8003c6e <HAL_RCC_GetSysClockFreq+0x36>
 8003c66:	e027      	b.n	8003cb8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c68:	4b19      	ldr	r3, [pc, #100]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c6a:	613b      	str	r3, [r7, #16]
      break;
 8003c6c:	e027      	b.n	8003cbe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	0c9b      	lsrs	r3, r3, #18
 8003c72:	f003 030f 	and.w	r3, r3, #15
 8003c76:	4a17      	ldr	r2, [pc, #92]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003c78:	5cd3      	ldrb	r3, [r2, r3]
 8003c7a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d010      	beq.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c86:	4b11      	ldr	r3, [pc, #68]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x94>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	0c5b      	lsrs	r3, r3, #17
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	4a11      	ldr	r2, [pc, #68]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003c92:	5cd3      	ldrb	r3, [r2, r3]
 8003c94:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a0d      	ldr	r2, [pc, #52]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c9a:	fb03 f202 	mul.w	r2, r3, r2
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca4:	617b      	str	r3, [r7, #20]
 8003ca6:	e004      	b.n	8003cb2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a0c      	ldr	r2, [pc, #48]	; (8003cdc <HAL_RCC_GetSysClockFreq+0xa4>)
 8003cac:	fb02 f303 	mul.w	r3, r2, r3
 8003cb0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	613b      	str	r3, [r7, #16]
      break;
 8003cb6:	e002      	b.n	8003cbe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003cb8:	4b05      	ldr	r3, [pc, #20]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003cba:	613b      	str	r3, [r7, #16]
      break;
 8003cbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cbe:	693b      	ldr	r3, [r7, #16]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	371c      	adds	r7, #28
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bc80      	pop	{r7}
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	007a1200 	.word	0x007a1200
 8003cd4:	080072fc 	.word	0x080072fc
 8003cd8:	0800730c 	.word	0x0800730c
 8003cdc:	003d0900 	.word	0x003d0900

08003ce0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ce4:	4b02      	ldr	r3, [pc, #8]	; (8003cf0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bc80      	pop	{r7}
 8003cee:	4770      	bx	lr
 8003cf0:	20000028 	.word	0x20000028

08003cf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cf8:	f7ff fff2 	bl	8003ce0 <HAL_RCC_GetHCLKFreq>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	4b05      	ldr	r3, [pc, #20]	; (8003d14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	0a1b      	lsrs	r3, r3, #8
 8003d04:	f003 0307 	and.w	r3, r3, #7
 8003d08:	4903      	ldr	r1, [pc, #12]	; (8003d18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d0a:	5ccb      	ldrb	r3, [r1, r3]
 8003d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	40021000 	.word	0x40021000
 8003d18:	080072f4 	.word	0x080072f4

08003d1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d20:	f7ff ffde 	bl	8003ce0 <HAL_RCC_GetHCLKFreq>
 8003d24:	4602      	mov	r2, r0
 8003d26:	4b05      	ldr	r3, [pc, #20]	; (8003d3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	0adb      	lsrs	r3, r3, #11
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	4903      	ldr	r1, [pc, #12]	; (8003d40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d32:	5ccb      	ldrb	r3, [r1, r3]
 8003d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	40021000 	.word	0x40021000
 8003d40:	080072f4 	.word	0x080072f4

08003d44 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003d4c:	4b0a      	ldr	r3, [pc, #40]	; (8003d78 <RCC_Delay+0x34>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a0a      	ldr	r2, [pc, #40]	; (8003d7c <RCC_Delay+0x38>)
 8003d52:	fba2 2303 	umull	r2, r3, r2, r3
 8003d56:	0a5b      	lsrs	r3, r3, #9
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	fb02 f303 	mul.w	r3, r2, r3
 8003d5e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d60:	bf00      	nop
  }
  while (Delay --);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	1e5a      	subs	r2, r3, #1
 8003d66:	60fa      	str	r2, [r7, #12]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1f9      	bne.n	8003d60 <RCC_Delay+0x1c>
}
 8003d6c:	bf00      	nop
 8003d6e:	bf00      	nop
 8003d70:	3714      	adds	r7, #20
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bc80      	pop	{r7}
 8003d76:	4770      	bx	lr
 8003d78:	20000028 	.word	0x20000028
 8003d7c:	10624dd3 	.word	0x10624dd3

08003d80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e076      	b.n	8003e80 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d108      	bne.n	8003dac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003da2:	d009      	beq.n	8003db8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	61da      	str	r2, [r3, #28]
 8003daa:	e005      	b.n	8003db8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d106      	bne.n	8003dd8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f7fd fd5c 	bl	8001890 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2202      	movs	r2, #2
 8003ddc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e00:	431a      	orrs	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	f003 0302 	and.w	r3, r3, #2
 8003e14:	431a      	orrs	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e32:	431a      	orrs	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e3c:	ea42 0103 	orr.w	r1, r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e44:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	0c1a      	lsrs	r2, r3, #16
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f002 0204 	and.w	r2, r2, #4
 8003e5e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	69da      	ldr	r2, [r3, #28]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e6e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b088      	sub	sp, #32
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	603b      	str	r3, [r7, #0]
 8003e94:	4613      	mov	r3, r2
 8003e96:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d101      	bne.n	8003eaa <HAL_SPI_Transmit+0x22>
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	e12d      	b.n	8004106 <HAL_SPI_Transmit+0x27e>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003eb2:	f7fd fee3 	bl	8001c7c <HAL_GetTick>
 8003eb6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003eb8:	88fb      	ldrh	r3, [r7, #6]
 8003eba:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d002      	beq.n	8003ece <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003ec8:	2302      	movs	r3, #2
 8003eca:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ecc:	e116      	b.n	80040fc <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d002      	beq.n	8003eda <HAL_SPI_Transmit+0x52>
 8003ed4:	88fb      	ldrh	r3, [r7, #6]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d102      	bne.n	8003ee0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ede:	e10d      	b.n	80040fc <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2203      	movs	r2, #3
 8003ee4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	88fa      	ldrh	r2, [r7, #6]
 8003ef8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	88fa      	ldrh	r2, [r7, #6]
 8003efe:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f26:	d10f      	bne.n	8003f48 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f36:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f46:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f52:	2b40      	cmp	r3, #64	; 0x40
 8003f54:	d007      	beq.n	8003f66 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f64:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f6e:	d14f      	bne.n	8004010 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d002      	beq.n	8003f7e <HAL_SPI_Transmit+0xf6>
 8003f78:	8afb      	ldrh	r3, [r7, #22]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d142      	bne.n	8004004 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f82:	881a      	ldrh	r2, [r3, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8e:	1c9a      	adds	r2, r3, #2
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003fa2:	e02f      	b.n	8004004 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d112      	bne.n	8003fd8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb6:	881a      	ldrh	r2, [r3, #0]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc2:	1c9a      	adds	r2, r3, #2
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	b29a      	uxth	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	86da      	strh	r2, [r3, #54]	; 0x36
 8003fd6:	e015      	b.n	8004004 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fd8:	f7fd fe50 	bl	8001c7c <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d803      	bhi.n	8003ff0 <HAL_SPI_Transmit+0x168>
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fee:	d102      	bne.n	8003ff6 <HAL_SPI_Transmit+0x16e>
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d106      	bne.n	8004004 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004002:	e07b      	b.n	80040fc <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004008:	b29b      	uxth	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1ca      	bne.n	8003fa4 <HAL_SPI_Transmit+0x11c>
 800400e:	e050      	b.n	80040b2 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d002      	beq.n	800401e <HAL_SPI_Transmit+0x196>
 8004018:	8afb      	ldrh	r3, [r7, #22]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d144      	bne.n	80040a8 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	330c      	adds	r3, #12
 8004028:	7812      	ldrb	r2, [r2, #0]
 800402a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004030:	1c5a      	adds	r2, r3, #1
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800403a:	b29b      	uxth	r3, r3
 800403c:	3b01      	subs	r3, #1
 800403e:	b29a      	uxth	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004044:	e030      	b.n	80040a8 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	2b02      	cmp	r3, #2
 8004052:	d113      	bne.n	800407c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	330c      	adds	r3, #12
 800405e:	7812      	ldrb	r2, [r2, #0]
 8004060:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004066:	1c5a      	adds	r2, r3, #1
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004070:	b29b      	uxth	r3, r3
 8004072:	3b01      	subs	r3, #1
 8004074:	b29a      	uxth	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	86da      	strh	r2, [r3, #54]	; 0x36
 800407a:	e015      	b.n	80040a8 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800407c:	f7fd fdfe 	bl	8001c7c <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	683a      	ldr	r2, [r7, #0]
 8004088:	429a      	cmp	r2, r3
 800408a:	d803      	bhi.n	8004094 <HAL_SPI_Transmit+0x20c>
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004092:	d102      	bne.n	800409a <HAL_SPI_Transmit+0x212>
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d106      	bne.n	80040a8 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80040a6:	e029      	b.n	80040fc <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1c9      	bne.n	8004046 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040b2:	69ba      	ldr	r2, [r7, #24]
 80040b4:	6839      	ldr	r1, [r7, #0]
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f000 f8b2 	bl	8004220 <SPI_EndRxTxTransaction>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d002      	beq.n	80040c8 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2220      	movs	r2, #32
 80040c6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d10a      	bne.n	80040e6 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040d0:	2300      	movs	r3, #0
 80040d2:	613b      	str	r3, [r7, #16]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	613b      	str	r3, [r7, #16]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	613b      	str	r3, [r7, #16]
 80040e4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d002      	beq.n	80040f4 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	77fb      	strb	r3, [r7, #31]
 80040f2:	e003      	b.n	80040fc <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004104:	7ffb      	ldrb	r3, [r7, #31]
}
 8004106:	4618      	mov	r0, r3
 8004108:	3720      	adds	r7, #32
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
	...

08004110 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b088      	sub	sp, #32
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	603b      	str	r3, [r7, #0]
 800411c:	4613      	mov	r3, r2
 800411e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004120:	f7fd fdac 	bl	8001c7c <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004128:	1a9b      	subs	r3, r3, r2
 800412a:	683a      	ldr	r2, [r7, #0]
 800412c:	4413      	add	r3, r2
 800412e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004130:	f7fd fda4 	bl	8001c7c <HAL_GetTick>
 8004134:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004136:	4b39      	ldr	r3, [pc, #228]	; (800421c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	015b      	lsls	r3, r3, #5
 800413c:	0d1b      	lsrs	r3, r3, #20
 800413e:	69fa      	ldr	r2, [r7, #28]
 8004140:	fb02 f303 	mul.w	r3, r2, r3
 8004144:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004146:	e054      	b.n	80041f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800414e:	d050      	beq.n	80041f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004150:	f7fd fd94 	bl	8001c7c <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	69fa      	ldr	r2, [r7, #28]
 800415c:	429a      	cmp	r2, r3
 800415e:	d902      	bls.n	8004166 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d13d      	bne.n	80041e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	685a      	ldr	r2, [r3, #4]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004174:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800417e:	d111      	bne.n	80041a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004188:	d004      	beq.n	8004194 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004192:	d107      	bne.n	80041a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041ac:	d10f      	bne.n	80041ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041bc:	601a      	str	r2, [r3, #0]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e017      	b.n	8004212 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80041e8:	2300      	movs	r3, #0
 80041ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	3b01      	subs	r3, #1
 80041f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	689a      	ldr	r2, [r3, #8]
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	4013      	ands	r3, r2
 80041fc:	68ba      	ldr	r2, [r7, #8]
 80041fe:	429a      	cmp	r2, r3
 8004200:	bf0c      	ite	eq
 8004202:	2301      	moveq	r3, #1
 8004204:	2300      	movne	r3, #0
 8004206:	b2db      	uxtb	r3, r3
 8004208:	461a      	mov	r2, r3
 800420a:	79fb      	ldrb	r3, [r7, #7]
 800420c:	429a      	cmp	r2, r3
 800420e:	d19b      	bne.n	8004148 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3720      	adds	r7, #32
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	20000028 	.word	0x20000028

08004220 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af02      	add	r7, sp, #8
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	2200      	movs	r2, #0
 8004234:	2180      	movs	r1, #128	; 0x80
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f7ff ff6a 	bl	8004110 <SPI_WaitFlagStateUntilTimeout>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d007      	beq.n	8004252 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004246:	f043 0220 	orr.w	r2, r3, #32
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e000      	b.n	8004254 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d101      	bne.n	800426e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e042      	b.n	80042f4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d106      	bne.n	8004288 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7fd fb42 	bl	800190c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2224      	movs	r2, #36	; 0x24
 800428c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68da      	ldr	r2, [r3, #12]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800429e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 f91d 	bl	80044e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	691a      	ldr	r2, [r3, #16]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	695a      	ldr	r2, [r3, #20]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68da      	ldr	r2, [r3, #12]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2220      	movs	r2, #32
 80042e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2220      	movs	r2, #32
 80042e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3708      	adds	r7, #8
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b08a      	sub	sp, #40	; 0x28
 8004300:	af02      	add	r7, sp, #8
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	603b      	str	r3, [r7, #0]
 8004308:	4613      	mov	r3, r2
 800430a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800430c:	2300      	movs	r3, #0
 800430e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b20      	cmp	r3, #32
 800431a:	d16d      	bne.n	80043f8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d002      	beq.n	8004328 <HAL_UART_Transmit+0x2c>
 8004322:	88fb      	ldrh	r3, [r7, #6]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d101      	bne.n	800432c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e066      	b.n	80043fa <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2221      	movs	r2, #33	; 0x21
 8004336:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800433a:	f7fd fc9f 	bl	8001c7c <HAL_GetTick>
 800433e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	88fa      	ldrh	r2, [r7, #6]
 8004344:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	88fa      	ldrh	r2, [r7, #6]
 800434a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004354:	d108      	bne.n	8004368 <HAL_UART_Transmit+0x6c>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d104      	bne.n	8004368 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800435e:	2300      	movs	r3, #0
 8004360:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	61bb      	str	r3, [r7, #24]
 8004366:	e003      	b.n	8004370 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800436c:	2300      	movs	r3, #0
 800436e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004370:	e02a      	b.n	80043c8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	2200      	movs	r2, #0
 800437a:	2180      	movs	r1, #128	; 0x80
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f000 f840 	bl	8004402 <UART_WaitOnFlagUntilTimeout>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d001      	beq.n	800438c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e036      	b.n	80043fa <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10b      	bne.n	80043aa <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	881b      	ldrh	r3, [r3, #0]
 8004396:	461a      	mov	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	3302      	adds	r3, #2
 80043a6:	61bb      	str	r3, [r7, #24]
 80043a8:	e007      	b.n	80043ba <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	781a      	ldrb	r2, [r3, #0]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	3301      	adds	r3, #1
 80043b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043be:	b29b      	uxth	r3, r3
 80043c0:	3b01      	subs	r3, #1
 80043c2:	b29a      	uxth	r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1cf      	bne.n	8004372 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	9300      	str	r3, [sp, #0]
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	2200      	movs	r2, #0
 80043da:	2140      	movs	r1, #64	; 0x40
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f000 f810 	bl	8004402 <UART_WaitOnFlagUntilTimeout>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d001      	beq.n	80043ec <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e006      	b.n	80043fa <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2220      	movs	r2, #32
 80043f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80043f4:	2300      	movs	r3, #0
 80043f6:	e000      	b.n	80043fa <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80043f8:	2302      	movs	r3, #2
  }
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3720      	adds	r7, #32
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b090      	sub	sp, #64	; 0x40
 8004406:	af00      	add	r7, sp, #0
 8004408:	60f8      	str	r0, [r7, #12]
 800440a:	60b9      	str	r1, [r7, #8]
 800440c:	603b      	str	r3, [r7, #0]
 800440e:	4613      	mov	r3, r2
 8004410:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004412:	e050      	b.n	80044b6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004414:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800441a:	d04c      	beq.n	80044b6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800441c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800441e:	2b00      	cmp	r3, #0
 8004420:	d007      	beq.n	8004432 <UART_WaitOnFlagUntilTimeout+0x30>
 8004422:	f7fd fc2b 	bl	8001c7c <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800442e:	429a      	cmp	r2, r3
 8004430:	d241      	bcs.n	80044b6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	330c      	adds	r3, #12
 8004438:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443c:	e853 3f00 	ldrex	r3, [r3]
 8004440:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004444:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004448:	63fb      	str	r3, [r7, #60]	; 0x3c
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	330c      	adds	r3, #12
 8004450:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004452:	637a      	str	r2, [r7, #52]	; 0x34
 8004454:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004456:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004458:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800445a:	e841 2300 	strex	r3, r2, [r1]
 800445e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1e5      	bne.n	8004432 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	3314      	adds	r3, #20
 800446c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	e853 3f00 	ldrex	r3, [r3]
 8004474:	613b      	str	r3, [r7, #16]
   return(result);
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	f023 0301 	bic.w	r3, r3, #1
 800447c:	63bb      	str	r3, [r7, #56]	; 0x38
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	3314      	adds	r3, #20
 8004484:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004486:	623a      	str	r2, [r7, #32]
 8004488:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448a:	69f9      	ldr	r1, [r7, #28]
 800448c:	6a3a      	ldr	r2, [r7, #32]
 800448e:	e841 2300 	strex	r3, r2, [r1]
 8004492:	61bb      	str	r3, [r7, #24]
   return(result);
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1e5      	bne.n	8004466 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2220      	movs	r2, #32
 800449e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2220      	movs	r2, #32
 80044a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e00f      	b.n	80044d6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	4013      	ands	r3, r2
 80044c0:	68ba      	ldr	r2, [r7, #8]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	bf0c      	ite	eq
 80044c6:	2301      	moveq	r3, #1
 80044c8:	2300      	movne	r3, #0
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	461a      	mov	r2, r3
 80044ce:	79fb      	ldrb	r3, [r7, #7]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d09f      	beq.n	8004414 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3740      	adds	r7, #64	; 0x40
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
	...

080044e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68da      	ldr	r2, [r3, #12]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	689a      	ldr	r2, [r3, #8]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	431a      	orrs	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	4313      	orrs	r3, r2
 800450e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800451a:	f023 030c 	bic.w	r3, r3, #12
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	6812      	ldr	r2, [r2, #0]
 8004522:	68b9      	ldr	r1, [r7, #8]
 8004524:	430b      	orrs	r3, r1
 8004526:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	699a      	ldr	r2, [r3, #24]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a2c      	ldr	r2, [pc, #176]	; (80045f4 <UART_SetConfig+0x114>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d103      	bne.n	8004550 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004548:	f7ff fbe8 	bl	8003d1c <HAL_RCC_GetPCLK2Freq>
 800454c:	60f8      	str	r0, [r7, #12]
 800454e:	e002      	b.n	8004556 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004550:	f7ff fbd0 	bl	8003cf4 <HAL_RCC_GetPCLK1Freq>
 8004554:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	4613      	mov	r3, r2
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	4413      	add	r3, r2
 800455e:	009a      	lsls	r2, r3, #2
 8004560:	441a      	add	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	fbb2 f3f3 	udiv	r3, r2, r3
 800456c:	4a22      	ldr	r2, [pc, #136]	; (80045f8 <UART_SetConfig+0x118>)
 800456e:	fba2 2303 	umull	r2, r3, r2, r3
 8004572:	095b      	lsrs	r3, r3, #5
 8004574:	0119      	lsls	r1, r3, #4
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	4613      	mov	r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	4413      	add	r3, r2
 800457e:	009a      	lsls	r2, r3, #2
 8004580:	441a      	add	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	fbb2 f2f3 	udiv	r2, r2, r3
 800458c:	4b1a      	ldr	r3, [pc, #104]	; (80045f8 <UART_SetConfig+0x118>)
 800458e:	fba3 0302 	umull	r0, r3, r3, r2
 8004592:	095b      	lsrs	r3, r3, #5
 8004594:	2064      	movs	r0, #100	; 0x64
 8004596:	fb00 f303 	mul.w	r3, r0, r3
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	011b      	lsls	r3, r3, #4
 800459e:	3332      	adds	r3, #50	; 0x32
 80045a0:	4a15      	ldr	r2, [pc, #84]	; (80045f8 <UART_SetConfig+0x118>)
 80045a2:	fba2 2303 	umull	r2, r3, r2, r3
 80045a6:	095b      	lsrs	r3, r3, #5
 80045a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045ac:	4419      	add	r1, r3
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	4613      	mov	r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	4413      	add	r3, r2
 80045b6:	009a      	lsls	r2, r3, #2
 80045b8:	441a      	add	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80045c4:	4b0c      	ldr	r3, [pc, #48]	; (80045f8 <UART_SetConfig+0x118>)
 80045c6:	fba3 0302 	umull	r0, r3, r3, r2
 80045ca:	095b      	lsrs	r3, r3, #5
 80045cc:	2064      	movs	r0, #100	; 0x64
 80045ce:	fb00 f303 	mul.w	r3, r0, r3
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	011b      	lsls	r3, r3, #4
 80045d6:	3332      	adds	r3, #50	; 0x32
 80045d8:	4a07      	ldr	r2, [pc, #28]	; (80045f8 <UART_SetConfig+0x118>)
 80045da:	fba2 2303 	umull	r2, r3, r2, r3
 80045de:	095b      	lsrs	r3, r3, #5
 80045e0:	f003 020f 	and.w	r2, r3, #15
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	440a      	add	r2, r1
 80045ea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80045ec:	bf00      	nop
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	40013800 	.word	0x40013800
 80045f8:	51eb851f 	.word	0x51eb851f

080045fc <__cvt>:
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004602:	461f      	mov	r7, r3
 8004604:	bfbb      	ittet	lt
 8004606:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800460a:	461f      	movlt	r7, r3
 800460c:	2300      	movge	r3, #0
 800460e:	232d      	movlt	r3, #45	; 0x2d
 8004610:	b088      	sub	sp, #32
 8004612:	4614      	mov	r4, r2
 8004614:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004616:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004618:	7013      	strb	r3, [r2, #0]
 800461a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800461c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004620:	f023 0820 	bic.w	r8, r3, #32
 8004624:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004628:	d005      	beq.n	8004636 <__cvt+0x3a>
 800462a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800462e:	d100      	bne.n	8004632 <__cvt+0x36>
 8004630:	3501      	adds	r5, #1
 8004632:	2302      	movs	r3, #2
 8004634:	e000      	b.n	8004638 <__cvt+0x3c>
 8004636:	2303      	movs	r3, #3
 8004638:	aa07      	add	r2, sp, #28
 800463a:	9204      	str	r2, [sp, #16]
 800463c:	aa06      	add	r2, sp, #24
 800463e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004642:	e9cd 3500 	strd	r3, r5, [sp]
 8004646:	4622      	mov	r2, r4
 8004648:	463b      	mov	r3, r7
 800464a:	f000 fe61 	bl	8005310 <_dtoa_r>
 800464e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004652:	4606      	mov	r6, r0
 8004654:	d102      	bne.n	800465c <__cvt+0x60>
 8004656:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004658:	07db      	lsls	r3, r3, #31
 800465a:	d522      	bpl.n	80046a2 <__cvt+0xa6>
 800465c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004660:	eb06 0905 	add.w	r9, r6, r5
 8004664:	d110      	bne.n	8004688 <__cvt+0x8c>
 8004666:	7833      	ldrb	r3, [r6, #0]
 8004668:	2b30      	cmp	r3, #48	; 0x30
 800466a:	d10a      	bne.n	8004682 <__cvt+0x86>
 800466c:	2200      	movs	r2, #0
 800466e:	2300      	movs	r3, #0
 8004670:	4620      	mov	r0, r4
 8004672:	4639      	mov	r1, r7
 8004674:	f7fc f998 	bl	80009a8 <__aeabi_dcmpeq>
 8004678:	b918      	cbnz	r0, 8004682 <__cvt+0x86>
 800467a:	f1c5 0501 	rsb	r5, r5, #1
 800467e:	f8ca 5000 	str.w	r5, [sl]
 8004682:	f8da 3000 	ldr.w	r3, [sl]
 8004686:	4499      	add	r9, r3
 8004688:	2200      	movs	r2, #0
 800468a:	2300      	movs	r3, #0
 800468c:	4620      	mov	r0, r4
 800468e:	4639      	mov	r1, r7
 8004690:	f7fc f98a 	bl	80009a8 <__aeabi_dcmpeq>
 8004694:	b108      	cbz	r0, 800469a <__cvt+0x9e>
 8004696:	f8cd 901c 	str.w	r9, [sp, #28]
 800469a:	2230      	movs	r2, #48	; 0x30
 800469c:	9b07      	ldr	r3, [sp, #28]
 800469e:	454b      	cmp	r3, r9
 80046a0:	d307      	bcc.n	80046b2 <__cvt+0xb6>
 80046a2:	4630      	mov	r0, r6
 80046a4:	9b07      	ldr	r3, [sp, #28]
 80046a6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80046a8:	1b9b      	subs	r3, r3, r6
 80046aa:	6013      	str	r3, [r2, #0]
 80046ac:	b008      	add	sp, #32
 80046ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046b2:	1c59      	adds	r1, r3, #1
 80046b4:	9107      	str	r1, [sp, #28]
 80046b6:	701a      	strb	r2, [r3, #0]
 80046b8:	e7f0      	b.n	800469c <__cvt+0xa0>

080046ba <__exponent>:
 80046ba:	4603      	mov	r3, r0
 80046bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046be:	2900      	cmp	r1, #0
 80046c0:	f803 2b02 	strb.w	r2, [r3], #2
 80046c4:	bfb6      	itet	lt
 80046c6:	222d      	movlt	r2, #45	; 0x2d
 80046c8:	222b      	movge	r2, #43	; 0x2b
 80046ca:	4249      	neglt	r1, r1
 80046cc:	2909      	cmp	r1, #9
 80046ce:	7042      	strb	r2, [r0, #1]
 80046d0:	dd2a      	ble.n	8004728 <__exponent+0x6e>
 80046d2:	f10d 0207 	add.w	r2, sp, #7
 80046d6:	4617      	mov	r7, r2
 80046d8:	260a      	movs	r6, #10
 80046da:	fb91 f5f6 	sdiv	r5, r1, r6
 80046de:	4694      	mov	ip, r2
 80046e0:	fb06 1415 	mls	r4, r6, r5, r1
 80046e4:	3430      	adds	r4, #48	; 0x30
 80046e6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80046ea:	460c      	mov	r4, r1
 80046ec:	2c63      	cmp	r4, #99	; 0x63
 80046ee:	4629      	mov	r1, r5
 80046f0:	f102 32ff 	add.w	r2, r2, #4294967295
 80046f4:	dcf1      	bgt.n	80046da <__exponent+0x20>
 80046f6:	3130      	adds	r1, #48	; 0x30
 80046f8:	f1ac 0402 	sub.w	r4, ip, #2
 80046fc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004700:	4622      	mov	r2, r4
 8004702:	1c41      	adds	r1, r0, #1
 8004704:	42ba      	cmp	r2, r7
 8004706:	d30a      	bcc.n	800471e <__exponent+0x64>
 8004708:	f10d 0209 	add.w	r2, sp, #9
 800470c:	eba2 020c 	sub.w	r2, r2, ip
 8004710:	42bc      	cmp	r4, r7
 8004712:	bf88      	it	hi
 8004714:	2200      	movhi	r2, #0
 8004716:	4413      	add	r3, r2
 8004718:	1a18      	subs	r0, r3, r0
 800471a:	b003      	add	sp, #12
 800471c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800471e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004722:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004726:	e7ed      	b.n	8004704 <__exponent+0x4a>
 8004728:	2330      	movs	r3, #48	; 0x30
 800472a:	3130      	adds	r1, #48	; 0x30
 800472c:	7083      	strb	r3, [r0, #2]
 800472e:	70c1      	strb	r1, [r0, #3]
 8004730:	1d03      	adds	r3, r0, #4
 8004732:	e7f1      	b.n	8004718 <__exponent+0x5e>

08004734 <_printf_float>:
 8004734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004738:	b091      	sub	sp, #68	; 0x44
 800473a:	460c      	mov	r4, r1
 800473c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004740:	4616      	mov	r6, r2
 8004742:	461f      	mov	r7, r3
 8004744:	4605      	mov	r5, r0
 8004746:	f000 fcd3 	bl	80050f0 <_localeconv_r>
 800474a:	6803      	ldr	r3, [r0, #0]
 800474c:	4618      	mov	r0, r3
 800474e:	9309      	str	r3, [sp, #36]	; 0x24
 8004750:	f7fb fcfe 	bl	8000150 <strlen>
 8004754:	2300      	movs	r3, #0
 8004756:	930e      	str	r3, [sp, #56]	; 0x38
 8004758:	f8d8 3000 	ldr.w	r3, [r8]
 800475c:	900a      	str	r0, [sp, #40]	; 0x28
 800475e:	3307      	adds	r3, #7
 8004760:	f023 0307 	bic.w	r3, r3, #7
 8004764:	f103 0208 	add.w	r2, r3, #8
 8004768:	f894 9018 	ldrb.w	r9, [r4, #24]
 800476c:	f8d4 b000 	ldr.w	fp, [r4]
 8004770:	f8c8 2000 	str.w	r2, [r8]
 8004774:	e9d3 a800 	ldrd	sl, r8, [r3]
 8004778:	4652      	mov	r2, sl
 800477a:	4643      	mov	r3, r8
 800477c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004780:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8004784:	930b      	str	r3, [sp, #44]	; 0x2c
 8004786:	f04f 32ff 	mov.w	r2, #4294967295
 800478a:	4650      	mov	r0, sl
 800478c:	4b9c      	ldr	r3, [pc, #624]	; (8004a00 <_printf_float+0x2cc>)
 800478e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004790:	f7fc f93c 	bl	8000a0c <__aeabi_dcmpun>
 8004794:	bb70      	cbnz	r0, 80047f4 <_printf_float+0xc0>
 8004796:	f04f 32ff 	mov.w	r2, #4294967295
 800479a:	4650      	mov	r0, sl
 800479c:	4b98      	ldr	r3, [pc, #608]	; (8004a00 <_printf_float+0x2cc>)
 800479e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80047a0:	f7fc f916 	bl	80009d0 <__aeabi_dcmple>
 80047a4:	bb30      	cbnz	r0, 80047f4 <_printf_float+0xc0>
 80047a6:	2200      	movs	r2, #0
 80047a8:	2300      	movs	r3, #0
 80047aa:	4650      	mov	r0, sl
 80047ac:	4641      	mov	r1, r8
 80047ae:	f7fc f905 	bl	80009bc <__aeabi_dcmplt>
 80047b2:	b110      	cbz	r0, 80047ba <_printf_float+0x86>
 80047b4:	232d      	movs	r3, #45	; 0x2d
 80047b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047ba:	4a92      	ldr	r2, [pc, #584]	; (8004a04 <_printf_float+0x2d0>)
 80047bc:	4b92      	ldr	r3, [pc, #584]	; (8004a08 <_printf_float+0x2d4>)
 80047be:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80047c2:	bf94      	ite	ls
 80047c4:	4690      	movls	r8, r2
 80047c6:	4698      	movhi	r8, r3
 80047c8:	2303      	movs	r3, #3
 80047ca:	f04f 0a00 	mov.w	sl, #0
 80047ce:	6123      	str	r3, [r4, #16]
 80047d0:	f02b 0304 	bic.w	r3, fp, #4
 80047d4:	6023      	str	r3, [r4, #0]
 80047d6:	4633      	mov	r3, r6
 80047d8:	4621      	mov	r1, r4
 80047da:	4628      	mov	r0, r5
 80047dc:	9700      	str	r7, [sp, #0]
 80047de:	aa0f      	add	r2, sp, #60	; 0x3c
 80047e0:	f000 f9d6 	bl	8004b90 <_printf_common>
 80047e4:	3001      	adds	r0, #1
 80047e6:	f040 8090 	bne.w	800490a <_printf_float+0x1d6>
 80047ea:	f04f 30ff 	mov.w	r0, #4294967295
 80047ee:	b011      	add	sp, #68	; 0x44
 80047f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047f4:	4652      	mov	r2, sl
 80047f6:	4643      	mov	r3, r8
 80047f8:	4650      	mov	r0, sl
 80047fa:	4641      	mov	r1, r8
 80047fc:	f7fc f906 	bl	8000a0c <__aeabi_dcmpun>
 8004800:	b148      	cbz	r0, 8004816 <_printf_float+0xe2>
 8004802:	f1b8 0f00 	cmp.w	r8, #0
 8004806:	bfb8      	it	lt
 8004808:	232d      	movlt	r3, #45	; 0x2d
 800480a:	4a80      	ldr	r2, [pc, #512]	; (8004a0c <_printf_float+0x2d8>)
 800480c:	bfb8      	it	lt
 800480e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004812:	4b7f      	ldr	r3, [pc, #508]	; (8004a10 <_printf_float+0x2dc>)
 8004814:	e7d3      	b.n	80047be <_printf_float+0x8a>
 8004816:	6863      	ldr	r3, [r4, #4]
 8004818:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800481c:	1c5a      	adds	r2, r3, #1
 800481e:	d142      	bne.n	80048a6 <_printf_float+0x172>
 8004820:	2306      	movs	r3, #6
 8004822:	6063      	str	r3, [r4, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	9206      	str	r2, [sp, #24]
 8004828:	aa0e      	add	r2, sp, #56	; 0x38
 800482a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800482e:	aa0d      	add	r2, sp, #52	; 0x34
 8004830:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004834:	9203      	str	r2, [sp, #12]
 8004836:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800483a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800483e:	6023      	str	r3, [r4, #0]
 8004840:	6863      	ldr	r3, [r4, #4]
 8004842:	4652      	mov	r2, sl
 8004844:	9300      	str	r3, [sp, #0]
 8004846:	4628      	mov	r0, r5
 8004848:	4643      	mov	r3, r8
 800484a:	910b      	str	r1, [sp, #44]	; 0x2c
 800484c:	f7ff fed6 	bl	80045fc <__cvt>
 8004850:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004852:	4680      	mov	r8, r0
 8004854:	2947      	cmp	r1, #71	; 0x47
 8004856:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004858:	d108      	bne.n	800486c <_printf_float+0x138>
 800485a:	1cc8      	adds	r0, r1, #3
 800485c:	db02      	blt.n	8004864 <_printf_float+0x130>
 800485e:	6863      	ldr	r3, [r4, #4]
 8004860:	4299      	cmp	r1, r3
 8004862:	dd40      	ble.n	80048e6 <_printf_float+0x1b2>
 8004864:	f1a9 0902 	sub.w	r9, r9, #2
 8004868:	fa5f f989 	uxtb.w	r9, r9
 800486c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004870:	d81f      	bhi.n	80048b2 <_printf_float+0x17e>
 8004872:	464a      	mov	r2, r9
 8004874:	3901      	subs	r1, #1
 8004876:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800487a:	910d      	str	r1, [sp, #52]	; 0x34
 800487c:	f7ff ff1d 	bl	80046ba <__exponent>
 8004880:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004882:	4682      	mov	sl, r0
 8004884:	1813      	adds	r3, r2, r0
 8004886:	2a01      	cmp	r2, #1
 8004888:	6123      	str	r3, [r4, #16]
 800488a:	dc02      	bgt.n	8004892 <_printf_float+0x15e>
 800488c:	6822      	ldr	r2, [r4, #0]
 800488e:	07d2      	lsls	r2, r2, #31
 8004890:	d501      	bpl.n	8004896 <_printf_float+0x162>
 8004892:	3301      	adds	r3, #1
 8004894:	6123      	str	r3, [r4, #16]
 8004896:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800489a:	2b00      	cmp	r3, #0
 800489c:	d09b      	beq.n	80047d6 <_printf_float+0xa2>
 800489e:	232d      	movs	r3, #45	; 0x2d
 80048a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048a4:	e797      	b.n	80047d6 <_printf_float+0xa2>
 80048a6:	2947      	cmp	r1, #71	; 0x47
 80048a8:	d1bc      	bne.n	8004824 <_printf_float+0xf0>
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1ba      	bne.n	8004824 <_printf_float+0xf0>
 80048ae:	2301      	movs	r3, #1
 80048b0:	e7b7      	b.n	8004822 <_printf_float+0xee>
 80048b2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80048b6:	d118      	bne.n	80048ea <_printf_float+0x1b6>
 80048b8:	2900      	cmp	r1, #0
 80048ba:	6863      	ldr	r3, [r4, #4]
 80048bc:	dd0b      	ble.n	80048d6 <_printf_float+0x1a2>
 80048be:	6121      	str	r1, [r4, #16]
 80048c0:	b913      	cbnz	r3, 80048c8 <_printf_float+0x194>
 80048c2:	6822      	ldr	r2, [r4, #0]
 80048c4:	07d0      	lsls	r0, r2, #31
 80048c6:	d502      	bpl.n	80048ce <_printf_float+0x19a>
 80048c8:	3301      	adds	r3, #1
 80048ca:	440b      	add	r3, r1
 80048cc:	6123      	str	r3, [r4, #16]
 80048ce:	f04f 0a00 	mov.w	sl, #0
 80048d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80048d4:	e7df      	b.n	8004896 <_printf_float+0x162>
 80048d6:	b913      	cbnz	r3, 80048de <_printf_float+0x1aa>
 80048d8:	6822      	ldr	r2, [r4, #0]
 80048da:	07d2      	lsls	r2, r2, #31
 80048dc:	d501      	bpl.n	80048e2 <_printf_float+0x1ae>
 80048de:	3302      	adds	r3, #2
 80048e0:	e7f4      	b.n	80048cc <_printf_float+0x198>
 80048e2:	2301      	movs	r3, #1
 80048e4:	e7f2      	b.n	80048cc <_printf_float+0x198>
 80048e6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80048ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048ec:	4299      	cmp	r1, r3
 80048ee:	db05      	blt.n	80048fc <_printf_float+0x1c8>
 80048f0:	6823      	ldr	r3, [r4, #0]
 80048f2:	6121      	str	r1, [r4, #16]
 80048f4:	07d8      	lsls	r0, r3, #31
 80048f6:	d5ea      	bpl.n	80048ce <_printf_float+0x19a>
 80048f8:	1c4b      	adds	r3, r1, #1
 80048fa:	e7e7      	b.n	80048cc <_printf_float+0x198>
 80048fc:	2900      	cmp	r1, #0
 80048fe:	bfcc      	ite	gt
 8004900:	2201      	movgt	r2, #1
 8004902:	f1c1 0202 	rsble	r2, r1, #2
 8004906:	4413      	add	r3, r2
 8004908:	e7e0      	b.n	80048cc <_printf_float+0x198>
 800490a:	6823      	ldr	r3, [r4, #0]
 800490c:	055a      	lsls	r2, r3, #21
 800490e:	d407      	bmi.n	8004920 <_printf_float+0x1ec>
 8004910:	6923      	ldr	r3, [r4, #16]
 8004912:	4642      	mov	r2, r8
 8004914:	4631      	mov	r1, r6
 8004916:	4628      	mov	r0, r5
 8004918:	47b8      	blx	r7
 800491a:	3001      	adds	r0, #1
 800491c:	d12b      	bne.n	8004976 <_printf_float+0x242>
 800491e:	e764      	b.n	80047ea <_printf_float+0xb6>
 8004920:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004924:	f240 80dd 	bls.w	8004ae2 <_printf_float+0x3ae>
 8004928:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800492c:	2200      	movs	r2, #0
 800492e:	2300      	movs	r3, #0
 8004930:	f7fc f83a 	bl	80009a8 <__aeabi_dcmpeq>
 8004934:	2800      	cmp	r0, #0
 8004936:	d033      	beq.n	80049a0 <_printf_float+0x26c>
 8004938:	2301      	movs	r3, #1
 800493a:	4631      	mov	r1, r6
 800493c:	4628      	mov	r0, r5
 800493e:	4a35      	ldr	r2, [pc, #212]	; (8004a14 <_printf_float+0x2e0>)
 8004940:	47b8      	blx	r7
 8004942:	3001      	adds	r0, #1
 8004944:	f43f af51 	beq.w	80047ea <_printf_float+0xb6>
 8004948:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800494c:	429a      	cmp	r2, r3
 800494e:	db02      	blt.n	8004956 <_printf_float+0x222>
 8004950:	6823      	ldr	r3, [r4, #0]
 8004952:	07d8      	lsls	r0, r3, #31
 8004954:	d50f      	bpl.n	8004976 <_printf_float+0x242>
 8004956:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800495a:	4631      	mov	r1, r6
 800495c:	4628      	mov	r0, r5
 800495e:	47b8      	blx	r7
 8004960:	3001      	adds	r0, #1
 8004962:	f43f af42 	beq.w	80047ea <_printf_float+0xb6>
 8004966:	f04f 0800 	mov.w	r8, #0
 800496a:	f104 091a 	add.w	r9, r4, #26
 800496e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004970:	3b01      	subs	r3, #1
 8004972:	4543      	cmp	r3, r8
 8004974:	dc09      	bgt.n	800498a <_printf_float+0x256>
 8004976:	6823      	ldr	r3, [r4, #0]
 8004978:	079b      	lsls	r3, r3, #30
 800497a:	f100 8104 	bmi.w	8004b86 <_printf_float+0x452>
 800497e:	68e0      	ldr	r0, [r4, #12]
 8004980:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004982:	4298      	cmp	r0, r3
 8004984:	bfb8      	it	lt
 8004986:	4618      	movlt	r0, r3
 8004988:	e731      	b.n	80047ee <_printf_float+0xba>
 800498a:	2301      	movs	r3, #1
 800498c:	464a      	mov	r2, r9
 800498e:	4631      	mov	r1, r6
 8004990:	4628      	mov	r0, r5
 8004992:	47b8      	blx	r7
 8004994:	3001      	adds	r0, #1
 8004996:	f43f af28 	beq.w	80047ea <_printf_float+0xb6>
 800499a:	f108 0801 	add.w	r8, r8, #1
 800499e:	e7e6      	b.n	800496e <_printf_float+0x23a>
 80049a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	dc38      	bgt.n	8004a18 <_printf_float+0x2e4>
 80049a6:	2301      	movs	r3, #1
 80049a8:	4631      	mov	r1, r6
 80049aa:	4628      	mov	r0, r5
 80049ac:	4a19      	ldr	r2, [pc, #100]	; (8004a14 <_printf_float+0x2e0>)
 80049ae:	47b8      	blx	r7
 80049b0:	3001      	adds	r0, #1
 80049b2:	f43f af1a 	beq.w	80047ea <_printf_float+0xb6>
 80049b6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80049ba:	4313      	orrs	r3, r2
 80049bc:	d102      	bne.n	80049c4 <_printf_float+0x290>
 80049be:	6823      	ldr	r3, [r4, #0]
 80049c0:	07d9      	lsls	r1, r3, #31
 80049c2:	d5d8      	bpl.n	8004976 <_printf_float+0x242>
 80049c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049c8:	4631      	mov	r1, r6
 80049ca:	4628      	mov	r0, r5
 80049cc:	47b8      	blx	r7
 80049ce:	3001      	adds	r0, #1
 80049d0:	f43f af0b 	beq.w	80047ea <_printf_float+0xb6>
 80049d4:	f04f 0900 	mov.w	r9, #0
 80049d8:	f104 0a1a 	add.w	sl, r4, #26
 80049dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049de:	425b      	negs	r3, r3
 80049e0:	454b      	cmp	r3, r9
 80049e2:	dc01      	bgt.n	80049e8 <_printf_float+0x2b4>
 80049e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049e6:	e794      	b.n	8004912 <_printf_float+0x1de>
 80049e8:	2301      	movs	r3, #1
 80049ea:	4652      	mov	r2, sl
 80049ec:	4631      	mov	r1, r6
 80049ee:	4628      	mov	r0, r5
 80049f0:	47b8      	blx	r7
 80049f2:	3001      	adds	r0, #1
 80049f4:	f43f aef9 	beq.w	80047ea <_printf_float+0xb6>
 80049f8:	f109 0901 	add.w	r9, r9, #1
 80049fc:	e7ee      	b.n	80049dc <_printf_float+0x2a8>
 80049fe:	bf00      	nop
 8004a00:	7fefffff 	.word	0x7fefffff
 8004a04:	0800730e 	.word	0x0800730e
 8004a08:	08007312 	.word	0x08007312
 8004a0c:	08007316 	.word	0x08007316
 8004a10:	0800731a 	.word	0x0800731a
 8004a14:	0800731e 	.word	0x0800731e
 8004a18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a1a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	bfa8      	it	ge
 8004a20:	461a      	movge	r2, r3
 8004a22:	2a00      	cmp	r2, #0
 8004a24:	4691      	mov	r9, r2
 8004a26:	dc37      	bgt.n	8004a98 <_printf_float+0x364>
 8004a28:	f04f 0b00 	mov.w	fp, #0
 8004a2c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a30:	f104 021a 	add.w	r2, r4, #26
 8004a34:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004a38:	ebaa 0309 	sub.w	r3, sl, r9
 8004a3c:	455b      	cmp	r3, fp
 8004a3e:	dc33      	bgt.n	8004aa8 <_printf_float+0x374>
 8004a40:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004a44:	429a      	cmp	r2, r3
 8004a46:	db3b      	blt.n	8004ac0 <_printf_float+0x38c>
 8004a48:	6823      	ldr	r3, [r4, #0]
 8004a4a:	07da      	lsls	r2, r3, #31
 8004a4c:	d438      	bmi.n	8004ac0 <_printf_float+0x38c>
 8004a4e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004a52:	eba2 0903 	sub.w	r9, r2, r3
 8004a56:	eba2 020a 	sub.w	r2, r2, sl
 8004a5a:	4591      	cmp	r9, r2
 8004a5c:	bfa8      	it	ge
 8004a5e:	4691      	movge	r9, r2
 8004a60:	f1b9 0f00 	cmp.w	r9, #0
 8004a64:	dc34      	bgt.n	8004ad0 <_printf_float+0x39c>
 8004a66:	f04f 0800 	mov.w	r8, #0
 8004a6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a6e:	f104 0a1a 	add.w	sl, r4, #26
 8004a72:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004a76:	1a9b      	subs	r3, r3, r2
 8004a78:	eba3 0309 	sub.w	r3, r3, r9
 8004a7c:	4543      	cmp	r3, r8
 8004a7e:	f77f af7a 	ble.w	8004976 <_printf_float+0x242>
 8004a82:	2301      	movs	r3, #1
 8004a84:	4652      	mov	r2, sl
 8004a86:	4631      	mov	r1, r6
 8004a88:	4628      	mov	r0, r5
 8004a8a:	47b8      	blx	r7
 8004a8c:	3001      	adds	r0, #1
 8004a8e:	f43f aeac 	beq.w	80047ea <_printf_float+0xb6>
 8004a92:	f108 0801 	add.w	r8, r8, #1
 8004a96:	e7ec      	b.n	8004a72 <_printf_float+0x33e>
 8004a98:	4613      	mov	r3, r2
 8004a9a:	4631      	mov	r1, r6
 8004a9c:	4642      	mov	r2, r8
 8004a9e:	4628      	mov	r0, r5
 8004aa0:	47b8      	blx	r7
 8004aa2:	3001      	adds	r0, #1
 8004aa4:	d1c0      	bne.n	8004a28 <_printf_float+0x2f4>
 8004aa6:	e6a0      	b.n	80047ea <_printf_float+0xb6>
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	4631      	mov	r1, r6
 8004aac:	4628      	mov	r0, r5
 8004aae:	920b      	str	r2, [sp, #44]	; 0x2c
 8004ab0:	47b8      	blx	r7
 8004ab2:	3001      	adds	r0, #1
 8004ab4:	f43f ae99 	beq.w	80047ea <_printf_float+0xb6>
 8004ab8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004aba:	f10b 0b01 	add.w	fp, fp, #1
 8004abe:	e7b9      	b.n	8004a34 <_printf_float+0x300>
 8004ac0:	4631      	mov	r1, r6
 8004ac2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ac6:	4628      	mov	r0, r5
 8004ac8:	47b8      	blx	r7
 8004aca:	3001      	adds	r0, #1
 8004acc:	d1bf      	bne.n	8004a4e <_printf_float+0x31a>
 8004ace:	e68c      	b.n	80047ea <_printf_float+0xb6>
 8004ad0:	464b      	mov	r3, r9
 8004ad2:	4631      	mov	r1, r6
 8004ad4:	4628      	mov	r0, r5
 8004ad6:	eb08 020a 	add.w	r2, r8, sl
 8004ada:	47b8      	blx	r7
 8004adc:	3001      	adds	r0, #1
 8004ade:	d1c2      	bne.n	8004a66 <_printf_float+0x332>
 8004ae0:	e683      	b.n	80047ea <_printf_float+0xb6>
 8004ae2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ae4:	2a01      	cmp	r2, #1
 8004ae6:	dc01      	bgt.n	8004aec <_printf_float+0x3b8>
 8004ae8:	07db      	lsls	r3, r3, #31
 8004aea:	d539      	bpl.n	8004b60 <_printf_float+0x42c>
 8004aec:	2301      	movs	r3, #1
 8004aee:	4642      	mov	r2, r8
 8004af0:	4631      	mov	r1, r6
 8004af2:	4628      	mov	r0, r5
 8004af4:	47b8      	blx	r7
 8004af6:	3001      	adds	r0, #1
 8004af8:	f43f ae77 	beq.w	80047ea <_printf_float+0xb6>
 8004afc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b00:	4631      	mov	r1, r6
 8004b02:	4628      	mov	r0, r5
 8004b04:	47b8      	blx	r7
 8004b06:	3001      	adds	r0, #1
 8004b08:	f43f ae6f 	beq.w	80047ea <_printf_float+0xb6>
 8004b0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b10:	2200      	movs	r2, #0
 8004b12:	2300      	movs	r3, #0
 8004b14:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8004b18:	f7fb ff46 	bl	80009a8 <__aeabi_dcmpeq>
 8004b1c:	b9d8      	cbnz	r0, 8004b56 <_printf_float+0x422>
 8004b1e:	f109 33ff 	add.w	r3, r9, #4294967295
 8004b22:	f108 0201 	add.w	r2, r8, #1
 8004b26:	4631      	mov	r1, r6
 8004b28:	4628      	mov	r0, r5
 8004b2a:	47b8      	blx	r7
 8004b2c:	3001      	adds	r0, #1
 8004b2e:	d10e      	bne.n	8004b4e <_printf_float+0x41a>
 8004b30:	e65b      	b.n	80047ea <_printf_float+0xb6>
 8004b32:	2301      	movs	r3, #1
 8004b34:	464a      	mov	r2, r9
 8004b36:	4631      	mov	r1, r6
 8004b38:	4628      	mov	r0, r5
 8004b3a:	47b8      	blx	r7
 8004b3c:	3001      	adds	r0, #1
 8004b3e:	f43f ae54 	beq.w	80047ea <_printf_float+0xb6>
 8004b42:	f108 0801 	add.w	r8, r8, #1
 8004b46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	4543      	cmp	r3, r8
 8004b4c:	dcf1      	bgt.n	8004b32 <_printf_float+0x3fe>
 8004b4e:	4653      	mov	r3, sl
 8004b50:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004b54:	e6de      	b.n	8004914 <_printf_float+0x1e0>
 8004b56:	f04f 0800 	mov.w	r8, #0
 8004b5a:	f104 091a 	add.w	r9, r4, #26
 8004b5e:	e7f2      	b.n	8004b46 <_printf_float+0x412>
 8004b60:	2301      	movs	r3, #1
 8004b62:	4642      	mov	r2, r8
 8004b64:	e7df      	b.n	8004b26 <_printf_float+0x3f2>
 8004b66:	2301      	movs	r3, #1
 8004b68:	464a      	mov	r2, r9
 8004b6a:	4631      	mov	r1, r6
 8004b6c:	4628      	mov	r0, r5
 8004b6e:	47b8      	blx	r7
 8004b70:	3001      	adds	r0, #1
 8004b72:	f43f ae3a 	beq.w	80047ea <_printf_float+0xb6>
 8004b76:	f108 0801 	add.w	r8, r8, #1
 8004b7a:	68e3      	ldr	r3, [r4, #12]
 8004b7c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004b7e:	1a5b      	subs	r3, r3, r1
 8004b80:	4543      	cmp	r3, r8
 8004b82:	dcf0      	bgt.n	8004b66 <_printf_float+0x432>
 8004b84:	e6fb      	b.n	800497e <_printf_float+0x24a>
 8004b86:	f04f 0800 	mov.w	r8, #0
 8004b8a:	f104 0919 	add.w	r9, r4, #25
 8004b8e:	e7f4      	b.n	8004b7a <_printf_float+0x446>

08004b90 <_printf_common>:
 8004b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b94:	4616      	mov	r6, r2
 8004b96:	4699      	mov	r9, r3
 8004b98:	688a      	ldr	r2, [r1, #8]
 8004b9a:	690b      	ldr	r3, [r1, #16]
 8004b9c:	4607      	mov	r7, r0
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	bfb8      	it	lt
 8004ba2:	4613      	movlt	r3, r2
 8004ba4:	6033      	str	r3, [r6, #0]
 8004ba6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004baa:	460c      	mov	r4, r1
 8004bac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004bb0:	b10a      	cbz	r2, 8004bb6 <_printf_common+0x26>
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	6033      	str	r3, [r6, #0]
 8004bb6:	6823      	ldr	r3, [r4, #0]
 8004bb8:	0699      	lsls	r1, r3, #26
 8004bba:	bf42      	ittt	mi
 8004bbc:	6833      	ldrmi	r3, [r6, #0]
 8004bbe:	3302      	addmi	r3, #2
 8004bc0:	6033      	strmi	r3, [r6, #0]
 8004bc2:	6825      	ldr	r5, [r4, #0]
 8004bc4:	f015 0506 	ands.w	r5, r5, #6
 8004bc8:	d106      	bne.n	8004bd8 <_printf_common+0x48>
 8004bca:	f104 0a19 	add.w	sl, r4, #25
 8004bce:	68e3      	ldr	r3, [r4, #12]
 8004bd0:	6832      	ldr	r2, [r6, #0]
 8004bd2:	1a9b      	subs	r3, r3, r2
 8004bd4:	42ab      	cmp	r3, r5
 8004bd6:	dc2b      	bgt.n	8004c30 <_printf_common+0xa0>
 8004bd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004bdc:	1e13      	subs	r3, r2, #0
 8004bde:	6822      	ldr	r2, [r4, #0]
 8004be0:	bf18      	it	ne
 8004be2:	2301      	movne	r3, #1
 8004be4:	0692      	lsls	r2, r2, #26
 8004be6:	d430      	bmi.n	8004c4a <_printf_common+0xba>
 8004be8:	4649      	mov	r1, r9
 8004bea:	4638      	mov	r0, r7
 8004bec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004bf0:	47c0      	blx	r8
 8004bf2:	3001      	adds	r0, #1
 8004bf4:	d023      	beq.n	8004c3e <_printf_common+0xae>
 8004bf6:	6823      	ldr	r3, [r4, #0]
 8004bf8:	6922      	ldr	r2, [r4, #16]
 8004bfa:	f003 0306 	and.w	r3, r3, #6
 8004bfe:	2b04      	cmp	r3, #4
 8004c00:	bf14      	ite	ne
 8004c02:	2500      	movne	r5, #0
 8004c04:	6833      	ldreq	r3, [r6, #0]
 8004c06:	f04f 0600 	mov.w	r6, #0
 8004c0a:	bf08      	it	eq
 8004c0c:	68e5      	ldreq	r5, [r4, #12]
 8004c0e:	f104 041a 	add.w	r4, r4, #26
 8004c12:	bf08      	it	eq
 8004c14:	1aed      	subeq	r5, r5, r3
 8004c16:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004c1a:	bf08      	it	eq
 8004c1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c20:	4293      	cmp	r3, r2
 8004c22:	bfc4      	itt	gt
 8004c24:	1a9b      	subgt	r3, r3, r2
 8004c26:	18ed      	addgt	r5, r5, r3
 8004c28:	42b5      	cmp	r5, r6
 8004c2a:	d11a      	bne.n	8004c62 <_printf_common+0xd2>
 8004c2c:	2000      	movs	r0, #0
 8004c2e:	e008      	b.n	8004c42 <_printf_common+0xb2>
 8004c30:	2301      	movs	r3, #1
 8004c32:	4652      	mov	r2, sl
 8004c34:	4649      	mov	r1, r9
 8004c36:	4638      	mov	r0, r7
 8004c38:	47c0      	blx	r8
 8004c3a:	3001      	adds	r0, #1
 8004c3c:	d103      	bne.n	8004c46 <_printf_common+0xb6>
 8004c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8004c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c46:	3501      	adds	r5, #1
 8004c48:	e7c1      	b.n	8004bce <_printf_common+0x3e>
 8004c4a:	2030      	movs	r0, #48	; 0x30
 8004c4c:	18e1      	adds	r1, r4, r3
 8004c4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c52:	1c5a      	adds	r2, r3, #1
 8004c54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c58:	4422      	add	r2, r4
 8004c5a:	3302      	adds	r3, #2
 8004c5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c60:	e7c2      	b.n	8004be8 <_printf_common+0x58>
 8004c62:	2301      	movs	r3, #1
 8004c64:	4622      	mov	r2, r4
 8004c66:	4649      	mov	r1, r9
 8004c68:	4638      	mov	r0, r7
 8004c6a:	47c0      	blx	r8
 8004c6c:	3001      	adds	r0, #1
 8004c6e:	d0e6      	beq.n	8004c3e <_printf_common+0xae>
 8004c70:	3601      	adds	r6, #1
 8004c72:	e7d9      	b.n	8004c28 <_printf_common+0x98>

08004c74 <_printf_i>:
 8004c74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c78:	7e0f      	ldrb	r7, [r1, #24]
 8004c7a:	4691      	mov	r9, r2
 8004c7c:	2f78      	cmp	r7, #120	; 0x78
 8004c7e:	4680      	mov	r8, r0
 8004c80:	460c      	mov	r4, r1
 8004c82:	469a      	mov	sl, r3
 8004c84:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c8a:	d807      	bhi.n	8004c9c <_printf_i+0x28>
 8004c8c:	2f62      	cmp	r7, #98	; 0x62
 8004c8e:	d80a      	bhi.n	8004ca6 <_printf_i+0x32>
 8004c90:	2f00      	cmp	r7, #0
 8004c92:	f000 80d5 	beq.w	8004e40 <_printf_i+0x1cc>
 8004c96:	2f58      	cmp	r7, #88	; 0x58
 8004c98:	f000 80c1 	beq.w	8004e1e <_printf_i+0x1aa>
 8004c9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ca0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ca4:	e03a      	b.n	8004d1c <_printf_i+0xa8>
 8004ca6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004caa:	2b15      	cmp	r3, #21
 8004cac:	d8f6      	bhi.n	8004c9c <_printf_i+0x28>
 8004cae:	a101      	add	r1, pc, #4	; (adr r1, 8004cb4 <_printf_i+0x40>)
 8004cb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004cb4:	08004d0d 	.word	0x08004d0d
 8004cb8:	08004d21 	.word	0x08004d21
 8004cbc:	08004c9d 	.word	0x08004c9d
 8004cc0:	08004c9d 	.word	0x08004c9d
 8004cc4:	08004c9d 	.word	0x08004c9d
 8004cc8:	08004c9d 	.word	0x08004c9d
 8004ccc:	08004d21 	.word	0x08004d21
 8004cd0:	08004c9d 	.word	0x08004c9d
 8004cd4:	08004c9d 	.word	0x08004c9d
 8004cd8:	08004c9d 	.word	0x08004c9d
 8004cdc:	08004c9d 	.word	0x08004c9d
 8004ce0:	08004e27 	.word	0x08004e27
 8004ce4:	08004d4d 	.word	0x08004d4d
 8004ce8:	08004de1 	.word	0x08004de1
 8004cec:	08004c9d 	.word	0x08004c9d
 8004cf0:	08004c9d 	.word	0x08004c9d
 8004cf4:	08004e49 	.word	0x08004e49
 8004cf8:	08004c9d 	.word	0x08004c9d
 8004cfc:	08004d4d 	.word	0x08004d4d
 8004d00:	08004c9d 	.word	0x08004c9d
 8004d04:	08004c9d 	.word	0x08004c9d
 8004d08:	08004de9 	.word	0x08004de9
 8004d0c:	682b      	ldr	r3, [r5, #0]
 8004d0e:	1d1a      	adds	r2, r3, #4
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	602a      	str	r2, [r5, #0]
 8004d14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e0a0      	b.n	8004e62 <_printf_i+0x1ee>
 8004d20:	6820      	ldr	r0, [r4, #0]
 8004d22:	682b      	ldr	r3, [r5, #0]
 8004d24:	0607      	lsls	r7, r0, #24
 8004d26:	f103 0104 	add.w	r1, r3, #4
 8004d2a:	6029      	str	r1, [r5, #0]
 8004d2c:	d501      	bpl.n	8004d32 <_printf_i+0xbe>
 8004d2e:	681e      	ldr	r6, [r3, #0]
 8004d30:	e003      	b.n	8004d3a <_printf_i+0xc6>
 8004d32:	0646      	lsls	r6, r0, #25
 8004d34:	d5fb      	bpl.n	8004d2e <_printf_i+0xba>
 8004d36:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004d3a:	2e00      	cmp	r6, #0
 8004d3c:	da03      	bge.n	8004d46 <_printf_i+0xd2>
 8004d3e:	232d      	movs	r3, #45	; 0x2d
 8004d40:	4276      	negs	r6, r6
 8004d42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d46:	230a      	movs	r3, #10
 8004d48:	4859      	ldr	r0, [pc, #356]	; (8004eb0 <_printf_i+0x23c>)
 8004d4a:	e012      	b.n	8004d72 <_printf_i+0xfe>
 8004d4c:	682b      	ldr	r3, [r5, #0]
 8004d4e:	6820      	ldr	r0, [r4, #0]
 8004d50:	1d19      	adds	r1, r3, #4
 8004d52:	6029      	str	r1, [r5, #0]
 8004d54:	0605      	lsls	r5, r0, #24
 8004d56:	d501      	bpl.n	8004d5c <_printf_i+0xe8>
 8004d58:	681e      	ldr	r6, [r3, #0]
 8004d5a:	e002      	b.n	8004d62 <_printf_i+0xee>
 8004d5c:	0641      	lsls	r1, r0, #25
 8004d5e:	d5fb      	bpl.n	8004d58 <_printf_i+0xe4>
 8004d60:	881e      	ldrh	r6, [r3, #0]
 8004d62:	2f6f      	cmp	r7, #111	; 0x6f
 8004d64:	bf0c      	ite	eq
 8004d66:	2308      	moveq	r3, #8
 8004d68:	230a      	movne	r3, #10
 8004d6a:	4851      	ldr	r0, [pc, #324]	; (8004eb0 <_printf_i+0x23c>)
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d72:	6865      	ldr	r5, [r4, #4]
 8004d74:	2d00      	cmp	r5, #0
 8004d76:	bfa8      	it	ge
 8004d78:	6821      	ldrge	r1, [r4, #0]
 8004d7a:	60a5      	str	r5, [r4, #8]
 8004d7c:	bfa4      	itt	ge
 8004d7e:	f021 0104 	bicge.w	r1, r1, #4
 8004d82:	6021      	strge	r1, [r4, #0]
 8004d84:	b90e      	cbnz	r6, 8004d8a <_printf_i+0x116>
 8004d86:	2d00      	cmp	r5, #0
 8004d88:	d04b      	beq.n	8004e22 <_printf_i+0x1ae>
 8004d8a:	4615      	mov	r5, r2
 8004d8c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d90:	fb03 6711 	mls	r7, r3, r1, r6
 8004d94:	5dc7      	ldrb	r7, [r0, r7]
 8004d96:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d9a:	4637      	mov	r7, r6
 8004d9c:	42bb      	cmp	r3, r7
 8004d9e:	460e      	mov	r6, r1
 8004da0:	d9f4      	bls.n	8004d8c <_printf_i+0x118>
 8004da2:	2b08      	cmp	r3, #8
 8004da4:	d10b      	bne.n	8004dbe <_printf_i+0x14a>
 8004da6:	6823      	ldr	r3, [r4, #0]
 8004da8:	07de      	lsls	r6, r3, #31
 8004daa:	d508      	bpl.n	8004dbe <_printf_i+0x14a>
 8004dac:	6923      	ldr	r3, [r4, #16]
 8004dae:	6861      	ldr	r1, [r4, #4]
 8004db0:	4299      	cmp	r1, r3
 8004db2:	bfde      	ittt	le
 8004db4:	2330      	movle	r3, #48	; 0x30
 8004db6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004dba:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004dbe:	1b52      	subs	r2, r2, r5
 8004dc0:	6122      	str	r2, [r4, #16]
 8004dc2:	464b      	mov	r3, r9
 8004dc4:	4621      	mov	r1, r4
 8004dc6:	4640      	mov	r0, r8
 8004dc8:	f8cd a000 	str.w	sl, [sp]
 8004dcc:	aa03      	add	r2, sp, #12
 8004dce:	f7ff fedf 	bl	8004b90 <_printf_common>
 8004dd2:	3001      	adds	r0, #1
 8004dd4:	d14a      	bne.n	8004e6c <_printf_i+0x1f8>
 8004dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8004dda:	b004      	add	sp, #16
 8004ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004de0:	6823      	ldr	r3, [r4, #0]
 8004de2:	f043 0320 	orr.w	r3, r3, #32
 8004de6:	6023      	str	r3, [r4, #0]
 8004de8:	2778      	movs	r7, #120	; 0x78
 8004dea:	4832      	ldr	r0, [pc, #200]	; (8004eb4 <_printf_i+0x240>)
 8004dec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004df0:	6823      	ldr	r3, [r4, #0]
 8004df2:	6829      	ldr	r1, [r5, #0]
 8004df4:	061f      	lsls	r7, r3, #24
 8004df6:	f851 6b04 	ldr.w	r6, [r1], #4
 8004dfa:	d402      	bmi.n	8004e02 <_printf_i+0x18e>
 8004dfc:	065f      	lsls	r7, r3, #25
 8004dfe:	bf48      	it	mi
 8004e00:	b2b6      	uxthmi	r6, r6
 8004e02:	07df      	lsls	r7, r3, #31
 8004e04:	bf48      	it	mi
 8004e06:	f043 0320 	orrmi.w	r3, r3, #32
 8004e0a:	6029      	str	r1, [r5, #0]
 8004e0c:	bf48      	it	mi
 8004e0e:	6023      	strmi	r3, [r4, #0]
 8004e10:	b91e      	cbnz	r6, 8004e1a <_printf_i+0x1a6>
 8004e12:	6823      	ldr	r3, [r4, #0]
 8004e14:	f023 0320 	bic.w	r3, r3, #32
 8004e18:	6023      	str	r3, [r4, #0]
 8004e1a:	2310      	movs	r3, #16
 8004e1c:	e7a6      	b.n	8004d6c <_printf_i+0xf8>
 8004e1e:	4824      	ldr	r0, [pc, #144]	; (8004eb0 <_printf_i+0x23c>)
 8004e20:	e7e4      	b.n	8004dec <_printf_i+0x178>
 8004e22:	4615      	mov	r5, r2
 8004e24:	e7bd      	b.n	8004da2 <_printf_i+0x12e>
 8004e26:	682b      	ldr	r3, [r5, #0]
 8004e28:	6826      	ldr	r6, [r4, #0]
 8004e2a:	1d18      	adds	r0, r3, #4
 8004e2c:	6961      	ldr	r1, [r4, #20]
 8004e2e:	6028      	str	r0, [r5, #0]
 8004e30:	0635      	lsls	r5, r6, #24
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	d501      	bpl.n	8004e3a <_printf_i+0x1c6>
 8004e36:	6019      	str	r1, [r3, #0]
 8004e38:	e002      	b.n	8004e40 <_printf_i+0x1cc>
 8004e3a:	0670      	lsls	r0, r6, #25
 8004e3c:	d5fb      	bpl.n	8004e36 <_printf_i+0x1c2>
 8004e3e:	8019      	strh	r1, [r3, #0]
 8004e40:	2300      	movs	r3, #0
 8004e42:	4615      	mov	r5, r2
 8004e44:	6123      	str	r3, [r4, #16]
 8004e46:	e7bc      	b.n	8004dc2 <_printf_i+0x14e>
 8004e48:	682b      	ldr	r3, [r5, #0]
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	1d1a      	adds	r2, r3, #4
 8004e4e:	602a      	str	r2, [r5, #0]
 8004e50:	681d      	ldr	r5, [r3, #0]
 8004e52:	6862      	ldr	r2, [r4, #4]
 8004e54:	4628      	mov	r0, r5
 8004e56:	f000 f9c1 	bl	80051dc <memchr>
 8004e5a:	b108      	cbz	r0, 8004e60 <_printf_i+0x1ec>
 8004e5c:	1b40      	subs	r0, r0, r5
 8004e5e:	6060      	str	r0, [r4, #4]
 8004e60:	6863      	ldr	r3, [r4, #4]
 8004e62:	6123      	str	r3, [r4, #16]
 8004e64:	2300      	movs	r3, #0
 8004e66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e6a:	e7aa      	b.n	8004dc2 <_printf_i+0x14e>
 8004e6c:	462a      	mov	r2, r5
 8004e6e:	4649      	mov	r1, r9
 8004e70:	4640      	mov	r0, r8
 8004e72:	6923      	ldr	r3, [r4, #16]
 8004e74:	47d0      	blx	sl
 8004e76:	3001      	adds	r0, #1
 8004e78:	d0ad      	beq.n	8004dd6 <_printf_i+0x162>
 8004e7a:	6823      	ldr	r3, [r4, #0]
 8004e7c:	079b      	lsls	r3, r3, #30
 8004e7e:	d413      	bmi.n	8004ea8 <_printf_i+0x234>
 8004e80:	68e0      	ldr	r0, [r4, #12]
 8004e82:	9b03      	ldr	r3, [sp, #12]
 8004e84:	4298      	cmp	r0, r3
 8004e86:	bfb8      	it	lt
 8004e88:	4618      	movlt	r0, r3
 8004e8a:	e7a6      	b.n	8004dda <_printf_i+0x166>
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	4632      	mov	r2, r6
 8004e90:	4649      	mov	r1, r9
 8004e92:	4640      	mov	r0, r8
 8004e94:	47d0      	blx	sl
 8004e96:	3001      	adds	r0, #1
 8004e98:	d09d      	beq.n	8004dd6 <_printf_i+0x162>
 8004e9a:	3501      	adds	r5, #1
 8004e9c:	68e3      	ldr	r3, [r4, #12]
 8004e9e:	9903      	ldr	r1, [sp, #12]
 8004ea0:	1a5b      	subs	r3, r3, r1
 8004ea2:	42ab      	cmp	r3, r5
 8004ea4:	dcf2      	bgt.n	8004e8c <_printf_i+0x218>
 8004ea6:	e7eb      	b.n	8004e80 <_printf_i+0x20c>
 8004ea8:	2500      	movs	r5, #0
 8004eaa:	f104 0619 	add.w	r6, r4, #25
 8004eae:	e7f5      	b.n	8004e9c <_printf_i+0x228>
 8004eb0:	08007320 	.word	0x08007320
 8004eb4:	08007331 	.word	0x08007331

08004eb8 <std>:
 8004eb8:	2300      	movs	r3, #0
 8004eba:	b510      	push	{r4, lr}
 8004ebc:	4604      	mov	r4, r0
 8004ebe:	e9c0 3300 	strd	r3, r3, [r0]
 8004ec2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ec6:	6083      	str	r3, [r0, #8]
 8004ec8:	8181      	strh	r1, [r0, #12]
 8004eca:	6643      	str	r3, [r0, #100]	; 0x64
 8004ecc:	81c2      	strh	r2, [r0, #14]
 8004ece:	6183      	str	r3, [r0, #24]
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	2208      	movs	r2, #8
 8004ed4:	305c      	adds	r0, #92	; 0x5c
 8004ed6:	f000 f902 	bl	80050de <memset>
 8004eda:	4b05      	ldr	r3, [pc, #20]	; (8004ef0 <std+0x38>)
 8004edc:	6224      	str	r4, [r4, #32]
 8004ede:	6263      	str	r3, [r4, #36]	; 0x24
 8004ee0:	4b04      	ldr	r3, [pc, #16]	; (8004ef4 <std+0x3c>)
 8004ee2:	62a3      	str	r3, [r4, #40]	; 0x28
 8004ee4:	4b04      	ldr	r3, [pc, #16]	; (8004ef8 <std+0x40>)
 8004ee6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004ee8:	4b04      	ldr	r3, [pc, #16]	; (8004efc <std+0x44>)
 8004eea:	6323      	str	r3, [r4, #48]	; 0x30
 8004eec:	bd10      	pop	{r4, pc}
 8004eee:	bf00      	nop
 8004ef0:	08005059 	.word	0x08005059
 8004ef4:	0800507b 	.word	0x0800507b
 8004ef8:	080050b3 	.word	0x080050b3
 8004efc:	080050d7 	.word	0x080050d7

08004f00 <stdio_exit_handler>:
 8004f00:	4a02      	ldr	r2, [pc, #8]	; (8004f0c <stdio_exit_handler+0xc>)
 8004f02:	4903      	ldr	r1, [pc, #12]	; (8004f10 <stdio_exit_handler+0x10>)
 8004f04:	4803      	ldr	r0, [pc, #12]	; (8004f14 <stdio_exit_handler+0x14>)
 8004f06:	f000 b869 	b.w	8004fdc <_fwalk_sglue>
 8004f0a:	bf00      	nop
 8004f0c:	20000034 	.word	0x20000034
 8004f10:	08006b75 	.word	0x08006b75
 8004f14:	20000040 	.word	0x20000040

08004f18 <cleanup_stdio>:
 8004f18:	6841      	ldr	r1, [r0, #4]
 8004f1a:	4b0c      	ldr	r3, [pc, #48]	; (8004f4c <cleanup_stdio+0x34>)
 8004f1c:	b510      	push	{r4, lr}
 8004f1e:	4299      	cmp	r1, r3
 8004f20:	4604      	mov	r4, r0
 8004f22:	d001      	beq.n	8004f28 <cleanup_stdio+0x10>
 8004f24:	f001 fe26 	bl	8006b74 <_fflush_r>
 8004f28:	68a1      	ldr	r1, [r4, #8]
 8004f2a:	4b09      	ldr	r3, [pc, #36]	; (8004f50 <cleanup_stdio+0x38>)
 8004f2c:	4299      	cmp	r1, r3
 8004f2e:	d002      	beq.n	8004f36 <cleanup_stdio+0x1e>
 8004f30:	4620      	mov	r0, r4
 8004f32:	f001 fe1f 	bl	8006b74 <_fflush_r>
 8004f36:	68e1      	ldr	r1, [r4, #12]
 8004f38:	4b06      	ldr	r3, [pc, #24]	; (8004f54 <cleanup_stdio+0x3c>)
 8004f3a:	4299      	cmp	r1, r3
 8004f3c:	d004      	beq.n	8004f48 <cleanup_stdio+0x30>
 8004f3e:	4620      	mov	r0, r4
 8004f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f44:	f001 be16 	b.w	8006b74 <_fflush_r>
 8004f48:	bd10      	pop	{r4, pc}
 8004f4a:	bf00      	nop
 8004f4c:	200003c0 	.word	0x200003c0
 8004f50:	20000428 	.word	0x20000428
 8004f54:	20000490 	.word	0x20000490

08004f58 <global_stdio_init.part.0>:
 8004f58:	b510      	push	{r4, lr}
 8004f5a:	4b0b      	ldr	r3, [pc, #44]	; (8004f88 <global_stdio_init.part.0+0x30>)
 8004f5c:	4c0b      	ldr	r4, [pc, #44]	; (8004f8c <global_stdio_init.part.0+0x34>)
 8004f5e:	4a0c      	ldr	r2, [pc, #48]	; (8004f90 <global_stdio_init.part.0+0x38>)
 8004f60:	4620      	mov	r0, r4
 8004f62:	601a      	str	r2, [r3, #0]
 8004f64:	2104      	movs	r1, #4
 8004f66:	2200      	movs	r2, #0
 8004f68:	f7ff ffa6 	bl	8004eb8 <std>
 8004f6c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004f70:	2201      	movs	r2, #1
 8004f72:	2109      	movs	r1, #9
 8004f74:	f7ff ffa0 	bl	8004eb8 <std>
 8004f78:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004f7c:	2202      	movs	r2, #2
 8004f7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f82:	2112      	movs	r1, #18
 8004f84:	f7ff bf98 	b.w	8004eb8 <std>
 8004f88:	200004f8 	.word	0x200004f8
 8004f8c:	200003c0 	.word	0x200003c0
 8004f90:	08004f01 	.word	0x08004f01

08004f94 <__sfp_lock_acquire>:
 8004f94:	4801      	ldr	r0, [pc, #4]	; (8004f9c <__sfp_lock_acquire+0x8>)
 8004f96:	f000 b91f 	b.w	80051d8 <__retarget_lock_acquire_recursive>
 8004f9a:	bf00      	nop
 8004f9c:	20000501 	.word	0x20000501

08004fa0 <__sfp_lock_release>:
 8004fa0:	4801      	ldr	r0, [pc, #4]	; (8004fa8 <__sfp_lock_release+0x8>)
 8004fa2:	f000 b91a 	b.w	80051da <__retarget_lock_release_recursive>
 8004fa6:	bf00      	nop
 8004fa8:	20000501 	.word	0x20000501

08004fac <__sinit>:
 8004fac:	b510      	push	{r4, lr}
 8004fae:	4604      	mov	r4, r0
 8004fb0:	f7ff fff0 	bl	8004f94 <__sfp_lock_acquire>
 8004fb4:	6a23      	ldr	r3, [r4, #32]
 8004fb6:	b11b      	cbz	r3, 8004fc0 <__sinit+0x14>
 8004fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fbc:	f7ff bff0 	b.w	8004fa0 <__sfp_lock_release>
 8004fc0:	4b04      	ldr	r3, [pc, #16]	; (8004fd4 <__sinit+0x28>)
 8004fc2:	6223      	str	r3, [r4, #32]
 8004fc4:	4b04      	ldr	r3, [pc, #16]	; (8004fd8 <__sinit+0x2c>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1f5      	bne.n	8004fb8 <__sinit+0xc>
 8004fcc:	f7ff ffc4 	bl	8004f58 <global_stdio_init.part.0>
 8004fd0:	e7f2      	b.n	8004fb8 <__sinit+0xc>
 8004fd2:	bf00      	nop
 8004fd4:	08004f19 	.word	0x08004f19
 8004fd8:	200004f8 	.word	0x200004f8

08004fdc <_fwalk_sglue>:
 8004fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fe0:	4607      	mov	r7, r0
 8004fe2:	4688      	mov	r8, r1
 8004fe4:	4614      	mov	r4, r2
 8004fe6:	2600      	movs	r6, #0
 8004fe8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004fec:	f1b9 0901 	subs.w	r9, r9, #1
 8004ff0:	d505      	bpl.n	8004ffe <_fwalk_sglue+0x22>
 8004ff2:	6824      	ldr	r4, [r4, #0]
 8004ff4:	2c00      	cmp	r4, #0
 8004ff6:	d1f7      	bne.n	8004fe8 <_fwalk_sglue+0xc>
 8004ff8:	4630      	mov	r0, r6
 8004ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ffe:	89ab      	ldrh	r3, [r5, #12]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d907      	bls.n	8005014 <_fwalk_sglue+0x38>
 8005004:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005008:	3301      	adds	r3, #1
 800500a:	d003      	beq.n	8005014 <_fwalk_sglue+0x38>
 800500c:	4629      	mov	r1, r5
 800500e:	4638      	mov	r0, r7
 8005010:	47c0      	blx	r8
 8005012:	4306      	orrs	r6, r0
 8005014:	3568      	adds	r5, #104	; 0x68
 8005016:	e7e9      	b.n	8004fec <_fwalk_sglue+0x10>

08005018 <siprintf>:
 8005018:	b40e      	push	{r1, r2, r3}
 800501a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800501e:	b500      	push	{lr}
 8005020:	b09c      	sub	sp, #112	; 0x70
 8005022:	ab1d      	add	r3, sp, #116	; 0x74
 8005024:	9002      	str	r0, [sp, #8]
 8005026:	9006      	str	r0, [sp, #24]
 8005028:	9107      	str	r1, [sp, #28]
 800502a:	9104      	str	r1, [sp, #16]
 800502c:	4808      	ldr	r0, [pc, #32]	; (8005050 <siprintf+0x38>)
 800502e:	4909      	ldr	r1, [pc, #36]	; (8005054 <siprintf+0x3c>)
 8005030:	f853 2b04 	ldr.w	r2, [r3], #4
 8005034:	9105      	str	r1, [sp, #20]
 8005036:	6800      	ldr	r0, [r0, #0]
 8005038:	a902      	add	r1, sp, #8
 800503a:	9301      	str	r3, [sp, #4]
 800503c:	f001 fc1a 	bl	8006874 <_svfiprintf_r>
 8005040:	2200      	movs	r2, #0
 8005042:	9b02      	ldr	r3, [sp, #8]
 8005044:	701a      	strb	r2, [r3, #0]
 8005046:	b01c      	add	sp, #112	; 0x70
 8005048:	f85d eb04 	ldr.w	lr, [sp], #4
 800504c:	b003      	add	sp, #12
 800504e:	4770      	bx	lr
 8005050:	2000008c 	.word	0x2000008c
 8005054:	ffff0208 	.word	0xffff0208

08005058 <__sread>:
 8005058:	b510      	push	{r4, lr}
 800505a:	460c      	mov	r4, r1
 800505c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005060:	f000 f86c 	bl	800513c <_read_r>
 8005064:	2800      	cmp	r0, #0
 8005066:	bfab      	itete	ge
 8005068:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800506a:	89a3      	ldrhlt	r3, [r4, #12]
 800506c:	181b      	addge	r3, r3, r0
 800506e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005072:	bfac      	ite	ge
 8005074:	6563      	strge	r3, [r4, #84]	; 0x54
 8005076:	81a3      	strhlt	r3, [r4, #12]
 8005078:	bd10      	pop	{r4, pc}

0800507a <__swrite>:
 800507a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800507e:	461f      	mov	r7, r3
 8005080:	898b      	ldrh	r3, [r1, #12]
 8005082:	4605      	mov	r5, r0
 8005084:	05db      	lsls	r3, r3, #23
 8005086:	460c      	mov	r4, r1
 8005088:	4616      	mov	r6, r2
 800508a:	d505      	bpl.n	8005098 <__swrite+0x1e>
 800508c:	2302      	movs	r3, #2
 800508e:	2200      	movs	r2, #0
 8005090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005094:	f000 f840 	bl	8005118 <_lseek_r>
 8005098:	89a3      	ldrh	r3, [r4, #12]
 800509a:	4632      	mov	r2, r6
 800509c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050a0:	81a3      	strh	r3, [r4, #12]
 80050a2:	4628      	mov	r0, r5
 80050a4:	463b      	mov	r3, r7
 80050a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050ae:	f000 b857 	b.w	8005160 <_write_r>

080050b2 <__sseek>:
 80050b2:	b510      	push	{r4, lr}
 80050b4:	460c      	mov	r4, r1
 80050b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050ba:	f000 f82d 	bl	8005118 <_lseek_r>
 80050be:	1c43      	adds	r3, r0, #1
 80050c0:	89a3      	ldrh	r3, [r4, #12]
 80050c2:	bf15      	itete	ne
 80050c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80050c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80050ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80050ce:	81a3      	strheq	r3, [r4, #12]
 80050d0:	bf18      	it	ne
 80050d2:	81a3      	strhne	r3, [r4, #12]
 80050d4:	bd10      	pop	{r4, pc}

080050d6 <__sclose>:
 80050d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050da:	f000 b80d 	b.w	80050f8 <_close_r>

080050de <memset>:
 80050de:	4603      	mov	r3, r0
 80050e0:	4402      	add	r2, r0
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d100      	bne.n	80050e8 <memset+0xa>
 80050e6:	4770      	bx	lr
 80050e8:	f803 1b01 	strb.w	r1, [r3], #1
 80050ec:	e7f9      	b.n	80050e2 <memset+0x4>
	...

080050f0 <_localeconv_r>:
 80050f0:	4800      	ldr	r0, [pc, #0]	; (80050f4 <_localeconv_r+0x4>)
 80050f2:	4770      	bx	lr
 80050f4:	20000180 	.word	0x20000180

080050f8 <_close_r>:
 80050f8:	b538      	push	{r3, r4, r5, lr}
 80050fa:	2300      	movs	r3, #0
 80050fc:	4d05      	ldr	r5, [pc, #20]	; (8005114 <_close_r+0x1c>)
 80050fe:	4604      	mov	r4, r0
 8005100:	4608      	mov	r0, r1
 8005102:	602b      	str	r3, [r5, #0]
 8005104:	f7fc fccf 	bl	8001aa6 <_close>
 8005108:	1c43      	adds	r3, r0, #1
 800510a:	d102      	bne.n	8005112 <_close_r+0x1a>
 800510c:	682b      	ldr	r3, [r5, #0]
 800510e:	b103      	cbz	r3, 8005112 <_close_r+0x1a>
 8005110:	6023      	str	r3, [r4, #0]
 8005112:	bd38      	pop	{r3, r4, r5, pc}
 8005114:	200004fc 	.word	0x200004fc

08005118 <_lseek_r>:
 8005118:	b538      	push	{r3, r4, r5, lr}
 800511a:	4604      	mov	r4, r0
 800511c:	4608      	mov	r0, r1
 800511e:	4611      	mov	r1, r2
 8005120:	2200      	movs	r2, #0
 8005122:	4d05      	ldr	r5, [pc, #20]	; (8005138 <_lseek_r+0x20>)
 8005124:	602a      	str	r2, [r5, #0]
 8005126:	461a      	mov	r2, r3
 8005128:	f7fc fce1 	bl	8001aee <_lseek>
 800512c:	1c43      	adds	r3, r0, #1
 800512e:	d102      	bne.n	8005136 <_lseek_r+0x1e>
 8005130:	682b      	ldr	r3, [r5, #0]
 8005132:	b103      	cbz	r3, 8005136 <_lseek_r+0x1e>
 8005134:	6023      	str	r3, [r4, #0]
 8005136:	bd38      	pop	{r3, r4, r5, pc}
 8005138:	200004fc 	.word	0x200004fc

0800513c <_read_r>:
 800513c:	b538      	push	{r3, r4, r5, lr}
 800513e:	4604      	mov	r4, r0
 8005140:	4608      	mov	r0, r1
 8005142:	4611      	mov	r1, r2
 8005144:	2200      	movs	r2, #0
 8005146:	4d05      	ldr	r5, [pc, #20]	; (800515c <_read_r+0x20>)
 8005148:	602a      	str	r2, [r5, #0]
 800514a:	461a      	mov	r2, r3
 800514c:	f7fc fc72 	bl	8001a34 <_read>
 8005150:	1c43      	adds	r3, r0, #1
 8005152:	d102      	bne.n	800515a <_read_r+0x1e>
 8005154:	682b      	ldr	r3, [r5, #0]
 8005156:	b103      	cbz	r3, 800515a <_read_r+0x1e>
 8005158:	6023      	str	r3, [r4, #0]
 800515a:	bd38      	pop	{r3, r4, r5, pc}
 800515c:	200004fc 	.word	0x200004fc

08005160 <_write_r>:
 8005160:	b538      	push	{r3, r4, r5, lr}
 8005162:	4604      	mov	r4, r0
 8005164:	4608      	mov	r0, r1
 8005166:	4611      	mov	r1, r2
 8005168:	2200      	movs	r2, #0
 800516a:	4d05      	ldr	r5, [pc, #20]	; (8005180 <_write_r+0x20>)
 800516c:	602a      	str	r2, [r5, #0]
 800516e:	461a      	mov	r2, r3
 8005170:	f7fc fc7d 	bl	8001a6e <_write>
 8005174:	1c43      	adds	r3, r0, #1
 8005176:	d102      	bne.n	800517e <_write_r+0x1e>
 8005178:	682b      	ldr	r3, [r5, #0]
 800517a:	b103      	cbz	r3, 800517e <_write_r+0x1e>
 800517c:	6023      	str	r3, [r4, #0]
 800517e:	bd38      	pop	{r3, r4, r5, pc}
 8005180:	200004fc 	.word	0x200004fc

08005184 <__errno>:
 8005184:	4b01      	ldr	r3, [pc, #4]	; (800518c <__errno+0x8>)
 8005186:	6818      	ldr	r0, [r3, #0]
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	2000008c 	.word	0x2000008c

08005190 <__libc_init_array>:
 8005190:	b570      	push	{r4, r5, r6, lr}
 8005192:	2600      	movs	r6, #0
 8005194:	4d0c      	ldr	r5, [pc, #48]	; (80051c8 <__libc_init_array+0x38>)
 8005196:	4c0d      	ldr	r4, [pc, #52]	; (80051cc <__libc_init_array+0x3c>)
 8005198:	1b64      	subs	r4, r4, r5
 800519a:	10a4      	asrs	r4, r4, #2
 800519c:	42a6      	cmp	r6, r4
 800519e:	d109      	bne.n	80051b4 <__libc_init_array+0x24>
 80051a0:	f002 f888 	bl	80072b4 <_init>
 80051a4:	2600      	movs	r6, #0
 80051a6:	4d0a      	ldr	r5, [pc, #40]	; (80051d0 <__libc_init_array+0x40>)
 80051a8:	4c0a      	ldr	r4, [pc, #40]	; (80051d4 <__libc_init_array+0x44>)
 80051aa:	1b64      	subs	r4, r4, r5
 80051ac:	10a4      	asrs	r4, r4, #2
 80051ae:	42a6      	cmp	r6, r4
 80051b0:	d105      	bne.n	80051be <__libc_init_array+0x2e>
 80051b2:	bd70      	pop	{r4, r5, r6, pc}
 80051b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80051b8:	4798      	blx	r3
 80051ba:	3601      	adds	r6, #1
 80051bc:	e7ee      	b.n	800519c <__libc_init_array+0xc>
 80051be:	f855 3b04 	ldr.w	r3, [r5], #4
 80051c2:	4798      	blx	r3
 80051c4:	3601      	adds	r6, #1
 80051c6:	e7f2      	b.n	80051ae <__libc_init_array+0x1e>
 80051c8:	0800767c 	.word	0x0800767c
 80051cc:	0800767c 	.word	0x0800767c
 80051d0:	0800767c 	.word	0x0800767c
 80051d4:	08007680 	.word	0x08007680

080051d8 <__retarget_lock_acquire_recursive>:
 80051d8:	4770      	bx	lr

080051da <__retarget_lock_release_recursive>:
 80051da:	4770      	bx	lr

080051dc <memchr>:
 80051dc:	4603      	mov	r3, r0
 80051de:	b510      	push	{r4, lr}
 80051e0:	b2c9      	uxtb	r1, r1
 80051e2:	4402      	add	r2, r0
 80051e4:	4293      	cmp	r3, r2
 80051e6:	4618      	mov	r0, r3
 80051e8:	d101      	bne.n	80051ee <memchr+0x12>
 80051ea:	2000      	movs	r0, #0
 80051ec:	e003      	b.n	80051f6 <memchr+0x1a>
 80051ee:	7804      	ldrb	r4, [r0, #0]
 80051f0:	3301      	adds	r3, #1
 80051f2:	428c      	cmp	r4, r1
 80051f4:	d1f6      	bne.n	80051e4 <memchr+0x8>
 80051f6:	bd10      	pop	{r4, pc}

080051f8 <quorem>:
 80051f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051fc:	6903      	ldr	r3, [r0, #16]
 80051fe:	690c      	ldr	r4, [r1, #16]
 8005200:	4607      	mov	r7, r0
 8005202:	42a3      	cmp	r3, r4
 8005204:	db7f      	blt.n	8005306 <quorem+0x10e>
 8005206:	3c01      	subs	r4, #1
 8005208:	f100 0514 	add.w	r5, r0, #20
 800520c:	f101 0814 	add.w	r8, r1, #20
 8005210:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005214:	9301      	str	r3, [sp, #4]
 8005216:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800521a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800521e:	3301      	adds	r3, #1
 8005220:	429a      	cmp	r2, r3
 8005222:	fbb2 f6f3 	udiv	r6, r2, r3
 8005226:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800522a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800522e:	d331      	bcc.n	8005294 <quorem+0x9c>
 8005230:	f04f 0e00 	mov.w	lr, #0
 8005234:	4640      	mov	r0, r8
 8005236:	46ac      	mov	ip, r5
 8005238:	46f2      	mov	sl, lr
 800523a:	f850 2b04 	ldr.w	r2, [r0], #4
 800523e:	b293      	uxth	r3, r2
 8005240:	fb06 e303 	mla	r3, r6, r3, lr
 8005244:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005248:	0c1a      	lsrs	r2, r3, #16
 800524a:	b29b      	uxth	r3, r3
 800524c:	fb06 220e 	mla	r2, r6, lr, r2
 8005250:	ebaa 0303 	sub.w	r3, sl, r3
 8005254:	f8dc a000 	ldr.w	sl, [ip]
 8005258:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800525c:	fa1f fa8a 	uxth.w	sl, sl
 8005260:	4453      	add	r3, sl
 8005262:	f8dc a000 	ldr.w	sl, [ip]
 8005266:	b292      	uxth	r2, r2
 8005268:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800526c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005270:	b29b      	uxth	r3, r3
 8005272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005276:	4581      	cmp	r9, r0
 8005278:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800527c:	f84c 3b04 	str.w	r3, [ip], #4
 8005280:	d2db      	bcs.n	800523a <quorem+0x42>
 8005282:	f855 300b 	ldr.w	r3, [r5, fp]
 8005286:	b92b      	cbnz	r3, 8005294 <quorem+0x9c>
 8005288:	9b01      	ldr	r3, [sp, #4]
 800528a:	3b04      	subs	r3, #4
 800528c:	429d      	cmp	r5, r3
 800528e:	461a      	mov	r2, r3
 8005290:	d32d      	bcc.n	80052ee <quorem+0xf6>
 8005292:	613c      	str	r4, [r7, #16]
 8005294:	4638      	mov	r0, r7
 8005296:	f001 f995 	bl	80065c4 <__mcmp>
 800529a:	2800      	cmp	r0, #0
 800529c:	db23      	blt.n	80052e6 <quorem+0xee>
 800529e:	4629      	mov	r1, r5
 80052a0:	2000      	movs	r0, #0
 80052a2:	3601      	adds	r6, #1
 80052a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80052a8:	f8d1 c000 	ldr.w	ip, [r1]
 80052ac:	b293      	uxth	r3, r2
 80052ae:	1ac3      	subs	r3, r0, r3
 80052b0:	0c12      	lsrs	r2, r2, #16
 80052b2:	fa1f f08c 	uxth.w	r0, ip
 80052b6:	4403      	add	r3, r0
 80052b8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80052bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80052c6:	45c1      	cmp	r9, r8
 80052c8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80052cc:	f841 3b04 	str.w	r3, [r1], #4
 80052d0:	d2e8      	bcs.n	80052a4 <quorem+0xac>
 80052d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80052d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80052da:	b922      	cbnz	r2, 80052e6 <quorem+0xee>
 80052dc:	3b04      	subs	r3, #4
 80052de:	429d      	cmp	r5, r3
 80052e0:	461a      	mov	r2, r3
 80052e2:	d30a      	bcc.n	80052fa <quorem+0x102>
 80052e4:	613c      	str	r4, [r7, #16]
 80052e6:	4630      	mov	r0, r6
 80052e8:	b003      	add	sp, #12
 80052ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052ee:	6812      	ldr	r2, [r2, #0]
 80052f0:	3b04      	subs	r3, #4
 80052f2:	2a00      	cmp	r2, #0
 80052f4:	d1cd      	bne.n	8005292 <quorem+0x9a>
 80052f6:	3c01      	subs	r4, #1
 80052f8:	e7c8      	b.n	800528c <quorem+0x94>
 80052fa:	6812      	ldr	r2, [r2, #0]
 80052fc:	3b04      	subs	r3, #4
 80052fe:	2a00      	cmp	r2, #0
 8005300:	d1f0      	bne.n	80052e4 <quorem+0xec>
 8005302:	3c01      	subs	r4, #1
 8005304:	e7eb      	b.n	80052de <quorem+0xe6>
 8005306:	2000      	movs	r0, #0
 8005308:	e7ee      	b.n	80052e8 <quorem+0xf0>
 800530a:	0000      	movs	r0, r0
 800530c:	0000      	movs	r0, r0
	...

08005310 <_dtoa_r>:
 8005310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005314:	4616      	mov	r6, r2
 8005316:	461f      	mov	r7, r3
 8005318:	69c4      	ldr	r4, [r0, #28]
 800531a:	b099      	sub	sp, #100	; 0x64
 800531c:	4605      	mov	r5, r0
 800531e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005322:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005326:	b974      	cbnz	r4, 8005346 <_dtoa_r+0x36>
 8005328:	2010      	movs	r0, #16
 800532a:	f000 fe1d 	bl	8005f68 <malloc>
 800532e:	4602      	mov	r2, r0
 8005330:	61e8      	str	r0, [r5, #28]
 8005332:	b920      	cbnz	r0, 800533e <_dtoa_r+0x2e>
 8005334:	21ef      	movs	r1, #239	; 0xef
 8005336:	4bac      	ldr	r3, [pc, #688]	; (80055e8 <_dtoa_r+0x2d8>)
 8005338:	48ac      	ldr	r0, [pc, #688]	; (80055ec <_dtoa_r+0x2dc>)
 800533a:	f001 fc7b 	bl	8006c34 <__assert_func>
 800533e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005342:	6004      	str	r4, [r0, #0]
 8005344:	60c4      	str	r4, [r0, #12]
 8005346:	69eb      	ldr	r3, [r5, #28]
 8005348:	6819      	ldr	r1, [r3, #0]
 800534a:	b151      	cbz	r1, 8005362 <_dtoa_r+0x52>
 800534c:	685a      	ldr	r2, [r3, #4]
 800534e:	2301      	movs	r3, #1
 8005350:	4093      	lsls	r3, r2
 8005352:	604a      	str	r2, [r1, #4]
 8005354:	608b      	str	r3, [r1, #8]
 8005356:	4628      	mov	r0, r5
 8005358:	f000 fefa 	bl	8006150 <_Bfree>
 800535c:	2200      	movs	r2, #0
 800535e:	69eb      	ldr	r3, [r5, #28]
 8005360:	601a      	str	r2, [r3, #0]
 8005362:	1e3b      	subs	r3, r7, #0
 8005364:	bfaf      	iteee	ge
 8005366:	2300      	movge	r3, #0
 8005368:	2201      	movlt	r2, #1
 800536a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800536e:	9305      	strlt	r3, [sp, #20]
 8005370:	bfa8      	it	ge
 8005372:	f8c8 3000 	strge.w	r3, [r8]
 8005376:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800537a:	4b9d      	ldr	r3, [pc, #628]	; (80055f0 <_dtoa_r+0x2e0>)
 800537c:	bfb8      	it	lt
 800537e:	f8c8 2000 	strlt.w	r2, [r8]
 8005382:	ea33 0309 	bics.w	r3, r3, r9
 8005386:	d119      	bne.n	80053bc <_dtoa_r+0xac>
 8005388:	f242 730f 	movw	r3, #9999	; 0x270f
 800538c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800538e:	6013      	str	r3, [r2, #0]
 8005390:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005394:	4333      	orrs	r3, r6
 8005396:	f000 8589 	beq.w	8005eac <_dtoa_r+0xb9c>
 800539a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800539c:	b953      	cbnz	r3, 80053b4 <_dtoa_r+0xa4>
 800539e:	4b95      	ldr	r3, [pc, #596]	; (80055f4 <_dtoa_r+0x2e4>)
 80053a0:	e023      	b.n	80053ea <_dtoa_r+0xda>
 80053a2:	4b95      	ldr	r3, [pc, #596]	; (80055f8 <_dtoa_r+0x2e8>)
 80053a4:	9303      	str	r3, [sp, #12]
 80053a6:	3308      	adds	r3, #8
 80053a8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80053aa:	6013      	str	r3, [r2, #0]
 80053ac:	9803      	ldr	r0, [sp, #12]
 80053ae:	b019      	add	sp, #100	; 0x64
 80053b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053b4:	4b8f      	ldr	r3, [pc, #572]	; (80055f4 <_dtoa_r+0x2e4>)
 80053b6:	9303      	str	r3, [sp, #12]
 80053b8:	3303      	adds	r3, #3
 80053ba:	e7f5      	b.n	80053a8 <_dtoa_r+0x98>
 80053bc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80053c0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80053c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80053c8:	2200      	movs	r2, #0
 80053ca:	2300      	movs	r3, #0
 80053cc:	f7fb faec 	bl	80009a8 <__aeabi_dcmpeq>
 80053d0:	4680      	mov	r8, r0
 80053d2:	b160      	cbz	r0, 80053ee <_dtoa_r+0xde>
 80053d4:	2301      	movs	r3, #1
 80053d6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80053d8:	6013      	str	r3, [r2, #0]
 80053da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f000 8562 	beq.w	8005ea6 <_dtoa_r+0xb96>
 80053e2:	4b86      	ldr	r3, [pc, #536]	; (80055fc <_dtoa_r+0x2ec>)
 80053e4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80053e6:	6013      	str	r3, [r2, #0]
 80053e8:	3b01      	subs	r3, #1
 80053ea:	9303      	str	r3, [sp, #12]
 80053ec:	e7de      	b.n	80053ac <_dtoa_r+0x9c>
 80053ee:	ab16      	add	r3, sp, #88	; 0x58
 80053f0:	9301      	str	r3, [sp, #4]
 80053f2:	ab17      	add	r3, sp, #92	; 0x5c
 80053f4:	9300      	str	r3, [sp, #0]
 80053f6:	4628      	mov	r0, r5
 80053f8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80053fc:	f001 f98a 	bl	8006714 <__d2b>
 8005400:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005404:	4682      	mov	sl, r0
 8005406:	2c00      	cmp	r4, #0
 8005408:	d07e      	beq.n	8005508 <_dtoa_r+0x1f8>
 800540a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800540e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005410:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005414:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005418:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800541c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005420:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005424:	4619      	mov	r1, r3
 8005426:	2200      	movs	r2, #0
 8005428:	4b75      	ldr	r3, [pc, #468]	; (8005600 <_dtoa_r+0x2f0>)
 800542a:	f7fa fe9d 	bl	8000168 <__aeabi_dsub>
 800542e:	a368      	add	r3, pc, #416	; (adr r3, 80055d0 <_dtoa_r+0x2c0>)
 8005430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005434:	f7fb f850 	bl	80004d8 <__aeabi_dmul>
 8005438:	a367      	add	r3, pc, #412	; (adr r3, 80055d8 <_dtoa_r+0x2c8>)
 800543a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543e:	f7fa fe95 	bl	800016c <__adddf3>
 8005442:	4606      	mov	r6, r0
 8005444:	4620      	mov	r0, r4
 8005446:	460f      	mov	r7, r1
 8005448:	f7fa ffdc 	bl	8000404 <__aeabi_i2d>
 800544c:	a364      	add	r3, pc, #400	; (adr r3, 80055e0 <_dtoa_r+0x2d0>)
 800544e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005452:	f7fb f841 	bl	80004d8 <__aeabi_dmul>
 8005456:	4602      	mov	r2, r0
 8005458:	460b      	mov	r3, r1
 800545a:	4630      	mov	r0, r6
 800545c:	4639      	mov	r1, r7
 800545e:	f7fa fe85 	bl	800016c <__adddf3>
 8005462:	4606      	mov	r6, r0
 8005464:	460f      	mov	r7, r1
 8005466:	f7fb fae7 	bl	8000a38 <__aeabi_d2iz>
 800546a:	2200      	movs	r2, #0
 800546c:	4683      	mov	fp, r0
 800546e:	2300      	movs	r3, #0
 8005470:	4630      	mov	r0, r6
 8005472:	4639      	mov	r1, r7
 8005474:	f7fb faa2 	bl	80009bc <__aeabi_dcmplt>
 8005478:	b148      	cbz	r0, 800548e <_dtoa_r+0x17e>
 800547a:	4658      	mov	r0, fp
 800547c:	f7fa ffc2 	bl	8000404 <__aeabi_i2d>
 8005480:	4632      	mov	r2, r6
 8005482:	463b      	mov	r3, r7
 8005484:	f7fb fa90 	bl	80009a8 <__aeabi_dcmpeq>
 8005488:	b908      	cbnz	r0, 800548e <_dtoa_r+0x17e>
 800548a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800548e:	f1bb 0f16 	cmp.w	fp, #22
 8005492:	d857      	bhi.n	8005544 <_dtoa_r+0x234>
 8005494:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005498:	4b5a      	ldr	r3, [pc, #360]	; (8005604 <_dtoa_r+0x2f4>)
 800549a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800549e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a2:	f7fb fa8b 	bl	80009bc <__aeabi_dcmplt>
 80054a6:	2800      	cmp	r0, #0
 80054a8:	d04e      	beq.n	8005548 <_dtoa_r+0x238>
 80054aa:	2300      	movs	r3, #0
 80054ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 80054b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80054b2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80054b4:	1b1b      	subs	r3, r3, r4
 80054b6:	1e5a      	subs	r2, r3, #1
 80054b8:	bf46      	itte	mi
 80054ba:	f1c3 0901 	rsbmi	r9, r3, #1
 80054be:	2300      	movmi	r3, #0
 80054c0:	f04f 0900 	movpl.w	r9, #0
 80054c4:	9209      	str	r2, [sp, #36]	; 0x24
 80054c6:	bf48      	it	mi
 80054c8:	9309      	strmi	r3, [sp, #36]	; 0x24
 80054ca:	f1bb 0f00 	cmp.w	fp, #0
 80054ce:	db3d      	blt.n	800554c <_dtoa_r+0x23c>
 80054d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054d2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80054d6:	445b      	add	r3, fp
 80054d8:	9309      	str	r3, [sp, #36]	; 0x24
 80054da:	2300      	movs	r3, #0
 80054dc:	930a      	str	r3, [sp, #40]	; 0x28
 80054de:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80054e0:	2b09      	cmp	r3, #9
 80054e2:	d867      	bhi.n	80055b4 <_dtoa_r+0x2a4>
 80054e4:	2b05      	cmp	r3, #5
 80054e6:	bfc4      	itt	gt
 80054e8:	3b04      	subgt	r3, #4
 80054ea:	9322      	strgt	r3, [sp, #136]	; 0x88
 80054ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80054ee:	bfc8      	it	gt
 80054f0:	2400      	movgt	r4, #0
 80054f2:	f1a3 0302 	sub.w	r3, r3, #2
 80054f6:	bfd8      	it	le
 80054f8:	2401      	movle	r4, #1
 80054fa:	2b03      	cmp	r3, #3
 80054fc:	f200 8086 	bhi.w	800560c <_dtoa_r+0x2fc>
 8005500:	e8df f003 	tbb	[pc, r3]
 8005504:	5637392c 	.word	0x5637392c
 8005508:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800550c:	441c      	add	r4, r3
 800550e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005512:	2b20      	cmp	r3, #32
 8005514:	bfc1      	itttt	gt
 8005516:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800551a:	fa09 f903 	lslgt.w	r9, r9, r3
 800551e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8005522:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005526:	bfd6      	itet	le
 8005528:	f1c3 0320 	rsble	r3, r3, #32
 800552c:	ea49 0003 	orrgt.w	r0, r9, r3
 8005530:	fa06 f003 	lslle.w	r0, r6, r3
 8005534:	f7fa ff56 	bl	80003e4 <__aeabi_ui2d>
 8005538:	2201      	movs	r2, #1
 800553a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800553e:	3c01      	subs	r4, #1
 8005540:	9213      	str	r2, [sp, #76]	; 0x4c
 8005542:	e76f      	b.n	8005424 <_dtoa_r+0x114>
 8005544:	2301      	movs	r3, #1
 8005546:	e7b3      	b.n	80054b0 <_dtoa_r+0x1a0>
 8005548:	900f      	str	r0, [sp, #60]	; 0x3c
 800554a:	e7b2      	b.n	80054b2 <_dtoa_r+0x1a2>
 800554c:	f1cb 0300 	rsb	r3, fp, #0
 8005550:	930a      	str	r3, [sp, #40]	; 0x28
 8005552:	2300      	movs	r3, #0
 8005554:	eba9 090b 	sub.w	r9, r9, fp
 8005558:	930e      	str	r3, [sp, #56]	; 0x38
 800555a:	e7c0      	b.n	80054de <_dtoa_r+0x1ce>
 800555c:	2300      	movs	r3, #0
 800555e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005560:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005562:	2b00      	cmp	r3, #0
 8005564:	dc55      	bgt.n	8005612 <_dtoa_r+0x302>
 8005566:	2301      	movs	r3, #1
 8005568:	461a      	mov	r2, r3
 800556a:	9306      	str	r3, [sp, #24]
 800556c:	9308      	str	r3, [sp, #32]
 800556e:	9223      	str	r2, [sp, #140]	; 0x8c
 8005570:	e00b      	b.n	800558a <_dtoa_r+0x27a>
 8005572:	2301      	movs	r3, #1
 8005574:	e7f3      	b.n	800555e <_dtoa_r+0x24e>
 8005576:	2300      	movs	r3, #0
 8005578:	930b      	str	r3, [sp, #44]	; 0x2c
 800557a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800557c:	445b      	add	r3, fp
 800557e:	9306      	str	r3, [sp, #24]
 8005580:	3301      	adds	r3, #1
 8005582:	2b01      	cmp	r3, #1
 8005584:	9308      	str	r3, [sp, #32]
 8005586:	bfb8      	it	lt
 8005588:	2301      	movlt	r3, #1
 800558a:	2100      	movs	r1, #0
 800558c:	2204      	movs	r2, #4
 800558e:	69e8      	ldr	r0, [r5, #28]
 8005590:	f102 0614 	add.w	r6, r2, #20
 8005594:	429e      	cmp	r6, r3
 8005596:	d940      	bls.n	800561a <_dtoa_r+0x30a>
 8005598:	6041      	str	r1, [r0, #4]
 800559a:	4628      	mov	r0, r5
 800559c:	f000 fd98 	bl	80060d0 <_Balloc>
 80055a0:	9003      	str	r0, [sp, #12]
 80055a2:	2800      	cmp	r0, #0
 80055a4:	d13c      	bne.n	8005620 <_dtoa_r+0x310>
 80055a6:	4602      	mov	r2, r0
 80055a8:	f240 11af 	movw	r1, #431	; 0x1af
 80055ac:	4b16      	ldr	r3, [pc, #88]	; (8005608 <_dtoa_r+0x2f8>)
 80055ae:	e6c3      	b.n	8005338 <_dtoa_r+0x28>
 80055b0:	2301      	movs	r3, #1
 80055b2:	e7e1      	b.n	8005578 <_dtoa_r+0x268>
 80055b4:	2401      	movs	r4, #1
 80055b6:	2300      	movs	r3, #0
 80055b8:	940b      	str	r4, [sp, #44]	; 0x2c
 80055ba:	9322      	str	r3, [sp, #136]	; 0x88
 80055bc:	f04f 33ff 	mov.w	r3, #4294967295
 80055c0:	2200      	movs	r2, #0
 80055c2:	9306      	str	r3, [sp, #24]
 80055c4:	9308      	str	r3, [sp, #32]
 80055c6:	2312      	movs	r3, #18
 80055c8:	e7d1      	b.n	800556e <_dtoa_r+0x25e>
 80055ca:	bf00      	nop
 80055cc:	f3af 8000 	nop.w
 80055d0:	636f4361 	.word	0x636f4361
 80055d4:	3fd287a7 	.word	0x3fd287a7
 80055d8:	8b60c8b3 	.word	0x8b60c8b3
 80055dc:	3fc68a28 	.word	0x3fc68a28
 80055e0:	509f79fb 	.word	0x509f79fb
 80055e4:	3fd34413 	.word	0x3fd34413
 80055e8:	0800734f 	.word	0x0800734f
 80055ec:	08007366 	.word	0x08007366
 80055f0:	7ff00000 	.word	0x7ff00000
 80055f4:	0800734b 	.word	0x0800734b
 80055f8:	08007342 	.word	0x08007342
 80055fc:	0800731f 	.word	0x0800731f
 8005600:	3ff80000 	.word	0x3ff80000
 8005604:	08007450 	.word	0x08007450
 8005608:	080073be 	.word	0x080073be
 800560c:	2301      	movs	r3, #1
 800560e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005610:	e7d4      	b.n	80055bc <_dtoa_r+0x2ac>
 8005612:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005614:	9306      	str	r3, [sp, #24]
 8005616:	9308      	str	r3, [sp, #32]
 8005618:	e7b7      	b.n	800558a <_dtoa_r+0x27a>
 800561a:	3101      	adds	r1, #1
 800561c:	0052      	lsls	r2, r2, #1
 800561e:	e7b7      	b.n	8005590 <_dtoa_r+0x280>
 8005620:	69eb      	ldr	r3, [r5, #28]
 8005622:	9a03      	ldr	r2, [sp, #12]
 8005624:	601a      	str	r2, [r3, #0]
 8005626:	9b08      	ldr	r3, [sp, #32]
 8005628:	2b0e      	cmp	r3, #14
 800562a:	f200 80a8 	bhi.w	800577e <_dtoa_r+0x46e>
 800562e:	2c00      	cmp	r4, #0
 8005630:	f000 80a5 	beq.w	800577e <_dtoa_r+0x46e>
 8005634:	f1bb 0f00 	cmp.w	fp, #0
 8005638:	dd34      	ble.n	80056a4 <_dtoa_r+0x394>
 800563a:	4b9a      	ldr	r3, [pc, #616]	; (80058a4 <_dtoa_r+0x594>)
 800563c:	f00b 020f 	and.w	r2, fp, #15
 8005640:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005644:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005648:	e9d3 3400 	ldrd	r3, r4, [r3]
 800564c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005650:	ea4f 142b 	mov.w	r4, fp, asr #4
 8005654:	d016      	beq.n	8005684 <_dtoa_r+0x374>
 8005656:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800565a:	4b93      	ldr	r3, [pc, #588]	; (80058a8 <_dtoa_r+0x598>)
 800565c:	2703      	movs	r7, #3
 800565e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005662:	f7fb f863 	bl	800072c <__aeabi_ddiv>
 8005666:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800566a:	f004 040f 	and.w	r4, r4, #15
 800566e:	4e8e      	ldr	r6, [pc, #568]	; (80058a8 <_dtoa_r+0x598>)
 8005670:	b954      	cbnz	r4, 8005688 <_dtoa_r+0x378>
 8005672:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005676:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800567a:	f7fb f857 	bl	800072c <__aeabi_ddiv>
 800567e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005682:	e029      	b.n	80056d8 <_dtoa_r+0x3c8>
 8005684:	2702      	movs	r7, #2
 8005686:	e7f2      	b.n	800566e <_dtoa_r+0x35e>
 8005688:	07e1      	lsls	r1, r4, #31
 800568a:	d508      	bpl.n	800569e <_dtoa_r+0x38e>
 800568c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005690:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005694:	f7fa ff20 	bl	80004d8 <__aeabi_dmul>
 8005698:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800569c:	3701      	adds	r7, #1
 800569e:	1064      	asrs	r4, r4, #1
 80056a0:	3608      	adds	r6, #8
 80056a2:	e7e5      	b.n	8005670 <_dtoa_r+0x360>
 80056a4:	f000 80a5 	beq.w	80057f2 <_dtoa_r+0x4e2>
 80056a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80056ac:	f1cb 0400 	rsb	r4, fp, #0
 80056b0:	4b7c      	ldr	r3, [pc, #496]	; (80058a4 <_dtoa_r+0x594>)
 80056b2:	f004 020f 	and.w	r2, r4, #15
 80056b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056be:	f7fa ff0b 	bl	80004d8 <__aeabi_dmul>
 80056c2:	2702      	movs	r7, #2
 80056c4:	2300      	movs	r3, #0
 80056c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80056ca:	4e77      	ldr	r6, [pc, #476]	; (80058a8 <_dtoa_r+0x598>)
 80056cc:	1124      	asrs	r4, r4, #4
 80056ce:	2c00      	cmp	r4, #0
 80056d0:	f040 8084 	bne.w	80057dc <_dtoa_r+0x4cc>
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d1d2      	bne.n	800567e <_dtoa_r+0x36e>
 80056d8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80056dc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80056e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	f000 8087 	beq.w	80057f6 <_dtoa_r+0x4e6>
 80056e8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80056ec:	2200      	movs	r2, #0
 80056ee:	4b6f      	ldr	r3, [pc, #444]	; (80058ac <_dtoa_r+0x59c>)
 80056f0:	f7fb f964 	bl	80009bc <__aeabi_dcmplt>
 80056f4:	2800      	cmp	r0, #0
 80056f6:	d07e      	beq.n	80057f6 <_dtoa_r+0x4e6>
 80056f8:	9b08      	ldr	r3, [sp, #32]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d07b      	beq.n	80057f6 <_dtoa_r+0x4e6>
 80056fe:	9b06      	ldr	r3, [sp, #24]
 8005700:	2b00      	cmp	r3, #0
 8005702:	dd38      	ble.n	8005776 <_dtoa_r+0x466>
 8005704:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005708:	2200      	movs	r2, #0
 800570a:	4b69      	ldr	r3, [pc, #420]	; (80058b0 <_dtoa_r+0x5a0>)
 800570c:	f7fa fee4 	bl	80004d8 <__aeabi_dmul>
 8005710:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005714:	9c06      	ldr	r4, [sp, #24]
 8005716:	f10b 38ff 	add.w	r8, fp, #4294967295
 800571a:	3701      	adds	r7, #1
 800571c:	4638      	mov	r0, r7
 800571e:	f7fa fe71 	bl	8000404 <__aeabi_i2d>
 8005722:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005726:	f7fa fed7 	bl	80004d8 <__aeabi_dmul>
 800572a:	2200      	movs	r2, #0
 800572c:	4b61      	ldr	r3, [pc, #388]	; (80058b4 <_dtoa_r+0x5a4>)
 800572e:	f7fa fd1d 	bl	800016c <__adddf3>
 8005732:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005736:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800573a:	9611      	str	r6, [sp, #68]	; 0x44
 800573c:	2c00      	cmp	r4, #0
 800573e:	d15d      	bne.n	80057fc <_dtoa_r+0x4ec>
 8005740:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005744:	2200      	movs	r2, #0
 8005746:	4b5c      	ldr	r3, [pc, #368]	; (80058b8 <_dtoa_r+0x5a8>)
 8005748:	f7fa fd0e 	bl	8000168 <__aeabi_dsub>
 800574c:	4602      	mov	r2, r0
 800574e:	460b      	mov	r3, r1
 8005750:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005754:	4633      	mov	r3, r6
 8005756:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005758:	f7fb f94e 	bl	80009f8 <__aeabi_dcmpgt>
 800575c:	2800      	cmp	r0, #0
 800575e:	f040 8295 	bne.w	8005c8c <_dtoa_r+0x97c>
 8005762:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005766:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005768:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800576c:	f7fb f926 	bl	80009bc <__aeabi_dcmplt>
 8005770:	2800      	cmp	r0, #0
 8005772:	f040 8289 	bne.w	8005c88 <_dtoa_r+0x978>
 8005776:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800577a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800577e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005780:	2b00      	cmp	r3, #0
 8005782:	f2c0 8151 	blt.w	8005a28 <_dtoa_r+0x718>
 8005786:	f1bb 0f0e 	cmp.w	fp, #14
 800578a:	f300 814d 	bgt.w	8005a28 <_dtoa_r+0x718>
 800578e:	4b45      	ldr	r3, [pc, #276]	; (80058a4 <_dtoa_r+0x594>)
 8005790:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005794:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005798:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800579c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800579e:	2b00      	cmp	r3, #0
 80057a0:	f280 80da 	bge.w	8005958 <_dtoa_r+0x648>
 80057a4:	9b08      	ldr	r3, [sp, #32]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	f300 80d6 	bgt.w	8005958 <_dtoa_r+0x648>
 80057ac:	f040 826b 	bne.w	8005c86 <_dtoa_r+0x976>
 80057b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057b4:	2200      	movs	r2, #0
 80057b6:	4b40      	ldr	r3, [pc, #256]	; (80058b8 <_dtoa_r+0x5a8>)
 80057b8:	f7fa fe8e 	bl	80004d8 <__aeabi_dmul>
 80057bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057c0:	f7fb f910 	bl	80009e4 <__aeabi_dcmpge>
 80057c4:	9c08      	ldr	r4, [sp, #32]
 80057c6:	4626      	mov	r6, r4
 80057c8:	2800      	cmp	r0, #0
 80057ca:	f040 8241 	bne.w	8005c50 <_dtoa_r+0x940>
 80057ce:	2331      	movs	r3, #49	; 0x31
 80057d0:	9f03      	ldr	r7, [sp, #12]
 80057d2:	f10b 0b01 	add.w	fp, fp, #1
 80057d6:	f807 3b01 	strb.w	r3, [r7], #1
 80057da:	e23d      	b.n	8005c58 <_dtoa_r+0x948>
 80057dc:	07e2      	lsls	r2, r4, #31
 80057de:	d505      	bpl.n	80057ec <_dtoa_r+0x4dc>
 80057e0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80057e4:	f7fa fe78 	bl	80004d8 <__aeabi_dmul>
 80057e8:	2301      	movs	r3, #1
 80057ea:	3701      	adds	r7, #1
 80057ec:	1064      	asrs	r4, r4, #1
 80057ee:	3608      	adds	r6, #8
 80057f0:	e76d      	b.n	80056ce <_dtoa_r+0x3be>
 80057f2:	2702      	movs	r7, #2
 80057f4:	e770      	b.n	80056d8 <_dtoa_r+0x3c8>
 80057f6:	46d8      	mov	r8, fp
 80057f8:	9c08      	ldr	r4, [sp, #32]
 80057fa:	e78f      	b.n	800571c <_dtoa_r+0x40c>
 80057fc:	9903      	ldr	r1, [sp, #12]
 80057fe:	4b29      	ldr	r3, [pc, #164]	; (80058a4 <_dtoa_r+0x594>)
 8005800:	4421      	add	r1, r4
 8005802:	9112      	str	r1, [sp, #72]	; 0x48
 8005804:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005806:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800580a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800580e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005812:	2900      	cmp	r1, #0
 8005814:	d054      	beq.n	80058c0 <_dtoa_r+0x5b0>
 8005816:	2000      	movs	r0, #0
 8005818:	4928      	ldr	r1, [pc, #160]	; (80058bc <_dtoa_r+0x5ac>)
 800581a:	f7fa ff87 	bl	800072c <__aeabi_ddiv>
 800581e:	463b      	mov	r3, r7
 8005820:	4632      	mov	r2, r6
 8005822:	f7fa fca1 	bl	8000168 <__aeabi_dsub>
 8005826:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800582a:	9f03      	ldr	r7, [sp, #12]
 800582c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005830:	f7fb f902 	bl	8000a38 <__aeabi_d2iz>
 8005834:	4604      	mov	r4, r0
 8005836:	f7fa fde5 	bl	8000404 <__aeabi_i2d>
 800583a:	4602      	mov	r2, r0
 800583c:	460b      	mov	r3, r1
 800583e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005842:	f7fa fc91 	bl	8000168 <__aeabi_dsub>
 8005846:	4602      	mov	r2, r0
 8005848:	460b      	mov	r3, r1
 800584a:	3430      	adds	r4, #48	; 0x30
 800584c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005850:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005854:	f807 4b01 	strb.w	r4, [r7], #1
 8005858:	f7fb f8b0 	bl	80009bc <__aeabi_dcmplt>
 800585c:	2800      	cmp	r0, #0
 800585e:	d173      	bne.n	8005948 <_dtoa_r+0x638>
 8005860:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005864:	2000      	movs	r0, #0
 8005866:	4911      	ldr	r1, [pc, #68]	; (80058ac <_dtoa_r+0x59c>)
 8005868:	f7fa fc7e 	bl	8000168 <__aeabi_dsub>
 800586c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005870:	f7fb f8a4 	bl	80009bc <__aeabi_dcmplt>
 8005874:	2800      	cmp	r0, #0
 8005876:	f040 80b6 	bne.w	80059e6 <_dtoa_r+0x6d6>
 800587a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800587c:	429f      	cmp	r7, r3
 800587e:	f43f af7a 	beq.w	8005776 <_dtoa_r+0x466>
 8005882:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005886:	2200      	movs	r2, #0
 8005888:	4b09      	ldr	r3, [pc, #36]	; (80058b0 <_dtoa_r+0x5a0>)
 800588a:	f7fa fe25 	bl	80004d8 <__aeabi_dmul>
 800588e:	2200      	movs	r2, #0
 8005890:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005894:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005898:	4b05      	ldr	r3, [pc, #20]	; (80058b0 <_dtoa_r+0x5a0>)
 800589a:	f7fa fe1d 	bl	80004d8 <__aeabi_dmul>
 800589e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80058a2:	e7c3      	b.n	800582c <_dtoa_r+0x51c>
 80058a4:	08007450 	.word	0x08007450
 80058a8:	08007428 	.word	0x08007428
 80058ac:	3ff00000 	.word	0x3ff00000
 80058b0:	40240000 	.word	0x40240000
 80058b4:	401c0000 	.word	0x401c0000
 80058b8:	40140000 	.word	0x40140000
 80058bc:	3fe00000 	.word	0x3fe00000
 80058c0:	4630      	mov	r0, r6
 80058c2:	4639      	mov	r1, r7
 80058c4:	f7fa fe08 	bl	80004d8 <__aeabi_dmul>
 80058c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80058ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80058ce:	9c03      	ldr	r4, [sp, #12]
 80058d0:	9314      	str	r3, [sp, #80]	; 0x50
 80058d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058d6:	f7fb f8af 	bl	8000a38 <__aeabi_d2iz>
 80058da:	9015      	str	r0, [sp, #84]	; 0x54
 80058dc:	f7fa fd92 	bl	8000404 <__aeabi_i2d>
 80058e0:	4602      	mov	r2, r0
 80058e2:	460b      	mov	r3, r1
 80058e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058e8:	f7fa fc3e 	bl	8000168 <__aeabi_dsub>
 80058ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80058ee:	4606      	mov	r6, r0
 80058f0:	3330      	adds	r3, #48	; 0x30
 80058f2:	f804 3b01 	strb.w	r3, [r4], #1
 80058f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80058f8:	460f      	mov	r7, r1
 80058fa:	429c      	cmp	r4, r3
 80058fc:	f04f 0200 	mov.w	r2, #0
 8005900:	d124      	bne.n	800594c <_dtoa_r+0x63c>
 8005902:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005906:	4baf      	ldr	r3, [pc, #700]	; (8005bc4 <_dtoa_r+0x8b4>)
 8005908:	f7fa fc30 	bl	800016c <__adddf3>
 800590c:	4602      	mov	r2, r0
 800590e:	460b      	mov	r3, r1
 8005910:	4630      	mov	r0, r6
 8005912:	4639      	mov	r1, r7
 8005914:	f7fb f870 	bl	80009f8 <__aeabi_dcmpgt>
 8005918:	2800      	cmp	r0, #0
 800591a:	d163      	bne.n	80059e4 <_dtoa_r+0x6d4>
 800591c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005920:	2000      	movs	r0, #0
 8005922:	49a8      	ldr	r1, [pc, #672]	; (8005bc4 <_dtoa_r+0x8b4>)
 8005924:	f7fa fc20 	bl	8000168 <__aeabi_dsub>
 8005928:	4602      	mov	r2, r0
 800592a:	460b      	mov	r3, r1
 800592c:	4630      	mov	r0, r6
 800592e:	4639      	mov	r1, r7
 8005930:	f7fb f844 	bl	80009bc <__aeabi_dcmplt>
 8005934:	2800      	cmp	r0, #0
 8005936:	f43f af1e 	beq.w	8005776 <_dtoa_r+0x466>
 800593a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800593c:	1e7b      	subs	r3, r7, #1
 800593e:	9314      	str	r3, [sp, #80]	; 0x50
 8005940:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005944:	2b30      	cmp	r3, #48	; 0x30
 8005946:	d0f8      	beq.n	800593a <_dtoa_r+0x62a>
 8005948:	46c3      	mov	fp, r8
 800594a:	e03b      	b.n	80059c4 <_dtoa_r+0x6b4>
 800594c:	4b9e      	ldr	r3, [pc, #632]	; (8005bc8 <_dtoa_r+0x8b8>)
 800594e:	f7fa fdc3 	bl	80004d8 <__aeabi_dmul>
 8005952:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005956:	e7bc      	b.n	80058d2 <_dtoa_r+0x5c2>
 8005958:	9f03      	ldr	r7, [sp, #12]
 800595a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800595e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005962:	4640      	mov	r0, r8
 8005964:	4649      	mov	r1, r9
 8005966:	f7fa fee1 	bl	800072c <__aeabi_ddiv>
 800596a:	f7fb f865 	bl	8000a38 <__aeabi_d2iz>
 800596e:	4604      	mov	r4, r0
 8005970:	f7fa fd48 	bl	8000404 <__aeabi_i2d>
 8005974:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005978:	f7fa fdae 	bl	80004d8 <__aeabi_dmul>
 800597c:	4602      	mov	r2, r0
 800597e:	460b      	mov	r3, r1
 8005980:	4640      	mov	r0, r8
 8005982:	4649      	mov	r1, r9
 8005984:	f7fa fbf0 	bl	8000168 <__aeabi_dsub>
 8005988:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800598c:	f807 6b01 	strb.w	r6, [r7], #1
 8005990:	9e03      	ldr	r6, [sp, #12]
 8005992:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005996:	1bbe      	subs	r6, r7, r6
 8005998:	45b4      	cmp	ip, r6
 800599a:	4602      	mov	r2, r0
 800599c:	460b      	mov	r3, r1
 800599e:	d136      	bne.n	8005a0e <_dtoa_r+0x6fe>
 80059a0:	f7fa fbe4 	bl	800016c <__adddf3>
 80059a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80059a8:	4680      	mov	r8, r0
 80059aa:	4689      	mov	r9, r1
 80059ac:	f7fb f824 	bl	80009f8 <__aeabi_dcmpgt>
 80059b0:	bb58      	cbnz	r0, 8005a0a <_dtoa_r+0x6fa>
 80059b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80059b6:	4640      	mov	r0, r8
 80059b8:	4649      	mov	r1, r9
 80059ba:	f7fa fff5 	bl	80009a8 <__aeabi_dcmpeq>
 80059be:	b108      	cbz	r0, 80059c4 <_dtoa_r+0x6b4>
 80059c0:	07e3      	lsls	r3, r4, #31
 80059c2:	d422      	bmi.n	8005a0a <_dtoa_r+0x6fa>
 80059c4:	4651      	mov	r1, sl
 80059c6:	4628      	mov	r0, r5
 80059c8:	f000 fbc2 	bl	8006150 <_Bfree>
 80059cc:	2300      	movs	r3, #0
 80059ce:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80059d0:	703b      	strb	r3, [r7, #0]
 80059d2:	f10b 0301 	add.w	r3, fp, #1
 80059d6:	6013      	str	r3, [r2, #0]
 80059d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80059da:	2b00      	cmp	r3, #0
 80059dc:	f43f ace6 	beq.w	80053ac <_dtoa_r+0x9c>
 80059e0:	601f      	str	r7, [r3, #0]
 80059e2:	e4e3      	b.n	80053ac <_dtoa_r+0x9c>
 80059e4:	4627      	mov	r7, r4
 80059e6:	463b      	mov	r3, r7
 80059e8:	461f      	mov	r7, r3
 80059ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80059ee:	2a39      	cmp	r2, #57	; 0x39
 80059f0:	d107      	bne.n	8005a02 <_dtoa_r+0x6f2>
 80059f2:	9a03      	ldr	r2, [sp, #12]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d1f7      	bne.n	80059e8 <_dtoa_r+0x6d8>
 80059f8:	2230      	movs	r2, #48	; 0x30
 80059fa:	9903      	ldr	r1, [sp, #12]
 80059fc:	f108 0801 	add.w	r8, r8, #1
 8005a00:	700a      	strb	r2, [r1, #0]
 8005a02:	781a      	ldrb	r2, [r3, #0]
 8005a04:	3201      	adds	r2, #1
 8005a06:	701a      	strb	r2, [r3, #0]
 8005a08:	e79e      	b.n	8005948 <_dtoa_r+0x638>
 8005a0a:	46d8      	mov	r8, fp
 8005a0c:	e7eb      	b.n	80059e6 <_dtoa_r+0x6d6>
 8005a0e:	2200      	movs	r2, #0
 8005a10:	4b6d      	ldr	r3, [pc, #436]	; (8005bc8 <_dtoa_r+0x8b8>)
 8005a12:	f7fa fd61 	bl	80004d8 <__aeabi_dmul>
 8005a16:	2200      	movs	r2, #0
 8005a18:	2300      	movs	r3, #0
 8005a1a:	4680      	mov	r8, r0
 8005a1c:	4689      	mov	r9, r1
 8005a1e:	f7fa ffc3 	bl	80009a8 <__aeabi_dcmpeq>
 8005a22:	2800      	cmp	r0, #0
 8005a24:	d09b      	beq.n	800595e <_dtoa_r+0x64e>
 8005a26:	e7cd      	b.n	80059c4 <_dtoa_r+0x6b4>
 8005a28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005a2a:	2a00      	cmp	r2, #0
 8005a2c:	f000 80c4 	beq.w	8005bb8 <_dtoa_r+0x8a8>
 8005a30:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005a32:	2a01      	cmp	r2, #1
 8005a34:	f300 80a8 	bgt.w	8005b88 <_dtoa_r+0x878>
 8005a38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005a3a:	2a00      	cmp	r2, #0
 8005a3c:	f000 80a0 	beq.w	8005b80 <_dtoa_r+0x870>
 8005a40:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005a44:	464f      	mov	r7, r9
 8005a46:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005a48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a4a:	2101      	movs	r1, #1
 8005a4c:	441a      	add	r2, r3
 8005a4e:	4628      	mov	r0, r5
 8005a50:	4499      	add	r9, r3
 8005a52:	9209      	str	r2, [sp, #36]	; 0x24
 8005a54:	f000 fc32 	bl	80062bc <__i2b>
 8005a58:	4606      	mov	r6, r0
 8005a5a:	b15f      	cbz	r7, 8005a74 <_dtoa_r+0x764>
 8005a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	dd08      	ble.n	8005a74 <_dtoa_r+0x764>
 8005a62:	42bb      	cmp	r3, r7
 8005a64:	bfa8      	it	ge
 8005a66:	463b      	movge	r3, r7
 8005a68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a6a:	eba9 0903 	sub.w	r9, r9, r3
 8005a6e:	1aff      	subs	r7, r7, r3
 8005a70:	1ad3      	subs	r3, r2, r3
 8005a72:	9309      	str	r3, [sp, #36]	; 0x24
 8005a74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a76:	b1f3      	cbz	r3, 8005ab6 <_dtoa_r+0x7a6>
 8005a78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f000 80a0 	beq.w	8005bc0 <_dtoa_r+0x8b0>
 8005a80:	2c00      	cmp	r4, #0
 8005a82:	dd10      	ble.n	8005aa6 <_dtoa_r+0x796>
 8005a84:	4631      	mov	r1, r6
 8005a86:	4622      	mov	r2, r4
 8005a88:	4628      	mov	r0, r5
 8005a8a:	f000 fcd5 	bl	8006438 <__pow5mult>
 8005a8e:	4652      	mov	r2, sl
 8005a90:	4601      	mov	r1, r0
 8005a92:	4606      	mov	r6, r0
 8005a94:	4628      	mov	r0, r5
 8005a96:	f000 fc27 	bl	80062e8 <__multiply>
 8005a9a:	4680      	mov	r8, r0
 8005a9c:	4651      	mov	r1, sl
 8005a9e:	4628      	mov	r0, r5
 8005aa0:	f000 fb56 	bl	8006150 <_Bfree>
 8005aa4:	46c2      	mov	sl, r8
 8005aa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005aa8:	1b1a      	subs	r2, r3, r4
 8005aaa:	d004      	beq.n	8005ab6 <_dtoa_r+0x7a6>
 8005aac:	4651      	mov	r1, sl
 8005aae:	4628      	mov	r0, r5
 8005ab0:	f000 fcc2 	bl	8006438 <__pow5mult>
 8005ab4:	4682      	mov	sl, r0
 8005ab6:	2101      	movs	r1, #1
 8005ab8:	4628      	mov	r0, r5
 8005aba:	f000 fbff 	bl	80062bc <__i2b>
 8005abe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ac0:	4604      	mov	r4, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	f340 8082 	ble.w	8005bcc <_dtoa_r+0x8bc>
 8005ac8:	461a      	mov	r2, r3
 8005aca:	4601      	mov	r1, r0
 8005acc:	4628      	mov	r0, r5
 8005ace:	f000 fcb3 	bl	8006438 <__pow5mult>
 8005ad2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ad4:	4604      	mov	r4, r0
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	dd7b      	ble.n	8005bd2 <_dtoa_r+0x8c2>
 8005ada:	f04f 0800 	mov.w	r8, #0
 8005ade:	6923      	ldr	r3, [r4, #16]
 8005ae0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005ae4:	6918      	ldr	r0, [r3, #16]
 8005ae6:	f000 fb9b 	bl	8006220 <__hi0bits>
 8005aea:	f1c0 0020 	rsb	r0, r0, #32
 8005aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005af0:	4418      	add	r0, r3
 8005af2:	f010 001f 	ands.w	r0, r0, #31
 8005af6:	f000 8092 	beq.w	8005c1e <_dtoa_r+0x90e>
 8005afa:	f1c0 0320 	rsb	r3, r0, #32
 8005afe:	2b04      	cmp	r3, #4
 8005b00:	f340 8085 	ble.w	8005c0e <_dtoa_r+0x8fe>
 8005b04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b06:	f1c0 001c 	rsb	r0, r0, #28
 8005b0a:	4403      	add	r3, r0
 8005b0c:	4481      	add	r9, r0
 8005b0e:	4407      	add	r7, r0
 8005b10:	9309      	str	r3, [sp, #36]	; 0x24
 8005b12:	f1b9 0f00 	cmp.w	r9, #0
 8005b16:	dd05      	ble.n	8005b24 <_dtoa_r+0x814>
 8005b18:	4651      	mov	r1, sl
 8005b1a:	464a      	mov	r2, r9
 8005b1c:	4628      	mov	r0, r5
 8005b1e:	f000 fce5 	bl	80064ec <__lshift>
 8005b22:	4682      	mov	sl, r0
 8005b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	dd05      	ble.n	8005b36 <_dtoa_r+0x826>
 8005b2a:	4621      	mov	r1, r4
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	4628      	mov	r0, r5
 8005b30:	f000 fcdc 	bl	80064ec <__lshift>
 8005b34:	4604      	mov	r4, r0
 8005b36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d072      	beq.n	8005c22 <_dtoa_r+0x912>
 8005b3c:	4621      	mov	r1, r4
 8005b3e:	4650      	mov	r0, sl
 8005b40:	f000 fd40 	bl	80065c4 <__mcmp>
 8005b44:	2800      	cmp	r0, #0
 8005b46:	da6c      	bge.n	8005c22 <_dtoa_r+0x912>
 8005b48:	2300      	movs	r3, #0
 8005b4a:	4651      	mov	r1, sl
 8005b4c:	220a      	movs	r2, #10
 8005b4e:	4628      	mov	r0, r5
 8005b50:	f000 fb20 	bl	8006194 <__multadd>
 8005b54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b56:	4682      	mov	sl, r0
 8005b58:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f000 81ac 	beq.w	8005eba <_dtoa_r+0xbaa>
 8005b62:	2300      	movs	r3, #0
 8005b64:	4631      	mov	r1, r6
 8005b66:	220a      	movs	r2, #10
 8005b68:	4628      	mov	r0, r5
 8005b6a:	f000 fb13 	bl	8006194 <__multadd>
 8005b6e:	9b06      	ldr	r3, [sp, #24]
 8005b70:	4606      	mov	r6, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	f300 8093 	bgt.w	8005c9e <_dtoa_r+0x98e>
 8005b78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	dc59      	bgt.n	8005c32 <_dtoa_r+0x922>
 8005b7e:	e08e      	b.n	8005c9e <_dtoa_r+0x98e>
 8005b80:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005b82:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005b86:	e75d      	b.n	8005a44 <_dtoa_r+0x734>
 8005b88:	9b08      	ldr	r3, [sp, #32]
 8005b8a:	1e5c      	subs	r4, r3, #1
 8005b8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b8e:	42a3      	cmp	r3, r4
 8005b90:	bfbf      	itttt	lt
 8005b92:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005b94:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8005b96:	1ae3      	sublt	r3, r4, r3
 8005b98:	18d2      	addlt	r2, r2, r3
 8005b9a:	bfa8      	it	ge
 8005b9c:	1b1c      	subge	r4, r3, r4
 8005b9e:	9b08      	ldr	r3, [sp, #32]
 8005ba0:	bfbe      	ittt	lt
 8005ba2:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005ba4:	920e      	strlt	r2, [sp, #56]	; 0x38
 8005ba6:	2400      	movlt	r4, #0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	bfb5      	itete	lt
 8005bac:	eba9 0703 	sublt.w	r7, r9, r3
 8005bb0:	464f      	movge	r7, r9
 8005bb2:	2300      	movlt	r3, #0
 8005bb4:	9b08      	ldrge	r3, [sp, #32]
 8005bb6:	e747      	b.n	8005a48 <_dtoa_r+0x738>
 8005bb8:	464f      	mov	r7, r9
 8005bba:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005bbc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005bbe:	e74c      	b.n	8005a5a <_dtoa_r+0x74a>
 8005bc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bc2:	e773      	b.n	8005aac <_dtoa_r+0x79c>
 8005bc4:	3fe00000 	.word	0x3fe00000
 8005bc8:	40240000 	.word	0x40240000
 8005bcc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	dc18      	bgt.n	8005c04 <_dtoa_r+0x8f4>
 8005bd2:	9b04      	ldr	r3, [sp, #16]
 8005bd4:	b9b3      	cbnz	r3, 8005c04 <_dtoa_r+0x8f4>
 8005bd6:	9b05      	ldr	r3, [sp, #20]
 8005bd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005bdc:	b993      	cbnz	r3, 8005c04 <_dtoa_r+0x8f4>
 8005bde:	9b05      	ldr	r3, [sp, #20]
 8005be0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005be4:	0d1b      	lsrs	r3, r3, #20
 8005be6:	051b      	lsls	r3, r3, #20
 8005be8:	b17b      	cbz	r3, 8005c0a <_dtoa_r+0x8fa>
 8005bea:	f04f 0801 	mov.w	r8, #1
 8005bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bf0:	f109 0901 	add.w	r9, r9, #1
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	9309      	str	r3, [sp, #36]	; 0x24
 8005bf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	f47f af6f 	bne.w	8005ade <_dtoa_r+0x7ce>
 8005c00:	2001      	movs	r0, #1
 8005c02:	e774      	b.n	8005aee <_dtoa_r+0x7de>
 8005c04:	f04f 0800 	mov.w	r8, #0
 8005c08:	e7f6      	b.n	8005bf8 <_dtoa_r+0x8e8>
 8005c0a:	4698      	mov	r8, r3
 8005c0c:	e7f4      	b.n	8005bf8 <_dtoa_r+0x8e8>
 8005c0e:	d080      	beq.n	8005b12 <_dtoa_r+0x802>
 8005c10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c12:	331c      	adds	r3, #28
 8005c14:	441a      	add	r2, r3
 8005c16:	4499      	add	r9, r3
 8005c18:	441f      	add	r7, r3
 8005c1a:	9209      	str	r2, [sp, #36]	; 0x24
 8005c1c:	e779      	b.n	8005b12 <_dtoa_r+0x802>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	e7f6      	b.n	8005c10 <_dtoa_r+0x900>
 8005c22:	9b08      	ldr	r3, [sp, #32]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	dc34      	bgt.n	8005c92 <_dtoa_r+0x982>
 8005c28:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	dd31      	ble.n	8005c92 <_dtoa_r+0x982>
 8005c2e:	9b08      	ldr	r3, [sp, #32]
 8005c30:	9306      	str	r3, [sp, #24]
 8005c32:	9b06      	ldr	r3, [sp, #24]
 8005c34:	b963      	cbnz	r3, 8005c50 <_dtoa_r+0x940>
 8005c36:	4621      	mov	r1, r4
 8005c38:	2205      	movs	r2, #5
 8005c3a:	4628      	mov	r0, r5
 8005c3c:	f000 faaa 	bl	8006194 <__multadd>
 8005c40:	4601      	mov	r1, r0
 8005c42:	4604      	mov	r4, r0
 8005c44:	4650      	mov	r0, sl
 8005c46:	f000 fcbd 	bl	80065c4 <__mcmp>
 8005c4a:	2800      	cmp	r0, #0
 8005c4c:	f73f adbf 	bgt.w	80057ce <_dtoa_r+0x4be>
 8005c50:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005c52:	9f03      	ldr	r7, [sp, #12]
 8005c54:	ea6f 0b03 	mvn.w	fp, r3
 8005c58:	f04f 0800 	mov.w	r8, #0
 8005c5c:	4621      	mov	r1, r4
 8005c5e:	4628      	mov	r0, r5
 8005c60:	f000 fa76 	bl	8006150 <_Bfree>
 8005c64:	2e00      	cmp	r6, #0
 8005c66:	f43f aead 	beq.w	80059c4 <_dtoa_r+0x6b4>
 8005c6a:	f1b8 0f00 	cmp.w	r8, #0
 8005c6e:	d005      	beq.n	8005c7c <_dtoa_r+0x96c>
 8005c70:	45b0      	cmp	r8, r6
 8005c72:	d003      	beq.n	8005c7c <_dtoa_r+0x96c>
 8005c74:	4641      	mov	r1, r8
 8005c76:	4628      	mov	r0, r5
 8005c78:	f000 fa6a 	bl	8006150 <_Bfree>
 8005c7c:	4631      	mov	r1, r6
 8005c7e:	4628      	mov	r0, r5
 8005c80:	f000 fa66 	bl	8006150 <_Bfree>
 8005c84:	e69e      	b.n	80059c4 <_dtoa_r+0x6b4>
 8005c86:	2400      	movs	r4, #0
 8005c88:	4626      	mov	r6, r4
 8005c8a:	e7e1      	b.n	8005c50 <_dtoa_r+0x940>
 8005c8c:	46c3      	mov	fp, r8
 8005c8e:	4626      	mov	r6, r4
 8005c90:	e59d      	b.n	80057ce <_dtoa_r+0x4be>
 8005c92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f000 80c8 	beq.w	8005e2a <_dtoa_r+0xb1a>
 8005c9a:	9b08      	ldr	r3, [sp, #32]
 8005c9c:	9306      	str	r3, [sp, #24]
 8005c9e:	2f00      	cmp	r7, #0
 8005ca0:	dd05      	ble.n	8005cae <_dtoa_r+0x99e>
 8005ca2:	4631      	mov	r1, r6
 8005ca4:	463a      	mov	r2, r7
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	f000 fc20 	bl	80064ec <__lshift>
 8005cac:	4606      	mov	r6, r0
 8005cae:	f1b8 0f00 	cmp.w	r8, #0
 8005cb2:	d05b      	beq.n	8005d6c <_dtoa_r+0xa5c>
 8005cb4:	4628      	mov	r0, r5
 8005cb6:	6871      	ldr	r1, [r6, #4]
 8005cb8:	f000 fa0a 	bl	80060d0 <_Balloc>
 8005cbc:	4607      	mov	r7, r0
 8005cbe:	b928      	cbnz	r0, 8005ccc <_dtoa_r+0x9bc>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005cc6:	4b81      	ldr	r3, [pc, #516]	; (8005ecc <_dtoa_r+0xbbc>)
 8005cc8:	f7ff bb36 	b.w	8005338 <_dtoa_r+0x28>
 8005ccc:	6932      	ldr	r2, [r6, #16]
 8005cce:	f106 010c 	add.w	r1, r6, #12
 8005cd2:	3202      	adds	r2, #2
 8005cd4:	0092      	lsls	r2, r2, #2
 8005cd6:	300c      	adds	r0, #12
 8005cd8:	f000 ff9e 	bl	8006c18 <memcpy>
 8005cdc:	2201      	movs	r2, #1
 8005cde:	4639      	mov	r1, r7
 8005ce0:	4628      	mov	r0, r5
 8005ce2:	f000 fc03 	bl	80064ec <__lshift>
 8005ce6:	46b0      	mov	r8, r6
 8005ce8:	4606      	mov	r6, r0
 8005cea:	9b03      	ldr	r3, [sp, #12]
 8005cec:	9a03      	ldr	r2, [sp, #12]
 8005cee:	3301      	adds	r3, #1
 8005cf0:	9308      	str	r3, [sp, #32]
 8005cf2:	9b06      	ldr	r3, [sp, #24]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cf8:	9b04      	ldr	r3, [sp, #16]
 8005cfa:	f003 0301 	and.w	r3, r3, #1
 8005cfe:	930a      	str	r3, [sp, #40]	; 0x28
 8005d00:	9b08      	ldr	r3, [sp, #32]
 8005d02:	4621      	mov	r1, r4
 8005d04:	3b01      	subs	r3, #1
 8005d06:	4650      	mov	r0, sl
 8005d08:	9304      	str	r3, [sp, #16]
 8005d0a:	f7ff fa75 	bl	80051f8 <quorem>
 8005d0e:	4641      	mov	r1, r8
 8005d10:	9006      	str	r0, [sp, #24]
 8005d12:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005d16:	4650      	mov	r0, sl
 8005d18:	f000 fc54 	bl	80065c4 <__mcmp>
 8005d1c:	4632      	mov	r2, r6
 8005d1e:	9009      	str	r0, [sp, #36]	; 0x24
 8005d20:	4621      	mov	r1, r4
 8005d22:	4628      	mov	r0, r5
 8005d24:	f000 fc6a 	bl	80065fc <__mdiff>
 8005d28:	68c2      	ldr	r2, [r0, #12]
 8005d2a:	4607      	mov	r7, r0
 8005d2c:	bb02      	cbnz	r2, 8005d70 <_dtoa_r+0xa60>
 8005d2e:	4601      	mov	r1, r0
 8005d30:	4650      	mov	r0, sl
 8005d32:	f000 fc47 	bl	80065c4 <__mcmp>
 8005d36:	4602      	mov	r2, r0
 8005d38:	4639      	mov	r1, r7
 8005d3a:	4628      	mov	r0, r5
 8005d3c:	920c      	str	r2, [sp, #48]	; 0x30
 8005d3e:	f000 fa07 	bl	8006150 <_Bfree>
 8005d42:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d46:	9f08      	ldr	r7, [sp, #32]
 8005d48:	ea43 0102 	orr.w	r1, r3, r2
 8005d4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d4e:	4319      	orrs	r1, r3
 8005d50:	d110      	bne.n	8005d74 <_dtoa_r+0xa64>
 8005d52:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005d56:	d029      	beq.n	8005dac <_dtoa_r+0xa9c>
 8005d58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	dd02      	ble.n	8005d64 <_dtoa_r+0xa54>
 8005d5e:	9b06      	ldr	r3, [sp, #24]
 8005d60:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005d64:	9b04      	ldr	r3, [sp, #16]
 8005d66:	f883 9000 	strb.w	r9, [r3]
 8005d6a:	e777      	b.n	8005c5c <_dtoa_r+0x94c>
 8005d6c:	4630      	mov	r0, r6
 8005d6e:	e7ba      	b.n	8005ce6 <_dtoa_r+0x9d6>
 8005d70:	2201      	movs	r2, #1
 8005d72:	e7e1      	b.n	8005d38 <_dtoa_r+0xa28>
 8005d74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	db04      	blt.n	8005d84 <_dtoa_r+0xa74>
 8005d7a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005d7c:	430b      	orrs	r3, r1
 8005d7e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005d80:	430b      	orrs	r3, r1
 8005d82:	d120      	bne.n	8005dc6 <_dtoa_r+0xab6>
 8005d84:	2a00      	cmp	r2, #0
 8005d86:	dded      	ble.n	8005d64 <_dtoa_r+0xa54>
 8005d88:	4651      	mov	r1, sl
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	4628      	mov	r0, r5
 8005d8e:	f000 fbad 	bl	80064ec <__lshift>
 8005d92:	4621      	mov	r1, r4
 8005d94:	4682      	mov	sl, r0
 8005d96:	f000 fc15 	bl	80065c4 <__mcmp>
 8005d9a:	2800      	cmp	r0, #0
 8005d9c:	dc03      	bgt.n	8005da6 <_dtoa_r+0xa96>
 8005d9e:	d1e1      	bne.n	8005d64 <_dtoa_r+0xa54>
 8005da0:	f019 0f01 	tst.w	r9, #1
 8005da4:	d0de      	beq.n	8005d64 <_dtoa_r+0xa54>
 8005da6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005daa:	d1d8      	bne.n	8005d5e <_dtoa_r+0xa4e>
 8005dac:	2339      	movs	r3, #57	; 0x39
 8005dae:	9a04      	ldr	r2, [sp, #16]
 8005db0:	7013      	strb	r3, [r2, #0]
 8005db2:	463b      	mov	r3, r7
 8005db4:	461f      	mov	r7, r3
 8005db6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	2a39      	cmp	r2, #57	; 0x39
 8005dbe:	d06b      	beq.n	8005e98 <_dtoa_r+0xb88>
 8005dc0:	3201      	adds	r2, #1
 8005dc2:	701a      	strb	r2, [r3, #0]
 8005dc4:	e74a      	b.n	8005c5c <_dtoa_r+0x94c>
 8005dc6:	2a00      	cmp	r2, #0
 8005dc8:	dd07      	ble.n	8005dda <_dtoa_r+0xaca>
 8005dca:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005dce:	d0ed      	beq.n	8005dac <_dtoa_r+0xa9c>
 8005dd0:	9a04      	ldr	r2, [sp, #16]
 8005dd2:	f109 0301 	add.w	r3, r9, #1
 8005dd6:	7013      	strb	r3, [r2, #0]
 8005dd8:	e740      	b.n	8005c5c <_dtoa_r+0x94c>
 8005dda:	9b08      	ldr	r3, [sp, #32]
 8005ddc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005dde:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d042      	beq.n	8005e6c <_dtoa_r+0xb5c>
 8005de6:	4651      	mov	r1, sl
 8005de8:	2300      	movs	r3, #0
 8005dea:	220a      	movs	r2, #10
 8005dec:	4628      	mov	r0, r5
 8005dee:	f000 f9d1 	bl	8006194 <__multadd>
 8005df2:	45b0      	cmp	r8, r6
 8005df4:	4682      	mov	sl, r0
 8005df6:	f04f 0300 	mov.w	r3, #0
 8005dfa:	f04f 020a 	mov.w	r2, #10
 8005dfe:	4641      	mov	r1, r8
 8005e00:	4628      	mov	r0, r5
 8005e02:	d107      	bne.n	8005e14 <_dtoa_r+0xb04>
 8005e04:	f000 f9c6 	bl	8006194 <__multadd>
 8005e08:	4680      	mov	r8, r0
 8005e0a:	4606      	mov	r6, r0
 8005e0c:	9b08      	ldr	r3, [sp, #32]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	9308      	str	r3, [sp, #32]
 8005e12:	e775      	b.n	8005d00 <_dtoa_r+0x9f0>
 8005e14:	f000 f9be 	bl	8006194 <__multadd>
 8005e18:	4631      	mov	r1, r6
 8005e1a:	4680      	mov	r8, r0
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	220a      	movs	r2, #10
 8005e20:	4628      	mov	r0, r5
 8005e22:	f000 f9b7 	bl	8006194 <__multadd>
 8005e26:	4606      	mov	r6, r0
 8005e28:	e7f0      	b.n	8005e0c <_dtoa_r+0xafc>
 8005e2a:	9b08      	ldr	r3, [sp, #32]
 8005e2c:	9306      	str	r3, [sp, #24]
 8005e2e:	9f03      	ldr	r7, [sp, #12]
 8005e30:	4621      	mov	r1, r4
 8005e32:	4650      	mov	r0, sl
 8005e34:	f7ff f9e0 	bl	80051f8 <quorem>
 8005e38:	9b03      	ldr	r3, [sp, #12]
 8005e3a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005e3e:	f807 9b01 	strb.w	r9, [r7], #1
 8005e42:	1afa      	subs	r2, r7, r3
 8005e44:	9b06      	ldr	r3, [sp, #24]
 8005e46:	4293      	cmp	r3, r2
 8005e48:	dd07      	ble.n	8005e5a <_dtoa_r+0xb4a>
 8005e4a:	4651      	mov	r1, sl
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	220a      	movs	r2, #10
 8005e50:	4628      	mov	r0, r5
 8005e52:	f000 f99f 	bl	8006194 <__multadd>
 8005e56:	4682      	mov	sl, r0
 8005e58:	e7ea      	b.n	8005e30 <_dtoa_r+0xb20>
 8005e5a:	9b06      	ldr	r3, [sp, #24]
 8005e5c:	f04f 0800 	mov.w	r8, #0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	bfcc      	ite	gt
 8005e64:	461f      	movgt	r7, r3
 8005e66:	2701      	movle	r7, #1
 8005e68:	9b03      	ldr	r3, [sp, #12]
 8005e6a:	441f      	add	r7, r3
 8005e6c:	4651      	mov	r1, sl
 8005e6e:	2201      	movs	r2, #1
 8005e70:	4628      	mov	r0, r5
 8005e72:	f000 fb3b 	bl	80064ec <__lshift>
 8005e76:	4621      	mov	r1, r4
 8005e78:	4682      	mov	sl, r0
 8005e7a:	f000 fba3 	bl	80065c4 <__mcmp>
 8005e7e:	2800      	cmp	r0, #0
 8005e80:	dc97      	bgt.n	8005db2 <_dtoa_r+0xaa2>
 8005e82:	d102      	bne.n	8005e8a <_dtoa_r+0xb7a>
 8005e84:	f019 0f01 	tst.w	r9, #1
 8005e88:	d193      	bne.n	8005db2 <_dtoa_r+0xaa2>
 8005e8a:	463b      	mov	r3, r7
 8005e8c:	461f      	mov	r7, r3
 8005e8e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e92:	2a30      	cmp	r2, #48	; 0x30
 8005e94:	d0fa      	beq.n	8005e8c <_dtoa_r+0xb7c>
 8005e96:	e6e1      	b.n	8005c5c <_dtoa_r+0x94c>
 8005e98:	9a03      	ldr	r2, [sp, #12]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d18a      	bne.n	8005db4 <_dtoa_r+0xaa4>
 8005e9e:	2331      	movs	r3, #49	; 0x31
 8005ea0:	f10b 0b01 	add.w	fp, fp, #1
 8005ea4:	e797      	b.n	8005dd6 <_dtoa_r+0xac6>
 8005ea6:	4b0a      	ldr	r3, [pc, #40]	; (8005ed0 <_dtoa_r+0xbc0>)
 8005ea8:	f7ff ba9f 	b.w	80053ea <_dtoa_r+0xda>
 8005eac:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	f47f aa77 	bne.w	80053a2 <_dtoa_r+0x92>
 8005eb4:	4b07      	ldr	r3, [pc, #28]	; (8005ed4 <_dtoa_r+0xbc4>)
 8005eb6:	f7ff ba98 	b.w	80053ea <_dtoa_r+0xda>
 8005eba:	9b06      	ldr	r3, [sp, #24]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	dcb6      	bgt.n	8005e2e <_dtoa_r+0xb1e>
 8005ec0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	f73f aeb5 	bgt.w	8005c32 <_dtoa_r+0x922>
 8005ec8:	e7b1      	b.n	8005e2e <_dtoa_r+0xb1e>
 8005eca:	bf00      	nop
 8005ecc:	080073be 	.word	0x080073be
 8005ed0:	0800731e 	.word	0x0800731e
 8005ed4:	08007342 	.word	0x08007342

08005ed8 <_free_r>:
 8005ed8:	b538      	push	{r3, r4, r5, lr}
 8005eda:	4605      	mov	r5, r0
 8005edc:	2900      	cmp	r1, #0
 8005ede:	d040      	beq.n	8005f62 <_free_r+0x8a>
 8005ee0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ee4:	1f0c      	subs	r4, r1, #4
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	bfb8      	it	lt
 8005eea:	18e4      	addlt	r4, r4, r3
 8005eec:	f000 f8e4 	bl	80060b8 <__malloc_lock>
 8005ef0:	4a1c      	ldr	r2, [pc, #112]	; (8005f64 <_free_r+0x8c>)
 8005ef2:	6813      	ldr	r3, [r2, #0]
 8005ef4:	b933      	cbnz	r3, 8005f04 <_free_r+0x2c>
 8005ef6:	6063      	str	r3, [r4, #4]
 8005ef8:	6014      	str	r4, [r2, #0]
 8005efa:	4628      	mov	r0, r5
 8005efc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f00:	f000 b8e0 	b.w	80060c4 <__malloc_unlock>
 8005f04:	42a3      	cmp	r3, r4
 8005f06:	d908      	bls.n	8005f1a <_free_r+0x42>
 8005f08:	6820      	ldr	r0, [r4, #0]
 8005f0a:	1821      	adds	r1, r4, r0
 8005f0c:	428b      	cmp	r3, r1
 8005f0e:	bf01      	itttt	eq
 8005f10:	6819      	ldreq	r1, [r3, #0]
 8005f12:	685b      	ldreq	r3, [r3, #4]
 8005f14:	1809      	addeq	r1, r1, r0
 8005f16:	6021      	streq	r1, [r4, #0]
 8005f18:	e7ed      	b.n	8005ef6 <_free_r+0x1e>
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	b10b      	cbz	r3, 8005f24 <_free_r+0x4c>
 8005f20:	42a3      	cmp	r3, r4
 8005f22:	d9fa      	bls.n	8005f1a <_free_r+0x42>
 8005f24:	6811      	ldr	r1, [r2, #0]
 8005f26:	1850      	adds	r0, r2, r1
 8005f28:	42a0      	cmp	r0, r4
 8005f2a:	d10b      	bne.n	8005f44 <_free_r+0x6c>
 8005f2c:	6820      	ldr	r0, [r4, #0]
 8005f2e:	4401      	add	r1, r0
 8005f30:	1850      	adds	r0, r2, r1
 8005f32:	4283      	cmp	r3, r0
 8005f34:	6011      	str	r1, [r2, #0]
 8005f36:	d1e0      	bne.n	8005efa <_free_r+0x22>
 8005f38:	6818      	ldr	r0, [r3, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	4408      	add	r0, r1
 8005f3e:	6010      	str	r0, [r2, #0]
 8005f40:	6053      	str	r3, [r2, #4]
 8005f42:	e7da      	b.n	8005efa <_free_r+0x22>
 8005f44:	d902      	bls.n	8005f4c <_free_r+0x74>
 8005f46:	230c      	movs	r3, #12
 8005f48:	602b      	str	r3, [r5, #0]
 8005f4a:	e7d6      	b.n	8005efa <_free_r+0x22>
 8005f4c:	6820      	ldr	r0, [r4, #0]
 8005f4e:	1821      	adds	r1, r4, r0
 8005f50:	428b      	cmp	r3, r1
 8005f52:	bf01      	itttt	eq
 8005f54:	6819      	ldreq	r1, [r3, #0]
 8005f56:	685b      	ldreq	r3, [r3, #4]
 8005f58:	1809      	addeq	r1, r1, r0
 8005f5a:	6021      	streq	r1, [r4, #0]
 8005f5c:	6063      	str	r3, [r4, #4]
 8005f5e:	6054      	str	r4, [r2, #4]
 8005f60:	e7cb      	b.n	8005efa <_free_r+0x22>
 8005f62:	bd38      	pop	{r3, r4, r5, pc}
 8005f64:	20000504 	.word	0x20000504

08005f68 <malloc>:
 8005f68:	4b02      	ldr	r3, [pc, #8]	; (8005f74 <malloc+0xc>)
 8005f6a:	4601      	mov	r1, r0
 8005f6c:	6818      	ldr	r0, [r3, #0]
 8005f6e:	f000 b823 	b.w	8005fb8 <_malloc_r>
 8005f72:	bf00      	nop
 8005f74:	2000008c 	.word	0x2000008c

08005f78 <sbrk_aligned>:
 8005f78:	b570      	push	{r4, r5, r6, lr}
 8005f7a:	4e0e      	ldr	r6, [pc, #56]	; (8005fb4 <sbrk_aligned+0x3c>)
 8005f7c:	460c      	mov	r4, r1
 8005f7e:	6831      	ldr	r1, [r6, #0]
 8005f80:	4605      	mov	r5, r0
 8005f82:	b911      	cbnz	r1, 8005f8a <sbrk_aligned+0x12>
 8005f84:	f000 fe38 	bl	8006bf8 <_sbrk_r>
 8005f88:	6030      	str	r0, [r6, #0]
 8005f8a:	4621      	mov	r1, r4
 8005f8c:	4628      	mov	r0, r5
 8005f8e:	f000 fe33 	bl	8006bf8 <_sbrk_r>
 8005f92:	1c43      	adds	r3, r0, #1
 8005f94:	d00a      	beq.n	8005fac <sbrk_aligned+0x34>
 8005f96:	1cc4      	adds	r4, r0, #3
 8005f98:	f024 0403 	bic.w	r4, r4, #3
 8005f9c:	42a0      	cmp	r0, r4
 8005f9e:	d007      	beq.n	8005fb0 <sbrk_aligned+0x38>
 8005fa0:	1a21      	subs	r1, r4, r0
 8005fa2:	4628      	mov	r0, r5
 8005fa4:	f000 fe28 	bl	8006bf8 <_sbrk_r>
 8005fa8:	3001      	adds	r0, #1
 8005faa:	d101      	bne.n	8005fb0 <sbrk_aligned+0x38>
 8005fac:	f04f 34ff 	mov.w	r4, #4294967295
 8005fb0:	4620      	mov	r0, r4
 8005fb2:	bd70      	pop	{r4, r5, r6, pc}
 8005fb4:	20000508 	.word	0x20000508

08005fb8 <_malloc_r>:
 8005fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fbc:	1ccd      	adds	r5, r1, #3
 8005fbe:	f025 0503 	bic.w	r5, r5, #3
 8005fc2:	3508      	adds	r5, #8
 8005fc4:	2d0c      	cmp	r5, #12
 8005fc6:	bf38      	it	cc
 8005fc8:	250c      	movcc	r5, #12
 8005fca:	2d00      	cmp	r5, #0
 8005fcc:	4607      	mov	r7, r0
 8005fce:	db01      	blt.n	8005fd4 <_malloc_r+0x1c>
 8005fd0:	42a9      	cmp	r1, r5
 8005fd2:	d905      	bls.n	8005fe0 <_malloc_r+0x28>
 8005fd4:	230c      	movs	r3, #12
 8005fd6:	2600      	movs	r6, #0
 8005fd8:	603b      	str	r3, [r7, #0]
 8005fda:	4630      	mov	r0, r6
 8005fdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fe0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80060b4 <_malloc_r+0xfc>
 8005fe4:	f000 f868 	bl	80060b8 <__malloc_lock>
 8005fe8:	f8d8 3000 	ldr.w	r3, [r8]
 8005fec:	461c      	mov	r4, r3
 8005fee:	bb5c      	cbnz	r4, 8006048 <_malloc_r+0x90>
 8005ff0:	4629      	mov	r1, r5
 8005ff2:	4638      	mov	r0, r7
 8005ff4:	f7ff ffc0 	bl	8005f78 <sbrk_aligned>
 8005ff8:	1c43      	adds	r3, r0, #1
 8005ffa:	4604      	mov	r4, r0
 8005ffc:	d155      	bne.n	80060aa <_malloc_r+0xf2>
 8005ffe:	f8d8 4000 	ldr.w	r4, [r8]
 8006002:	4626      	mov	r6, r4
 8006004:	2e00      	cmp	r6, #0
 8006006:	d145      	bne.n	8006094 <_malloc_r+0xdc>
 8006008:	2c00      	cmp	r4, #0
 800600a:	d048      	beq.n	800609e <_malloc_r+0xe6>
 800600c:	6823      	ldr	r3, [r4, #0]
 800600e:	4631      	mov	r1, r6
 8006010:	4638      	mov	r0, r7
 8006012:	eb04 0903 	add.w	r9, r4, r3
 8006016:	f000 fdef 	bl	8006bf8 <_sbrk_r>
 800601a:	4581      	cmp	r9, r0
 800601c:	d13f      	bne.n	800609e <_malloc_r+0xe6>
 800601e:	6821      	ldr	r1, [r4, #0]
 8006020:	4638      	mov	r0, r7
 8006022:	1a6d      	subs	r5, r5, r1
 8006024:	4629      	mov	r1, r5
 8006026:	f7ff ffa7 	bl	8005f78 <sbrk_aligned>
 800602a:	3001      	adds	r0, #1
 800602c:	d037      	beq.n	800609e <_malloc_r+0xe6>
 800602e:	6823      	ldr	r3, [r4, #0]
 8006030:	442b      	add	r3, r5
 8006032:	6023      	str	r3, [r4, #0]
 8006034:	f8d8 3000 	ldr.w	r3, [r8]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d038      	beq.n	80060ae <_malloc_r+0xf6>
 800603c:	685a      	ldr	r2, [r3, #4]
 800603e:	42a2      	cmp	r2, r4
 8006040:	d12b      	bne.n	800609a <_malloc_r+0xe2>
 8006042:	2200      	movs	r2, #0
 8006044:	605a      	str	r2, [r3, #4]
 8006046:	e00f      	b.n	8006068 <_malloc_r+0xb0>
 8006048:	6822      	ldr	r2, [r4, #0]
 800604a:	1b52      	subs	r2, r2, r5
 800604c:	d41f      	bmi.n	800608e <_malloc_r+0xd6>
 800604e:	2a0b      	cmp	r2, #11
 8006050:	d917      	bls.n	8006082 <_malloc_r+0xca>
 8006052:	1961      	adds	r1, r4, r5
 8006054:	42a3      	cmp	r3, r4
 8006056:	6025      	str	r5, [r4, #0]
 8006058:	bf18      	it	ne
 800605a:	6059      	strne	r1, [r3, #4]
 800605c:	6863      	ldr	r3, [r4, #4]
 800605e:	bf08      	it	eq
 8006060:	f8c8 1000 	streq.w	r1, [r8]
 8006064:	5162      	str	r2, [r4, r5]
 8006066:	604b      	str	r3, [r1, #4]
 8006068:	4638      	mov	r0, r7
 800606a:	f104 060b 	add.w	r6, r4, #11
 800606e:	f000 f829 	bl	80060c4 <__malloc_unlock>
 8006072:	f026 0607 	bic.w	r6, r6, #7
 8006076:	1d23      	adds	r3, r4, #4
 8006078:	1af2      	subs	r2, r6, r3
 800607a:	d0ae      	beq.n	8005fda <_malloc_r+0x22>
 800607c:	1b9b      	subs	r3, r3, r6
 800607e:	50a3      	str	r3, [r4, r2]
 8006080:	e7ab      	b.n	8005fda <_malloc_r+0x22>
 8006082:	42a3      	cmp	r3, r4
 8006084:	6862      	ldr	r2, [r4, #4]
 8006086:	d1dd      	bne.n	8006044 <_malloc_r+0x8c>
 8006088:	f8c8 2000 	str.w	r2, [r8]
 800608c:	e7ec      	b.n	8006068 <_malloc_r+0xb0>
 800608e:	4623      	mov	r3, r4
 8006090:	6864      	ldr	r4, [r4, #4]
 8006092:	e7ac      	b.n	8005fee <_malloc_r+0x36>
 8006094:	4634      	mov	r4, r6
 8006096:	6876      	ldr	r6, [r6, #4]
 8006098:	e7b4      	b.n	8006004 <_malloc_r+0x4c>
 800609a:	4613      	mov	r3, r2
 800609c:	e7cc      	b.n	8006038 <_malloc_r+0x80>
 800609e:	230c      	movs	r3, #12
 80060a0:	4638      	mov	r0, r7
 80060a2:	603b      	str	r3, [r7, #0]
 80060a4:	f000 f80e 	bl	80060c4 <__malloc_unlock>
 80060a8:	e797      	b.n	8005fda <_malloc_r+0x22>
 80060aa:	6025      	str	r5, [r4, #0]
 80060ac:	e7dc      	b.n	8006068 <_malloc_r+0xb0>
 80060ae:	605b      	str	r3, [r3, #4]
 80060b0:	deff      	udf	#255	; 0xff
 80060b2:	bf00      	nop
 80060b4:	20000504 	.word	0x20000504

080060b8 <__malloc_lock>:
 80060b8:	4801      	ldr	r0, [pc, #4]	; (80060c0 <__malloc_lock+0x8>)
 80060ba:	f7ff b88d 	b.w	80051d8 <__retarget_lock_acquire_recursive>
 80060be:	bf00      	nop
 80060c0:	20000500 	.word	0x20000500

080060c4 <__malloc_unlock>:
 80060c4:	4801      	ldr	r0, [pc, #4]	; (80060cc <__malloc_unlock+0x8>)
 80060c6:	f7ff b888 	b.w	80051da <__retarget_lock_release_recursive>
 80060ca:	bf00      	nop
 80060cc:	20000500 	.word	0x20000500

080060d0 <_Balloc>:
 80060d0:	b570      	push	{r4, r5, r6, lr}
 80060d2:	69c6      	ldr	r6, [r0, #28]
 80060d4:	4604      	mov	r4, r0
 80060d6:	460d      	mov	r5, r1
 80060d8:	b976      	cbnz	r6, 80060f8 <_Balloc+0x28>
 80060da:	2010      	movs	r0, #16
 80060dc:	f7ff ff44 	bl	8005f68 <malloc>
 80060e0:	4602      	mov	r2, r0
 80060e2:	61e0      	str	r0, [r4, #28]
 80060e4:	b920      	cbnz	r0, 80060f0 <_Balloc+0x20>
 80060e6:	216b      	movs	r1, #107	; 0x6b
 80060e8:	4b17      	ldr	r3, [pc, #92]	; (8006148 <_Balloc+0x78>)
 80060ea:	4818      	ldr	r0, [pc, #96]	; (800614c <_Balloc+0x7c>)
 80060ec:	f000 fda2 	bl	8006c34 <__assert_func>
 80060f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80060f4:	6006      	str	r6, [r0, #0]
 80060f6:	60c6      	str	r6, [r0, #12]
 80060f8:	69e6      	ldr	r6, [r4, #28]
 80060fa:	68f3      	ldr	r3, [r6, #12]
 80060fc:	b183      	cbz	r3, 8006120 <_Balloc+0x50>
 80060fe:	69e3      	ldr	r3, [r4, #28]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006106:	b9b8      	cbnz	r0, 8006138 <_Balloc+0x68>
 8006108:	2101      	movs	r1, #1
 800610a:	fa01 f605 	lsl.w	r6, r1, r5
 800610e:	1d72      	adds	r2, r6, #5
 8006110:	4620      	mov	r0, r4
 8006112:	0092      	lsls	r2, r2, #2
 8006114:	f000 fdac 	bl	8006c70 <_calloc_r>
 8006118:	b160      	cbz	r0, 8006134 <_Balloc+0x64>
 800611a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800611e:	e00e      	b.n	800613e <_Balloc+0x6e>
 8006120:	2221      	movs	r2, #33	; 0x21
 8006122:	2104      	movs	r1, #4
 8006124:	4620      	mov	r0, r4
 8006126:	f000 fda3 	bl	8006c70 <_calloc_r>
 800612a:	69e3      	ldr	r3, [r4, #28]
 800612c:	60f0      	str	r0, [r6, #12]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d1e4      	bne.n	80060fe <_Balloc+0x2e>
 8006134:	2000      	movs	r0, #0
 8006136:	bd70      	pop	{r4, r5, r6, pc}
 8006138:	6802      	ldr	r2, [r0, #0]
 800613a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800613e:	2300      	movs	r3, #0
 8006140:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006144:	e7f7      	b.n	8006136 <_Balloc+0x66>
 8006146:	bf00      	nop
 8006148:	0800734f 	.word	0x0800734f
 800614c:	080073cf 	.word	0x080073cf

08006150 <_Bfree>:
 8006150:	b570      	push	{r4, r5, r6, lr}
 8006152:	69c6      	ldr	r6, [r0, #28]
 8006154:	4605      	mov	r5, r0
 8006156:	460c      	mov	r4, r1
 8006158:	b976      	cbnz	r6, 8006178 <_Bfree+0x28>
 800615a:	2010      	movs	r0, #16
 800615c:	f7ff ff04 	bl	8005f68 <malloc>
 8006160:	4602      	mov	r2, r0
 8006162:	61e8      	str	r0, [r5, #28]
 8006164:	b920      	cbnz	r0, 8006170 <_Bfree+0x20>
 8006166:	218f      	movs	r1, #143	; 0x8f
 8006168:	4b08      	ldr	r3, [pc, #32]	; (800618c <_Bfree+0x3c>)
 800616a:	4809      	ldr	r0, [pc, #36]	; (8006190 <_Bfree+0x40>)
 800616c:	f000 fd62 	bl	8006c34 <__assert_func>
 8006170:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006174:	6006      	str	r6, [r0, #0]
 8006176:	60c6      	str	r6, [r0, #12]
 8006178:	b13c      	cbz	r4, 800618a <_Bfree+0x3a>
 800617a:	69eb      	ldr	r3, [r5, #28]
 800617c:	6862      	ldr	r2, [r4, #4]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006184:	6021      	str	r1, [r4, #0]
 8006186:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800618a:	bd70      	pop	{r4, r5, r6, pc}
 800618c:	0800734f 	.word	0x0800734f
 8006190:	080073cf 	.word	0x080073cf

08006194 <__multadd>:
 8006194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006198:	4607      	mov	r7, r0
 800619a:	460c      	mov	r4, r1
 800619c:	461e      	mov	r6, r3
 800619e:	2000      	movs	r0, #0
 80061a0:	690d      	ldr	r5, [r1, #16]
 80061a2:	f101 0c14 	add.w	ip, r1, #20
 80061a6:	f8dc 3000 	ldr.w	r3, [ip]
 80061aa:	3001      	adds	r0, #1
 80061ac:	b299      	uxth	r1, r3
 80061ae:	fb02 6101 	mla	r1, r2, r1, r6
 80061b2:	0c1e      	lsrs	r6, r3, #16
 80061b4:	0c0b      	lsrs	r3, r1, #16
 80061b6:	fb02 3306 	mla	r3, r2, r6, r3
 80061ba:	b289      	uxth	r1, r1
 80061bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80061c0:	4285      	cmp	r5, r0
 80061c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80061c6:	f84c 1b04 	str.w	r1, [ip], #4
 80061ca:	dcec      	bgt.n	80061a6 <__multadd+0x12>
 80061cc:	b30e      	cbz	r6, 8006212 <__multadd+0x7e>
 80061ce:	68a3      	ldr	r3, [r4, #8]
 80061d0:	42ab      	cmp	r3, r5
 80061d2:	dc19      	bgt.n	8006208 <__multadd+0x74>
 80061d4:	6861      	ldr	r1, [r4, #4]
 80061d6:	4638      	mov	r0, r7
 80061d8:	3101      	adds	r1, #1
 80061da:	f7ff ff79 	bl	80060d0 <_Balloc>
 80061de:	4680      	mov	r8, r0
 80061e0:	b928      	cbnz	r0, 80061ee <__multadd+0x5a>
 80061e2:	4602      	mov	r2, r0
 80061e4:	21ba      	movs	r1, #186	; 0xba
 80061e6:	4b0c      	ldr	r3, [pc, #48]	; (8006218 <__multadd+0x84>)
 80061e8:	480c      	ldr	r0, [pc, #48]	; (800621c <__multadd+0x88>)
 80061ea:	f000 fd23 	bl	8006c34 <__assert_func>
 80061ee:	6922      	ldr	r2, [r4, #16]
 80061f0:	f104 010c 	add.w	r1, r4, #12
 80061f4:	3202      	adds	r2, #2
 80061f6:	0092      	lsls	r2, r2, #2
 80061f8:	300c      	adds	r0, #12
 80061fa:	f000 fd0d 	bl	8006c18 <memcpy>
 80061fe:	4621      	mov	r1, r4
 8006200:	4638      	mov	r0, r7
 8006202:	f7ff ffa5 	bl	8006150 <_Bfree>
 8006206:	4644      	mov	r4, r8
 8006208:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800620c:	3501      	adds	r5, #1
 800620e:	615e      	str	r6, [r3, #20]
 8006210:	6125      	str	r5, [r4, #16]
 8006212:	4620      	mov	r0, r4
 8006214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006218:	080073be 	.word	0x080073be
 800621c:	080073cf 	.word	0x080073cf

08006220 <__hi0bits>:
 8006220:	0c02      	lsrs	r2, r0, #16
 8006222:	0412      	lsls	r2, r2, #16
 8006224:	4603      	mov	r3, r0
 8006226:	b9ca      	cbnz	r2, 800625c <__hi0bits+0x3c>
 8006228:	0403      	lsls	r3, r0, #16
 800622a:	2010      	movs	r0, #16
 800622c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006230:	bf04      	itt	eq
 8006232:	021b      	lsleq	r3, r3, #8
 8006234:	3008      	addeq	r0, #8
 8006236:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800623a:	bf04      	itt	eq
 800623c:	011b      	lsleq	r3, r3, #4
 800623e:	3004      	addeq	r0, #4
 8006240:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006244:	bf04      	itt	eq
 8006246:	009b      	lsleq	r3, r3, #2
 8006248:	3002      	addeq	r0, #2
 800624a:	2b00      	cmp	r3, #0
 800624c:	db05      	blt.n	800625a <__hi0bits+0x3a>
 800624e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006252:	f100 0001 	add.w	r0, r0, #1
 8006256:	bf08      	it	eq
 8006258:	2020      	moveq	r0, #32
 800625a:	4770      	bx	lr
 800625c:	2000      	movs	r0, #0
 800625e:	e7e5      	b.n	800622c <__hi0bits+0xc>

08006260 <__lo0bits>:
 8006260:	6803      	ldr	r3, [r0, #0]
 8006262:	4602      	mov	r2, r0
 8006264:	f013 0007 	ands.w	r0, r3, #7
 8006268:	d00b      	beq.n	8006282 <__lo0bits+0x22>
 800626a:	07d9      	lsls	r1, r3, #31
 800626c:	d421      	bmi.n	80062b2 <__lo0bits+0x52>
 800626e:	0798      	lsls	r0, r3, #30
 8006270:	bf49      	itett	mi
 8006272:	085b      	lsrmi	r3, r3, #1
 8006274:	089b      	lsrpl	r3, r3, #2
 8006276:	2001      	movmi	r0, #1
 8006278:	6013      	strmi	r3, [r2, #0]
 800627a:	bf5c      	itt	pl
 800627c:	2002      	movpl	r0, #2
 800627e:	6013      	strpl	r3, [r2, #0]
 8006280:	4770      	bx	lr
 8006282:	b299      	uxth	r1, r3
 8006284:	b909      	cbnz	r1, 800628a <__lo0bits+0x2a>
 8006286:	2010      	movs	r0, #16
 8006288:	0c1b      	lsrs	r3, r3, #16
 800628a:	b2d9      	uxtb	r1, r3
 800628c:	b909      	cbnz	r1, 8006292 <__lo0bits+0x32>
 800628e:	3008      	adds	r0, #8
 8006290:	0a1b      	lsrs	r3, r3, #8
 8006292:	0719      	lsls	r1, r3, #28
 8006294:	bf04      	itt	eq
 8006296:	091b      	lsreq	r3, r3, #4
 8006298:	3004      	addeq	r0, #4
 800629a:	0799      	lsls	r1, r3, #30
 800629c:	bf04      	itt	eq
 800629e:	089b      	lsreq	r3, r3, #2
 80062a0:	3002      	addeq	r0, #2
 80062a2:	07d9      	lsls	r1, r3, #31
 80062a4:	d403      	bmi.n	80062ae <__lo0bits+0x4e>
 80062a6:	085b      	lsrs	r3, r3, #1
 80062a8:	f100 0001 	add.w	r0, r0, #1
 80062ac:	d003      	beq.n	80062b6 <__lo0bits+0x56>
 80062ae:	6013      	str	r3, [r2, #0]
 80062b0:	4770      	bx	lr
 80062b2:	2000      	movs	r0, #0
 80062b4:	4770      	bx	lr
 80062b6:	2020      	movs	r0, #32
 80062b8:	4770      	bx	lr
	...

080062bc <__i2b>:
 80062bc:	b510      	push	{r4, lr}
 80062be:	460c      	mov	r4, r1
 80062c0:	2101      	movs	r1, #1
 80062c2:	f7ff ff05 	bl	80060d0 <_Balloc>
 80062c6:	4602      	mov	r2, r0
 80062c8:	b928      	cbnz	r0, 80062d6 <__i2b+0x1a>
 80062ca:	f240 1145 	movw	r1, #325	; 0x145
 80062ce:	4b04      	ldr	r3, [pc, #16]	; (80062e0 <__i2b+0x24>)
 80062d0:	4804      	ldr	r0, [pc, #16]	; (80062e4 <__i2b+0x28>)
 80062d2:	f000 fcaf 	bl	8006c34 <__assert_func>
 80062d6:	2301      	movs	r3, #1
 80062d8:	6144      	str	r4, [r0, #20]
 80062da:	6103      	str	r3, [r0, #16]
 80062dc:	bd10      	pop	{r4, pc}
 80062de:	bf00      	nop
 80062e0:	080073be 	.word	0x080073be
 80062e4:	080073cf 	.word	0x080073cf

080062e8 <__multiply>:
 80062e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ec:	4691      	mov	r9, r2
 80062ee:	690a      	ldr	r2, [r1, #16]
 80062f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80062f4:	460c      	mov	r4, r1
 80062f6:	429a      	cmp	r2, r3
 80062f8:	bfbe      	ittt	lt
 80062fa:	460b      	movlt	r3, r1
 80062fc:	464c      	movlt	r4, r9
 80062fe:	4699      	movlt	r9, r3
 8006300:	6927      	ldr	r7, [r4, #16]
 8006302:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006306:	68a3      	ldr	r3, [r4, #8]
 8006308:	6861      	ldr	r1, [r4, #4]
 800630a:	eb07 060a 	add.w	r6, r7, sl
 800630e:	42b3      	cmp	r3, r6
 8006310:	b085      	sub	sp, #20
 8006312:	bfb8      	it	lt
 8006314:	3101      	addlt	r1, #1
 8006316:	f7ff fedb 	bl	80060d0 <_Balloc>
 800631a:	b930      	cbnz	r0, 800632a <__multiply+0x42>
 800631c:	4602      	mov	r2, r0
 800631e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006322:	4b43      	ldr	r3, [pc, #268]	; (8006430 <__multiply+0x148>)
 8006324:	4843      	ldr	r0, [pc, #268]	; (8006434 <__multiply+0x14c>)
 8006326:	f000 fc85 	bl	8006c34 <__assert_func>
 800632a:	f100 0514 	add.w	r5, r0, #20
 800632e:	462b      	mov	r3, r5
 8006330:	2200      	movs	r2, #0
 8006332:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006336:	4543      	cmp	r3, r8
 8006338:	d321      	bcc.n	800637e <__multiply+0x96>
 800633a:	f104 0314 	add.w	r3, r4, #20
 800633e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006342:	f109 0314 	add.w	r3, r9, #20
 8006346:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800634a:	9202      	str	r2, [sp, #8]
 800634c:	1b3a      	subs	r2, r7, r4
 800634e:	3a15      	subs	r2, #21
 8006350:	f022 0203 	bic.w	r2, r2, #3
 8006354:	3204      	adds	r2, #4
 8006356:	f104 0115 	add.w	r1, r4, #21
 800635a:	428f      	cmp	r7, r1
 800635c:	bf38      	it	cc
 800635e:	2204      	movcc	r2, #4
 8006360:	9201      	str	r2, [sp, #4]
 8006362:	9a02      	ldr	r2, [sp, #8]
 8006364:	9303      	str	r3, [sp, #12]
 8006366:	429a      	cmp	r2, r3
 8006368:	d80c      	bhi.n	8006384 <__multiply+0x9c>
 800636a:	2e00      	cmp	r6, #0
 800636c:	dd03      	ble.n	8006376 <__multiply+0x8e>
 800636e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006372:	2b00      	cmp	r3, #0
 8006374:	d05a      	beq.n	800642c <__multiply+0x144>
 8006376:	6106      	str	r6, [r0, #16]
 8006378:	b005      	add	sp, #20
 800637a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800637e:	f843 2b04 	str.w	r2, [r3], #4
 8006382:	e7d8      	b.n	8006336 <__multiply+0x4e>
 8006384:	f8b3 a000 	ldrh.w	sl, [r3]
 8006388:	f1ba 0f00 	cmp.w	sl, #0
 800638c:	d023      	beq.n	80063d6 <__multiply+0xee>
 800638e:	46a9      	mov	r9, r5
 8006390:	f04f 0c00 	mov.w	ip, #0
 8006394:	f104 0e14 	add.w	lr, r4, #20
 8006398:	f85e 2b04 	ldr.w	r2, [lr], #4
 800639c:	f8d9 1000 	ldr.w	r1, [r9]
 80063a0:	fa1f fb82 	uxth.w	fp, r2
 80063a4:	b289      	uxth	r1, r1
 80063a6:	fb0a 110b 	mla	r1, sl, fp, r1
 80063aa:	4461      	add	r1, ip
 80063ac:	f8d9 c000 	ldr.w	ip, [r9]
 80063b0:	0c12      	lsrs	r2, r2, #16
 80063b2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80063b6:	fb0a c202 	mla	r2, sl, r2, ip
 80063ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80063be:	b289      	uxth	r1, r1
 80063c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80063c4:	4577      	cmp	r7, lr
 80063c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80063ca:	f849 1b04 	str.w	r1, [r9], #4
 80063ce:	d8e3      	bhi.n	8006398 <__multiply+0xb0>
 80063d0:	9a01      	ldr	r2, [sp, #4]
 80063d2:	f845 c002 	str.w	ip, [r5, r2]
 80063d6:	9a03      	ldr	r2, [sp, #12]
 80063d8:	3304      	adds	r3, #4
 80063da:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80063de:	f1b9 0f00 	cmp.w	r9, #0
 80063e2:	d021      	beq.n	8006428 <__multiply+0x140>
 80063e4:	46ae      	mov	lr, r5
 80063e6:	f04f 0a00 	mov.w	sl, #0
 80063ea:	6829      	ldr	r1, [r5, #0]
 80063ec:	f104 0c14 	add.w	ip, r4, #20
 80063f0:	f8bc b000 	ldrh.w	fp, [ip]
 80063f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80063f8:	b289      	uxth	r1, r1
 80063fa:	fb09 220b 	mla	r2, r9, fp, r2
 80063fe:	4452      	add	r2, sl
 8006400:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006404:	f84e 1b04 	str.w	r1, [lr], #4
 8006408:	f85c 1b04 	ldr.w	r1, [ip], #4
 800640c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006410:	f8be 1000 	ldrh.w	r1, [lr]
 8006414:	4567      	cmp	r7, ip
 8006416:	fb09 110a 	mla	r1, r9, sl, r1
 800641a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800641e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006422:	d8e5      	bhi.n	80063f0 <__multiply+0x108>
 8006424:	9a01      	ldr	r2, [sp, #4]
 8006426:	50a9      	str	r1, [r5, r2]
 8006428:	3504      	adds	r5, #4
 800642a:	e79a      	b.n	8006362 <__multiply+0x7a>
 800642c:	3e01      	subs	r6, #1
 800642e:	e79c      	b.n	800636a <__multiply+0x82>
 8006430:	080073be 	.word	0x080073be
 8006434:	080073cf 	.word	0x080073cf

08006438 <__pow5mult>:
 8006438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800643c:	4615      	mov	r5, r2
 800643e:	f012 0203 	ands.w	r2, r2, #3
 8006442:	4606      	mov	r6, r0
 8006444:	460f      	mov	r7, r1
 8006446:	d007      	beq.n	8006458 <__pow5mult+0x20>
 8006448:	4c25      	ldr	r4, [pc, #148]	; (80064e0 <__pow5mult+0xa8>)
 800644a:	3a01      	subs	r2, #1
 800644c:	2300      	movs	r3, #0
 800644e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006452:	f7ff fe9f 	bl	8006194 <__multadd>
 8006456:	4607      	mov	r7, r0
 8006458:	10ad      	asrs	r5, r5, #2
 800645a:	d03d      	beq.n	80064d8 <__pow5mult+0xa0>
 800645c:	69f4      	ldr	r4, [r6, #28]
 800645e:	b97c      	cbnz	r4, 8006480 <__pow5mult+0x48>
 8006460:	2010      	movs	r0, #16
 8006462:	f7ff fd81 	bl	8005f68 <malloc>
 8006466:	4602      	mov	r2, r0
 8006468:	61f0      	str	r0, [r6, #28]
 800646a:	b928      	cbnz	r0, 8006478 <__pow5mult+0x40>
 800646c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006470:	4b1c      	ldr	r3, [pc, #112]	; (80064e4 <__pow5mult+0xac>)
 8006472:	481d      	ldr	r0, [pc, #116]	; (80064e8 <__pow5mult+0xb0>)
 8006474:	f000 fbde 	bl	8006c34 <__assert_func>
 8006478:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800647c:	6004      	str	r4, [r0, #0]
 800647e:	60c4      	str	r4, [r0, #12]
 8006480:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006484:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006488:	b94c      	cbnz	r4, 800649e <__pow5mult+0x66>
 800648a:	f240 2171 	movw	r1, #625	; 0x271
 800648e:	4630      	mov	r0, r6
 8006490:	f7ff ff14 	bl	80062bc <__i2b>
 8006494:	2300      	movs	r3, #0
 8006496:	4604      	mov	r4, r0
 8006498:	f8c8 0008 	str.w	r0, [r8, #8]
 800649c:	6003      	str	r3, [r0, #0]
 800649e:	f04f 0900 	mov.w	r9, #0
 80064a2:	07eb      	lsls	r3, r5, #31
 80064a4:	d50a      	bpl.n	80064bc <__pow5mult+0x84>
 80064a6:	4639      	mov	r1, r7
 80064a8:	4622      	mov	r2, r4
 80064aa:	4630      	mov	r0, r6
 80064ac:	f7ff ff1c 	bl	80062e8 <__multiply>
 80064b0:	4680      	mov	r8, r0
 80064b2:	4639      	mov	r1, r7
 80064b4:	4630      	mov	r0, r6
 80064b6:	f7ff fe4b 	bl	8006150 <_Bfree>
 80064ba:	4647      	mov	r7, r8
 80064bc:	106d      	asrs	r5, r5, #1
 80064be:	d00b      	beq.n	80064d8 <__pow5mult+0xa0>
 80064c0:	6820      	ldr	r0, [r4, #0]
 80064c2:	b938      	cbnz	r0, 80064d4 <__pow5mult+0x9c>
 80064c4:	4622      	mov	r2, r4
 80064c6:	4621      	mov	r1, r4
 80064c8:	4630      	mov	r0, r6
 80064ca:	f7ff ff0d 	bl	80062e8 <__multiply>
 80064ce:	6020      	str	r0, [r4, #0]
 80064d0:	f8c0 9000 	str.w	r9, [r0]
 80064d4:	4604      	mov	r4, r0
 80064d6:	e7e4      	b.n	80064a2 <__pow5mult+0x6a>
 80064d8:	4638      	mov	r0, r7
 80064da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064de:	bf00      	nop
 80064e0:	08007518 	.word	0x08007518
 80064e4:	0800734f 	.word	0x0800734f
 80064e8:	080073cf 	.word	0x080073cf

080064ec <__lshift>:
 80064ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064f0:	460c      	mov	r4, r1
 80064f2:	4607      	mov	r7, r0
 80064f4:	4691      	mov	r9, r2
 80064f6:	6923      	ldr	r3, [r4, #16]
 80064f8:	6849      	ldr	r1, [r1, #4]
 80064fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80064fe:	68a3      	ldr	r3, [r4, #8]
 8006500:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006504:	f108 0601 	add.w	r6, r8, #1
 8006508:	42b3      	cmp	r3, r6
 800650a:	db0b      	blt.n	8006524 <__lshift+0x38>
 800650c:	4638      	mov	r0, r7
 800650e:	f7ff fddf 	bl	80060d0 <_Balloc>
 8006512:	4605      	mov	r5, r0
 8006514:	b948      	cbnz	r0, 800652a <__lshift+0x3e>
 8006516:	4602      	mov	r2, r0
 8006518:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800651c:	4b27      	ldr	r3, [pc, #156]	; (80065bc <__lshift+0xd0>)
 800651e:	4828      	ldr	r0, [pc, #160]	; (80065c0 <__lshift+0xd4>)
 8006520:	f000 fb88 	bl	8006c34 <__assert_func>
 8006524:	3101      	adds	r1, #1
 8006526:	005b      	lsls	r3, r3, #1
 8006528:	e7ee      	b.n	8006508 <__lshift+0x1c>
 800652a:	2300      	movs	r3, #0
 800652c:	f100 0114 	add.w	r1, r0, #20
 8006530:	f100 0210 	add.w	r2, r0, #16
 8006534:	4618      	mov	r0, r3
 8006536:	4553      	cmp	r3, sl
 8006538:	db33      	blt.n	80065a2 <__lshift+0xb6>
 800653a:	6920      	ldr	r0, [r4, #16]
 800653c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006540:	f104 0314 	add.w	r3, r4, #20
 8006544:	f019 091f 	ands.w	r9, r9, #31
 8006548:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800654c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006550:	d02b      	beq.n	80065aa <__lshift+0xbe>
 8006552:	468a      	mov	sl, r1
 8006554:	2200      	movs	r2, #0
 8006556:	f1c9 0e20 	rsb	lr, r9, #32
 800655a:	6818      	ldr	r0, [r3, #0]
 800655c:	fa00 f009 	lsl.w	r0, r0, r9
 8006560:	4310      	orrs	r0, r2
 8006562:	f84a 0b04 	str.w	r0, [sl], #4
 8006566:	f853 2b04 	ldr.w	r2, [r3], #4
 800656a:	459c      	cmp	ip, r3
 800656c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006570:	d8f3      	bhi.n	800655a <__lshift+0x6e>
 8006572:	ebac 0304 	sub.w	r3, ip, r4
 8006576:	3b15      	subs	r3, #21
 8006578:	f023 0303 	bic.w	r3, r3, #3
 800657c:	3304      	adds	r3, #4
 800657e:	f104 0015 	add.w	r0, r4, #21
 8006582:	4584      	cmp	ip, r0
 8006584:	bf38      	it	cc
 8006586:	2304      	movcc	r3, #4
 8006588:	50ca      	str	r2, [r1, r3]
 800658a:	b10a      	cbz	r2, 8006590 <__lshift+0xa4>
 800658c:	f108 0602 	add.w	r6, r8, #2
 8006590:	3e01      	subs	r6, #1
 8006592:	4638      	mov	r0, r7
 8006594:	4621      	mov	r1, r4
 8006596:	612e      	str	r6, [r5, #16]
 8006598:	f7ff fdda 	bl	8006150 <_Bfree>
 800659c:	4628      	mov	r0, r5
 800659e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80065a6:	3301      	adds	r3, #1
 80065a8:	e7c5      	b.n	8006536 <__lshift+0x4a>
 80065aa:	3904      	subs	r1, #4
 80065ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80065b0:	459c      	cmp	ip, r3
 80065b2:	f841 2f04 	str.w	r2, [r1, #4]!
 80065b6:	d8f9      	bhi.n	80065ac <__lshift+0xc0>
 80065b8:	e7ea      	b.n	8006590 <__lshift+0xa4>
 80065ba:	bf00      	nop
 80065bc:	080073be 	.word	0x080073be
 80065c0:	080073cf 	.word	0x080073cf

080065c4 <__mcmp>:
 80065c4:	4603      	mov	r3, r0
 80065c6:	690a      	ldr	r2, [r1, #16]
 80065c8:	6900      	ldr	r0, [r0, #16]
 80065ca:	b530      	push	{r4, r5, lr}
 80065cc:	1a80      	subs	r0, r0, r2
 80065ce:	d10d      	bne.n	80065ec <__mcmp+0x28>
 80065d0:	3314      	adds	r3, #20
 80065d2:	3114      	adds	r1, #20
 80065d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80065d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80065dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80065e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80065e4:	4295      	cmp	r5, r2
 80065e6:	d002      	beq.n	80065ee <__mcmp+0x2a>
 80065e8:	d304      	bcc.n	80065f4 <__mcmp+0x30>
 80065ea:	2001      	movs	r0, #1
 80065ec:	bd30      	pop	{r4, r5, pc}
 80065ee:	42a3      	cmp	r3, r4
 80065f0:	d3f4      	bcc.n	80065dc <__mcmp+0x18>
 80065f2:	e7fb      	b.n	80065ec <__mcmp+0x28>
 80065f4:	f04f 30ff 	mov.w	r0, #4294967295
 80065f8:	e7f8      	b.n	80065ec <__mcmp+0x28>
	...

080065fc <__mdiff>:
 80065fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006600:	460d      	mov	r5, r1
 8006602:	4607      	mov	r7, r0
 8006604:	4611      	mov	r1, r2
 8006606:	4628      	mov	r0, r5
 8006608:	4614      	mov	r4, r2
 800660a:	f7ff ffdb 	bl	80065c4 <__mcmp>
 800660e:	1e06      	subs	r6, r0, #0
 8006610:	d111      	bne.n	8006636 <__mdiff+0x3a>
 8006612:	4631      	mov	r1, r6
 8006614:	4638      	mov	r0, r7
 8006616:	f7ff fd5b 	bl	80060d0 <_Balloc>
 800661a:	4602      	mov	r2, r0
 800661c:	b928      	cbnz	r0, 800662a <__mdiff+0x2e>
 800661e:	f240 2137 	movw	r1, #567	; 0x237
 8006622:	4b3a      	ldr	r3, [pc, #232]	; (800670c <__mdiff+0x110>)
 8006624:	483a      	ldr	r0, [pc, #232]	; (8006710 <__mdiff+0x114>)
 8006626:	f000 fb05 	bl	8006c34 <__assert_func>
 800662a:	2301      	movs	r3, #1
 800662c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006630:	4610      	mov	r0, r2
 8006632:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006636:	bfa4      	itt	ge
 8006638:	4623      	movge	r3, r4
 800663a:	462c      	movge	r4, r5
 800663c:	4638      	mov	r0, r7
 800663e:	6861      	ldr	r1, [r4, #4]
 8006640:	bfa6      	itte	ge
 8006642:	461d      	movge	r5, r3
 8006644:	2600      	movge	r6, #0
 8006646:	2601      	movlt	r6, #1
 8006648:	f7ff fd42 	bl	80060d0 <_Balloc>
 800664c:	4602      	mov	r2, r0
 800664e:	b918      	cbnz	r0, 8006658 <__mdiff+0x5c>
 8006650:	f240 2145 	movw	r1, #581	; 0x245
 8006654:	4b2d      	ldr	r3, [pc, #180]	; (800670c <__mdiff+0x110>)
 8006656:	e7e5      	b.n	8006624 <__mdiff+0x28>
 8006658:	f102 0814 	add.w	r8, r2, #20
 800665c:	46c2      	mov	sl, r8
 800665e:	f04f 0c00 	mov.w	ip, #0
 8006662:	6927      	ldr	r7, [r4, #16]
 8006664:	60c6      	str	r6, [r0, #12]
 8006666:	692e      	ldr	r6, [r5, #16]
 8006668:	f104 0014 	add.w	r0, r4, #20
 800666c:	f105 0914 	add.w	r9, r5, #20
 8006670:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006674:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006678:	3410      	adds	r4, #16
 800667a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800667e:	f859 3b04 	ldr.w	r3, [r9], #4
 8006682:	fa1f f18b 	uxth.w	r1, fp
 8006686:	4461      	add	r1, ip
 8006688:	fa1f fc83 	uxth.w	ip, r3
 800668c:	0c1b      	lsrs	r3, r3, #16
 800668e:	eba1 010c 	sub.w	r1, r1, ip
 8006692:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006696:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800669a:	b289      	uxth	r1, r1
 800669c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80066a0:	454e      	cmp	r6, r9
 80066a2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80066a6:	f84a 1b04 	str.w	r1, [sl], #4
 80066aa:	d8e6      	bhi.n	800667a <__mdiff+0x7e>
 80066ac:	1b73      	subs	r3, r6, r5
 80066ae:	3b15      	subs	r3, #21
 80066b0:	f023 0303 	bic.w	r3, r3, #3
 80066b4:	3515      	adds	r5, #21
 80066b6:	3304      	adds	r3, #4
 80066b8:	42ae      	cmp	r6, r5
 80066ba:	bf38      	it	cc
 80066bc:	2304      	movcc	r3, #4
 80066be:	4418      	add	r0, r3
 80066c0:	4443      	add	r3, r8
 80066c2:	461e      	mov	r6, r3
 80066c4:	4605      	mov	r5, r0
 80066c6:	4575      	cmp	r5, lr
 80066c8:	d30e      	bcc.n	80066e8 <__mdiff+0xec>
 80066ca:	f10e 0103 	add.w	r1, lr, #3
 80066ce:	1a09      	subs	r1, r1, r0
 80066d0:	f021 0103 	bic.w	r1, r1, #3
 80066d4:	3803      	subs	r0, #3
 80066d6:	4586      	cmp	lr, r0
 80066d8:	bf38      	it	cc
 80066da:	2100      	movcc	r1, #0
 80066dc:	440b      	add	r3, r1
 80066de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80066e2:	b189      	cbz	r1, 8006708 <__mdiff+0x10c>
 80066e4:	6117      	str	r7, [r2, #16]
 80066e6:	e7a3      	b.n	8006630 <__mdiff+0x34>
 80066e8:	f855 8b04 	ldr.w	r8, [r5], #4
 80066ec:	fa1f f188 	uxth.w	r1, r8
 80066f0:	4461      	add	r1, ip
 80066f2:	140c      	asrs	r4, r1, #16
 80066f4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80066f8:	b289      	uxth	r1, r1
 80066fa:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80066fe:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006702:	f846 1b04 	str.w	r1, [r6], #4
 8006706:	e7de      	b.n	80066c6 <__mdiff+0xca>
 8006708:	3f01      	subs	r7, #1
 800670a:	e7e8      	b.n	80066de <__mdiff+0xe2>
 800670c:	080073be 	.word	0x080073be
 8006710:	080073cf 	.word	0x080073cf

08006714 <__d2b>:
 8006714:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006716:	2101      	movs	r1, #1
 8006718:	4617      	mov	r7, r2
 800671a:	461c      	mov	r4, r3
 800671c:	9e08      	ldr	r6, [sp, #32]
 800671e:	f7ff fcd7 	bl	80060d0 <_Balloc>
 8006722:	4605      	mov	r5, r0
 8006724:	b930      	cbnz	r0, 8006734 <__d2b+0x20>
 8006726:	4602      	mov	r2, r0
 8006728:	f240 310f 	movw	r1, #783	; 0x30f
 800672c:	4b22      	ldr	r3, [pc, #136]	; (80067b8 <__d2b+0xa4>)
 800672e:	4823      	ldr	r0, [pc, #140]	; (80067bc <__d2b+0xa8>)
 8006730:	f000 fa80 	bl	8006c34 <__assert_func>
 8006734:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006738:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800673c:	bb24      	cbnz	r4, 8006788 <__d2b+0x74>
 800673e:	2f00      	cmp	r7, #0
 8006740:	9301      	str	r3, [sp, #4]
 8006742:	d026      	beq.n	8006792 <__d2b+0x7e>
 8006744:	4668      	mov	r0, sp
 8006746:	9700      	str	r7, [sp, #0]
 8006748:	f7ff fd8a 	bl	8006260 <__lo0bits>
 800674c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006750:	b1e8      	cbz	r0, 800678e <__d2b+0x7a>
 8006752:	f1c0 0320 	rsb	r3, r0, #32
 8006756:	fa02 f303 	lsl.w	r3, r2, r3
 800675a:	430b      	orrs	r3, r1
 800675c:	40c2      	lsrs	r2, r0
 800675e:	616b      	str	r3, [r5, #20]
 8006760:	9201      	str	r2, [sp, #4]
 8006762:	9b01      	ldr	r3, [sp, #4]
 8006764:	2b00      	cmp	r3, #0
 8006766:	bf14      	ite	ne
 8006768:	2102      	movne	r1, #2
 800676a:	2101      	moveq	r1, #1
 800676c:	61ab      	str	r3, [r5, #24]
 800676e:	6129      	str	r1, [r5, #16]
 8006770:	b1bc      	cbz	r4, 80067a2 <__d2b+0x8e>
 8006772:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006776:	4404      	add	r4, r0
 8006778:	6034      	str	r4, [r6, #0]
 800677a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800677e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006780:	6018      	str	r0, [r3, #0]
 8006782:	4628      	mov	r0, r5
 8006784:	b003      	add	sp, #12
 8006786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006788:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800678c:	e7d7      	b.n	800673e <__d2b+0x2a>
 800678e:	6169      	str	r1, [r5, #20]
 8006790:	e7e7      	b.n	8006762 <__d2b+0x4e>
 8006792:	a801      	add	r0, sp, #4
 8006794:	f7ff fd64 	bl	8006260 <__lo0bits>
 8006798:	9b01      	ldr	r3, [sp, #4]
 800679a:	2101      	movs	r1, #1
 800679c:	616b      	str	r3, [r5, #20]
 800679e:	3020      	adds	r0, #32
 80067a0:	e7e5      	b.n	800676e <__d2b+0x5a>
 80067a2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80067a6:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80067aa:	6030      	str	r0, [r6, #0]
 80067ac:	6918      	ldr	r0, [r3, #16]
 80067ae:	f7ff fd37 	bl	8006220 <__hi0bits>
 80067b2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80067b6:	e7e2      	b.n	800677e <__d2b+0x6a>
 80067b8:	080073be 	.word	0x080073be
 80067bc:	080073cf 	.word	0x080073cf

080067c0 <__ssputs_r>:
 80067c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067c4:	461f      	mov	r7, r3
 80067c6:	688e      	ldr	r6, [r1, #8]
 80067c8:	4682      	mov	sl, r0
 80067ca:	42be      	cmp	r6, r7
 80067cc:	460c      	mov	r4, r1
 80067ce:	4690      	mov	r8, r2
 80067d0:	680b      	ldr	r3, [r1, #0]
 80067d2:	d82c      	bhi.n	800682e <__ssputs_r+0x6e>
 80067d4:	898a      	ldrh	r2, [r1, #12]
 80067d6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80067da:	d026      	beq.n	800682a <__ssputs_r+0x6a>
 80067dc:	6965      	ldr	r5, [r4, #20]
 80067de:	6909      	ldr	r1, [r1, #16]
 80067e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80067e4:	eba3 0901 	sub.w	r9, r3, r1
 80067e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80067ec:	1c7b      	adds	r3, r7, #1
 80067ee:	444b      	add	r3, r9
 80067f0:	106d      	asrs	r5, r5, #1
 80067f2:	429d      	cmp	r5, r3
 80067f4:	bf38      	it	cc
 80067f6:	461d      	movcc	r5, r3
 80067f8:	0553      	lsls	r3, r2, #21
 80067fa:	d527      	bpl.n	800684c <__ssputs_r+0x8c>
 80067fc:	4629      	mov	r1, r5
 80067fe:	f7ff fbdb 	bl	8005fb8 <_malloc_r>
 8006802:	4606      	mov	r6, r0
 8006804:	b360      	cbz	r0, 8006860 <__ssputs_r+0xa0>
 8006806:	464a      	mov	r2, r9
 8006808:	6921      	ldr	r1, [r4, #16]
 800680a:	f000 fa05 	bl	8006c18 <memcpy>
 800680e:	89a3      	ldrh	r3, [r4, #12]
 8006810:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006818:	81a3      	strh	r3, [r4, #12]
 800681a:	6126      	str	r6, [r4, #16]
 800681c:	444e      	add	r6, r9
 800681e:	6026      	str	r6, [r4, #0]
 8006820:	463e      	mov	r6, r7
 8006822:	6165      	str	r5, [r4, #20]
 8006824:	eba5 0509 	sub.w	r5, r5, r9
 8006828:	60a5      	str	r5, [r4, #8]
 800682a:	42be      	cmp	r6, r7
 800682c:	d900      	bls.n	8006830 <__ssputs_r+0x70>
 800682e:	463e      	mov	r6, r7
 8006830:	4632      	mov	r2, r6
 8006832:	4641      	mov	r1, r8
 8006834:	6820      	ldr	r0, [r4, #0]
 8006836:	f000 f9c5 	bl	8006bc4 <memmove>
 800683a:	2000      	movs	r0, #0
 800683c:	68a3      	ldr	r3, [r4, #8]
 800683e:	1b9b      	subs	r3, r3, r6
 8006840:	60a3      	str	r3, [r4, #8]
 8006842:	6823      	ldr	r3, [r4, #0]
 8006844:	4433      	add	r3, r6
 8006846:	6023      	str	r3, [r4, #0]
 8006848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800684c:	462a      	mov	r2, r5
 800684e:	f000 fa35 	bl	8006cbc <_realloc_r>
 8006852:	4606      	mov	r6, r0
 8006854:	2800      	cmp	r0, #0
 8006856:	d1e0      	bne.n	800681a <__ssputs_r+0x5a>
 8006858:	4650      	mov	r0, sl
 800685a:	6921      	ldr	r1, [r4, #16]
 800685c:	f7ff fb3c 	bl	8005ed8 <_free_r>
 8006860:	230c      	movs	r3, #12
 8006862:	f8ca 3000 	str.w	r3, [sl]
 8006866:	89a3      	ldrh	r3, [r4, #12]
 8006868:	f04f 30ff 	mov.w	r0, #4294967295
 800686c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006870:	81a3      	strh	r3, [r4, #12]
 8006872:	e7e9      	b.n	8006848 <__ssputs_r+0x88>

08006874 <_svfiprintf_r>:
 8006874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006878:	4698      	mov	r8, r3
 800687a:	898b      	ldrh	r3, [r1, #12]
 800687c:	4607      	mov	r7, r0
 800687e:	061b      	lsls	r3, r3, #24
 8006880:	460d      	mov	r5, r1
 8006882:	4614      	mov	r4, r2
 8006884:	b09d      	sub	sp, #116	; 0x74
 8006886:	d50e      	bpl.n	80068a6 <_svfiprintf_r+0x32>
 8006888:	690b      	ldr	r3, [r1, #16]
 800688a:	b963      	cbnz	r3, 80068a6 <_svfiprintf_r+0x32>
 800688c:	2140      	movs	r1, #64	; 0x40
 800688e:	f7ff fb93 	bl	8005fb8 <_malloc_r>
 8006892:	6028      	str	r0, [r5, #0]
 8006894:	6128      	str	r0, [r5, #16]
 8006896:	b920      	cbnz	r0, 80068a2 <_svfiprintf_r+0x2e>
 8006898:	230c      	movs	r3, #12
 800689a:	603b      	str	r3, [r7, #0]
 800689c:	f04f 30ff 	mov.w	r0, #4294967295
 80068a0:	e0d0      	b.n	8006a44 <_svfiprintf_r+0x1d0>
 80068a2:	2340      	movs	r3, #64	; 0x40
 80068a4:	616b      	str	r3, [r5, #20]
 80068a6:	2300      	movs	r3, #0
 80068a8:	9309      	str	r3, [sp, #36]	; 0x24
 80068aa:	2320      	movs	r3, #32
 80068ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068b0:	2330      	movs	r3, #48	; 0x30
 80068b2:	f04f 0901 	mov.w	r9, #1
 80068b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80068ba:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8006a5c <_svfiprintf_r+0x1e8>
 80068be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068c2:	4623      	mov	r3, r4
 80068c4:	469a      	mov	sl, r3
 80068c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068ca:	b10a      	cbz	r2, 80068d0 <_svfiprintf_r+0x5c>
 80068cc:	2a25      	cmp	r2, #37	; 0x25
 80068ce:	d1f9      	bne.n	80068c4 <_svfiprintf_r+0x50>
 80068d0:	ebba 0b04 	subs.w	fp, sl, r4
 80068d4:	d00b      	beq.n	80068ee <_svfiprintf_r+0x7a>
 80068d6:	465b      	mov	r3, fp
 80068d8:	4622      	mov	r2, r4
 80068da:	4629      	mov	r1, r5
 80068dc:	4638      	mov	r0, r7
 80068de:	f7ff ff6f 	bl	80067c0 <__ssputs_r>
 80068e2:	3001      	adds	r0, #1
 80068e4:	f000 80a9 	beq.w	8006a3a <_svfiprintf_r+0x1c6>
 80068e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068ea:	445a      	add	r2, fp
 80068ec:	9209      	str	r2, [sp, #36]	; 0x24
 80068ee:	f89a 3000 	ldrb.w	r3, [sl]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	f000 80a1 	beq.w	8006a3a <_svfiprintf_r+0x1c6>
 80068f8:	2300      	movs	r3, #0
 80068fa:	f04f 32ff 	mov.w	r2, #4294967295
 80068fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006902:	f10a 0a01 	add.w	sl, sl, #1
 8006906:	9304      	str	r3, [sp, #16]
 8006908:	9307      	str	r3, [sp, #28]
 800690a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800690e:	931a      	str	r3, [sp, #104]	; 0x68
 8006910:	4654      	mov	r4, sl
 8006912:	2205      	movs	r2, #5
 8006914:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006918:	4850      	ldr	r0, [pc, #320]	; (8006a5c <_svfiprintf_r+0x1e8>)
 800691a:	f7fe fc5f 	bl	80051dc <memchr>
 800691e:	9a04      	ldr	r2, [sp, #16]
 8006920:	b9d8      	cbnz	r0, 800695a <_svfiprintf_r+0xe6>
 8006922:	06d0      	lsls	r0, r2, #27
 8006924:	bf44      	itt	mi
 8006926:	2320      	movmi	r3, #32
 8006928:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800692c:	0711      	lsls	r1, r2, #28
 800692e:	bf44      	itt	mi
 8006930:	232b      	movmi	r3, #43	; 0x2b
 8006932:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006936:	f89a 3000 	ldrb.w	r3, [sl]
 800693a:	2b2a      	cmp	r3, #42	; 0x2a
 800693c:	d015      	beq.n	800696a <_svfiprintf_r+0xf6>
 800693e:	4654      	mov	r4, sl
 8006940:	2000      	movs	r0, #0
 8006942:	f04f 0c0a 	mov.w	ip, #10
 8006946:	9a07      	ldr	r2, [sp, #28]
 8006948:	4621      	mov	r1, r4
 800694a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800694e:	3b30      	subs	r3, #48	; 0x30
 8006950:	2b09      	cmp	r3, #9
 8006952:	d94d      	bls.n	80069f0 <_svfiprintf_r+0x17c>
 8006954:	b1b0      	cbz	r0, 8006984 <_svfiprintf_r+0x110>
 8006956:	9207      	str	r2, [sp, #28]
 8006958:	e014      	b.n	8006984 <_svfiprintf_r+0x110>
 800695a:	eba0 0308 	sub.w	r3, r0, r8
 800695e:	fa09 f303 	lsl.w	r3, r9, r3
 8006962:	4313      	orrs	r3, r2
 8006964:	46a2      	mov	sl, r4
 8006966:	9304      	str	r3, [sp, #16]
 8006968:	e7d2      	b.n	8006910 <_svfiprintf_r+0x9c>
 800696a:	9b03      	ldr	r3, [sp, #12]
 800696c:	1d19      	adds	r1, r3, #4
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	9103      	str	r1, [sp, #12]
 8006972:	2b00      	cmp	r3, #0
 8006974:	bfbb      	ittet	lt
 8006976:	425b      	neglt	r3, r3
 8006978:	f042 0202 	orrlt.w	r2, r2, #2
 800697c:	9307      	strge	r3, [sp, #28]
 800697e:	9307      	strlt	r3, [sp, #28]
 8006980:	bfb8      	it	lt
 8006982:	9204      	strlt	r2, [sp, #16]
 8006984:	7823      	ldrb	r3, [r4, #0]
 8006986:	2b2e      	cmp	r3, #46	; 0x2e
 8006988:	d10c      	bne.n	80069a4 <_svfiprintf_r+0x130>
 800698a:	7863      	ldrb	r3, [r4, #1]
 800698c:	2b2a      	cmp	r3, #42	; 0x2a
 800698e:	d134      	bne.n	80069fa <_svfiprintf_r+0x186>
 8006990:	9b03      	ldr	r3, [sp, #12]
 8006992:	3402      	adds	r4, #2
 8006994:	1d1a      	adds	r2, r3, #4
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	9203      	str	r2, [sp, #12]
 800699a:	2b00      	cmp	r3, #0
 800699c:	bfb8      	it	lt
 800699e:	f04f 33ff 	movlt.w	r3, #4294967295
 80069a2:	9305      	str	r3, [sp, #20]
 80069a4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8006a60 <_svfiprintf_r+0x1ec>
 80069a8:	2203      	movs	r2, #3
 80069aa:	4650      	mov	r0, sl
 80069ac:	7821      	ldrb	r1, [r4, #0]
 80069ae:	f7fe fc15 	bl	80051dc <memchr>
 80069b2:	b138      	cbz	r0, 80069c4 <_svfiprintf_r+0x150>
 80069b4:	2240      	movs	r2, #64	; 0x40
 80069b6:	9b04      	ldr	r3, [sp, #16]
 80069b8:	eba0 000a 	sub.w	r0, r0, sl
 80069bc:	4082      	lsls	r2, r0
 80069be:	4313      	orrs	r3, r2
 80069c0:	3401      	adds	r4, #1
 80069c2:	9304      	str	r3, [sp, #16]
 80069c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069c8:	2206      	movs	r2, #6
 80069ca:	4826      	ldr	r0, [pc, #152]	; (8006a64 <_svfiprintf_r+0x1f0>)
 80069cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069d0:	f7fe fc04 	bl	80051dc <memchr>
 80069d4:	2800      	cmp	r0, #0
 80069d6:	d038      	beq.n	8006a4a <_svfiprintf_r+0x1d6>
 80069d8:	4b23      	ldr	r3, [pc, #140]	; (8006a68 <_svfiprintf_r+0x1f4>)
 80069da:	bb1b      	cbnz	r3, 8006a24 <_svfiprintf_r+0x1b0>
 80069dc:	9b03      	ldr	r3, [sp, #12]
 80069de:	3307      	adds	r3, #7
 80069e0:	f023 0307 	bic.w	r3, r3, #7
 80069e4:	3308      	adds	r3, #8
 80069e6:	9303      	str	r3, [sp, #12]
 80069e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069ea:	4433      	add	r3, r6
 80069ec:	9309      	str	r3, [sp, #36]	; 0x24
 80069ee:	e768      	b.n	80068c2 <_svfiprintf_r+0x4e>
 80069f0:	460c      	mov	r4, r1
 80069f2:	2001      	movs	r0, #1
 80069f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80069f8:	e7a6      	b.n	8006948 <_svfiprintf_r+0xd4>
 80069fa:	2300      	movs	r3, #0
 80069fc:	f04f 0c0a 	mov.w	ip, #10
 8006a00:	4619      	mov	r1, r3
 8006a02:	3401      	adds	r4, #1
 8006a04:	9305      	str	r3, [sp, #20]
 8006a06:	4620      	mov	r0, r4
 8006a08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a0c:	3a30      	subs	r2, #48	; 0x30
 8006a0e:	2a09      	cmp	r2, #9
 8006a10:	d903      	bls.n	8006a1a <_svfiprintf_r+0x1a6>
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d0c6      	beq.n	80069a4 <_svfiprintf_r+0x130>
 8006a16:	9105      	str	r1, [sp, #20]
 8006a18:	e7c4      	b.n	80069a4 <_svfiprintf_r+0x130>
 8006a1a:	4604      	mov	r4, r0
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a22:	e7f0      	b.n	8006a06 <_svfiprintf_r+0x192>
 8006a24:	ab03      	add	r3, sp, #12
 8006a26:	9300      	str	r3, [sp, #0]
 8006a28:	462a      	mov	r2, r5
 8006a2a:	4638      	mov	r0, r7
 8006a2c:	4b0f      	ldr	r3, [pc, #60]	; (8006a6c <_svfiprintf_r+0x1f8>)
 8006a2e:	a904      	add	r1, sp, #16
 8006a30:	f7fd fe80 	bl	8004734 <_printf_float>
 8006a34:	1c42      	adds	r2, r0, #1
 8006a36:	4606      	mov	r6, r0
 8006a38:	d1d6      	bne.n	80069e8 <_svfiprintf_r+0x174>
 8006a3a:	89ab      	ldrh	r3, [r5, #12]
 8006a3c:	065b      	lsls	r3, r3, #25
 8006a3e:	f53f af2d 	bmi.w	800689c <_svfiprintf_r+0x28>
 8006a42:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a44:	b01d      	add	sp, #116	; 0x74
 8006a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a4a:	ab03      	add	r3, sp, #12
 8006a4c:	9300      	str	r3, [sp, #0]
 8006a4e:	462a      	mov	r2, r5
 8006a50:	4638      	mov	r0, r7
 8006a52:	4b06      	ldr	r3, [pc, #24]	; (8006a6c <_svfiprintf_r+0x1f8>)
 8006a54:	a904      	add	r1, sp, #16
 8006a56:	f7fe f90d 	bl	8004c74 <_printf_i>
 8006a5a:	e7eb      	b.n	8006a34 <_svfiprintf_r+0x1c0>
 8006a5c:	08007524 	.word	0x08007524
 8006a60:	0800752a 	.word	0x0800752a
 8006a64:	0800752e 	.word	0x0800752e
 8006a68:	08004735 	.word	0x08004735
 8006a6c:	080067c1 	.word	0x080067c1

08006a70 <__sflush_r>:
 8006a70:	898a      	ldrh	r2, [r1, #12]
 8006a72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a74:	4605      	mov	r5, r0
 8006a76:	0710      	lsls	r0, r2, #28
 8006a78:	460c      	mov	r4, r1
 8006a7a:	d457      	bmi.n	8006b2c <__sflush_r+0xbc>
 8006a7c:	684b      	ldr	r3, [r1, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	dc04      	bgt.n	8006a8c <__sflush_r+0x1c>
 8006a82:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	dc01      	bgt.n	8006a8c <__sflush_r+0x1c>
 8006a88:	2000      	movs	r0, #0
 8006a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a8e:	2e00      	cmp	r6, #0
 8006a90:	d0fa      	beq.n	8006a88 <__sflush_r+0x18>
 8006a92:	2300      	movs	r3, #0
 8006a94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a98:	682f      	ldr	r7, [r5, #0]
 8006a9a:	6a21      	ldr	r1, [r4, #32]
 8006a9c:	602b      	str	r3, [r5, #0]
 8006a9e:	d032      	beq.n	8006b06 <__sflush_r+0x96>
 8006aa0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006aa2:	89a3      	ldrh	r3, [r4, #12]
 8006aa4:	075a      	lsls	r2, r3, #29
 8006aa6:	d505      	bpl.n	8006ab4 <__sflush_r+0x44>
 8006aa8:	6863      	ldr	r3, [r4, #4]
 8006aaa:	1ac0      	subs	r0, r0, r3
 8006aac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006aae:	b10b      	cbz	r3, 8006ab4 <__sflush_r+0x44>
 8006ab0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ab2:	1ac0      	subs	r0, r0, r3
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006aba:	4628      	mov	r0, r5
 8006abc:	6a21      	ldr	r1, [r4, #32]
 8006abe:	47b0      	blx	r6
 8006ac0:	1c43      	adds	r3, r0, #1
 8006ac2:	89a3      	ldrh	r3, [r4, #12]
 8006ac4:	d106      	bne.n	8006ad4 <__sflush_r+0x64>
 8006ac6:	6829      	ldr	r1, [r5, #0]
 8006ac8:	291d      	cmp	r1, #29
 8006aca:	d82b      	bhi.n	8006b24 <__sflush_r+0xb4>
 8006acc:	4a28      	ldr	r2, [pc, #160]	; (8006b70 <__sflush_r+0x100>)
 8006ace:	410a      	asrs	r2, r1
 8006ad0:	07d6      	lsls	r6, r2, #31
 8006ad2:	d427      	bmi.n	8006b24 <__sflush_r+0xb4>
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	6062      	str	r2, [r4, #4]
 8006ad8:	6922      	ldr	r2, [r4, #16]
 8006ada:	04d9      	lsls	r1, r3, #19
 8006adc:	6022      	str	r2, [r4, #0]
 8006ade:	d504      	bpl.n	8006aea <__sflush_r+0x7a>
 8006ae0:	1c42      	adds	r2, r0, #1
 8006ae2:	d101      	bne.n	8006ae8 <__sflush_r+0x78>
 8006ae4:	682b      	ldr	r3, [r5, #0]
 8006ae6:	b903      	cbnz	r3, 8006aea <__sflush_r+0x7a>
 8006ae8:	6560      	str	r0, [r4, #84]	; 0x54
 8006aea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006aec:	602f      	str	r7, [r5, #0]
 8006aee:	2900      	cmp	r1, #0
 8006af0:	d0ca      	beq.n	8006a88 <__sflush_r+0x18>
 8006af2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006af6:	4299      	cmp	r1, r3
 8006af8:	d002      	beq.n	8006b00 <__sflush_r+0x90>
 8006afa:	4628      	mov	r0, r5
 8006afc:	f7ff f9ec 	bl	8005ed8 <_free_r>
 8006b00:	2000      	movs	r0, #0
 8006b02:	6360      	str	r0, [r4, #52]	; 0x34
 8006b04:	e7c1      	b.n	8006a8a <__sflush_r+0x1a>
 8006b06:	2301      	movs	r3, #1
 8006b08:	4628      	mov	r0, r5
 8006b0a:	47b0      	blx	r6
 8006b0c:	1c41      	adds	r1, r0, #1
 8006b0e:	d1c8      	bne.n	8006aa2 <__sflush_r+0x32>
 8006b10:	682b      	ldr	r3, [r5, #0]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d0c5      	beq.n	8006aa2 <__sflush_r+0x32>
 8006b16:	2b1d      	cmp	r3, #29
 8006b18:	d001      	beq.n	8006b1e <__sflush_r+0xae>
 8006b1a:	2b16      	cmp	r3, #22
 8006b1c:	d101      	bne.n	8006b22 <__sflush_r+0xb2>
 8006b1e:	602f      	str	r7, [r5, #0]
 8006b20:	e7b2      	b.n	8006a88 <__sflush_r+0x18>
 8006b22:	89a3      	ldrh	r3, [r4, #12]
 8006b24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b28:	81a3      	strh	r3, [r4, #12]
 8006b2a:	e7ae      	b.n	8006a8a <__sflush_r+0x1a>
 8006b2c:	690f      	ldr	r7, [r1, #16]
 8006b2e:	2f00      	cmp	r7, #0
 8006b30:	d0aa      	beq.n	8006a88 <__sflush_r+0x18>
 8006b32:	0793      	lsls	r3, r2, #30
 8006b34:	bf18      	it	ne
 8006b36:	2300      	movne	r3, #0
 8006b38:	680e      	ldr	r6, [r1, #0]
 8006b3a:	bf08      	it	eq
 8006b3c:	694b      	ldreq	r3, [r1, #20]
 8006b3e:	1bf6      	subs	r6, r6, r7
 8006b40:	600f      	str	r7, [r1, #0]
 8006b42:	608b      	str	r3, [r1, #8]
 8006b44:	2e00      	cmp	r6, #0
 8006b46:	dd9f      	ble.n	8006a88 <__sflush_r+0x18>
 8006b48:	4633      	mov	r3, r6
 8006b4a:	463a      	mov	r2, r7
 8006b4c:	4628      	mov	r0, r5
 8006b4e:	6a21      	ldr	r1, [r4, #32]
 8006b50:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006b54:	47e0      	blx	ip
 8006b56:	2800      	cmp	r0, #0
 8006b58:	dc06      	bgt.n	8006b68 <__sflush_r+0xf8>
 8006b5a:	89a3      	ldrh	r3, [r4, #12]
 8006b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b64:	81a3      	strh	r3, [r4, #12]
 8006b66:	e790      	b.n	8006a8a <__sflush_r+0x1a>
 8006b68:	4407      	add	r7, r0
 8006b6a:	1a36      	subs	r6, r6, r0
 8006b6c:	e7ea      	b.n	8006b44 <__sflush_r+0xd4>
 8006b6e:	bf00      	nop
 8006b70:	dfbffffe 	.word	0xdfbffffe

08006b74 <_fflush_r>:
 8006b74:	b538      	push	{r3, r4, r5, lr}
 8006b76:	690b      	ldr	r3, [r1, #16]
 8006b78:	4605      	mov	r5, r0
 8006b7a:	460c      	mov	r4, r1
 8006b7c:	b913      	cbnz	r3, 8006b84 <_fflush_r+0x10>
 8006b7e:	2500      	movs	r5, #0
 8006b80:	4628      	mov	r0, r5
 8006b82:	bd38      	pop	{r3, r4, r5, pc}
 8006b84:	b118      	cbz	r0, 8006b8e <_fflush_r+0x1a>
 8006b86:	6a03      	ldr	r3, [r0, #32]
 8006b88:	b90b      	cbnz	r3, 8006b8e <_fflush_r+0x1a>
 8006b8a:	f7fe fa0f 	bl	8004fac <__sinit>
 8006b8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d0f3      	beq.n	8006b7e <_fflush_r+0xa>
 8006b96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b98:	07d0      	lsls	r0, r2, #31
 8006b9a:	d404      	bmi.n	8006ba6 <_fflush_r+0x32>
 8006b9c:	0599      	lsls	r1, r3, #22
 8006b9e:	d402      	bmi.n	8006ba6 <_fflush_r+0x32>
 8006ba0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ba2:	f7fe fb19 	bl	80051d8 <__retarget_lock_acquire_recursive>
 8006ba6:	4628      	mov	r0, r5
 8006ba8:	4621      	mov	r1, r4
 8006baa:	f7ff ff61 	bl	8006a70 <__sflush_r>
 8006bae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bb0:	4605      	mov	r5, r0
 8006bb2:	07da      	lsls	r2, r3, #31
 8006bb4:	d4e4      	bmi.n	8006b80 <_fflush_r+0xc>
 8006bb6:	89a3      	ldrh	r3, [r4, #12]
 8006bb8:	059b      	lsls	r3, r3, #22
 8006bba:	d4e1      	bmi.n	8006b80 <_fflush_r+0xc>
 8006bbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bbe:	f7fe fb0c 	bl	80051da <__retarget_lock_release_recursive>
 8006bc2:	e7dd      	b.n	8006b80 <_fflush_r+0xc>

08006bc4 <memmove>:
 8006bc4:	4288      	cmp	r0, r1
 8006bc6:	b510      	push	{r4, lr}
 8006bc8:	eb01 0402 	add.w	r4, r1, r2
 8006bcc:	d902      	bls.n	8006bd4 <memmove+0x10>
 8006bce:	4284      	cmp	r4, r0
 8006bd0:	4623      	mov	r3, r4
 8006bd2:	d807      	bhi.n	8006be4 <memmove+0x20>
 8006bd4:	1e43      	subs	r3, r0, #1
 8006bd6:	42a1      	cmp	r1, r4
 8006bd8:	d008      	beq.n	8006bec <memmove+0x28>
 8006bda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006bde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006be2:	e7f8      	b.n	8006bd6 <memmove+0x12>
 8006be4:	4601      	mov	r1, r0
 8006be6:	4402      	add	r2, r0
 8006be8:	428a      	cmp	r2, r1
 8006bea:	d100      	bne.n	8006bee <memmove+0x2a>
 8006bec:	bd10      	pop	{r4, pc}
 8006bee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006bf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006bf6:	e7f7      	b.n	8006be8 <memmove+0x24>

08006bf8 <_sbrk_r>:
 8006bf8:	b538      	push	{r3, r4, r5, lr}
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	4d05      	ldr	r5, [pc, #20]	; (8006c14 <_sbrk_r+0x1c>)
 8006bfe:	4604      	mov	r4, r0
 8006c00:	4608      	mov	r0, r1
 8006c02:	602b      	str	r3, [r5, #0]
 8006c04:	f7fa ff80 	bl	8001b08 <_sbrk>
 8006c08:	1c43      	adds	r3, r0, #1
 8006c0a:	d102      	bne.n	8006c12 <_sbrk_r+0x1a>
 8006c0c:	682b      	ldr	r3, [r5, #0]
 8006c0e:	b103      	cbz	r3, 8006c12 <_sbrk_r+0x1a>
 8006c10:	6023      	str	r3, [r4, #0]
 8006c12:	bd38      	pop	{r3, r4, r5, pc}
 8006c14:	200004fc 	.word	0x200004fc

08006c18 <memcpy>:
 8006c18:	440a      	add	r2, r1
 8006c1a:	4291      	cmp	r1, r2
 8006c1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c20:	d100      	bne.n	8006c24 <memcpy+0xc>
 8006c22:	4770      	bx	lr
 8006c24:	b510      	push	{r4, lr}
 8006c26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c2a:	4291      	cmp	r1, r2
 8006c2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c30:	d1f9      	bne.n	8006c26 <memcpy+0xe>
 8006c32:	bd10      	pop	{r4, pc}

08006c34 <__assert_func>:
 8006c34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006c36:	4614      	mov	r4, r2
 8006c38:	461a      	mov	r2, r3
 8006c3a:	4b09      	ldr	r3, [pc, #36]	; (8006c60 <__assert_func+0x2c>)
 8006c3c:	4605      	mov	r5, r0
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	68d8      	ldr	r0, [r3, #12]
 8006c42:	b14c      	cbz	r4, 8006c58 <__assert_func+0x24>
 8006c44:	4b07      	ldr	r3, [pc, #28]	; (8006c64 <__assert_func+0x30>)
 8006c46:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006c4a:	9100      	str	r1, [sp, #0]
 8006c4c:	462b      	mov	r3, r5
 8006c4e:	4906      	ldr	r1, [pc, #24]	; (8006c68 <__assert_func+0x34>)
 8006c50:	f000 f870 	bl	8006d34 <fiprintf>
 8006c54:	f000 f880 	bl	8006d58 <abort>
 8006c58:	4b04      	ldr	r3, [pc, #16]	; (8006c6c <__assert_func+0x38>)
 8006c5a:	461c      	mov	r4, r3
 8006c5c:	e7f3      	b.n	8006c46 <__assert_func+0x12>
 8006c5e:	bf00      	nop
 8006c60:	2000008c 	.word	0x2000008c
 8006c64:	0800753f 	.word	0x0800753f
 8006c68:	0800754c 	.word	0x0800754c
 8006c6c:	0800757a 	.word	0x0800757a

08006c70 <_calloc_r>:
 8006c70:	b570      	push	{r4, r5, r6, lr}
 8006c72:	fba1 5402 	umull	r5, r4, r1, r2
 8006c76:	b934      	cbnz	r4, 8006c86 <_calloc_r+0x16>
 8006c78:	4629      	mov	r1, r5
 8006c7a:	f7ff f99d 	bl	8005fb8 <_malloc_r>
 8006c7e:	4606      	mov	r6, r0
 8006c80:	b928      	cbnz	r0, 8006c8e <_calloc_r+0x1e>
 8006c82:	4630      	mov	r0, r6
 8006c84:	bd70      	pop	{r4, r5, r6, pc}
 8006c86:	220c      	movs	r2, #12
 8006c88:	2600      	movs	r6, #0
 8006c8a:	6002      	str	r2, [r0, #0]
 8006c8c:	e7f9      	b.n	8006c82 <_calloc_r+0x12>
 8006c8e:	462a      	mov	r2, r5
 8006c90:	4621      	mov	r1, r4
 8006c92:	f7fe fa24 	bl	80050de <memset>
 8006c96:	e7f4      	b.n	8006c82 <_calloc_r+0x12>

08006c98 <__ascii_mbtowc>:
 8006c98:	b082      	sub	sp, #8
 8006c9a:	b901      	cbnz	r1, 8006c9e <__ascii_mbtowc+0x6>
 8006c9c:	a901      	add	r1, sp, #4
 8006c9e:	b142      	cbz	r2, 8006cb2 <__ascii_mbtowc+0x1a>
 8006ca0:	b14b      	cbz	r3, 8006cb6 <__ascii_mbtowc+0x1e>
 8006ca2:	7813      	ldrb	r3, [r2, #0]
 8006ca4:	600b      	str	r3, [r1, #0]
 8006ca6:	7812      	ldrb	r2, [r2, #0]
 8006ca8:	1e10      	subs	r0, r2, #0
 8006caa:	bf18      	it	ne
 8006cac:	2001      	movne	r0, #1
 8006cae:	b002      	add	sp, #8
 8006cb0:	4770      	bx	lr
 8006cb2:	4610      	mov	r0, r2
 8006cb4:	e7fb      	b.n	8006cae <__ascii_mbtowc+0x16>
 8006cb6:	f06f 0001 	mvn.w	r0, #1
 8006cba:	e7f8      	b.n	8006cae <__ascii_mbtowc+0x16>

08006cbc <_realloc_r>:
 8006cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cc0:	4680      	mov	r8, r0
 8006cc2:	4614      	mov	r4, r2
 8006cc4:	460e      	mov	r6, r1
 8006cc6:	b921      	cbnz	r1, 8006cd2 <_realloc_r+0x16>
 8006cc8:	4611      	mov	r1, r2
 8006cca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cce:	f7ff b973 	b.w	8005fb8 <_malloc_r>
 8006cd2:	b92a      	cbnz	r2, 8006ce0 <_realloc_r+0x24>
 8006cd4:	f7ff f900 	bl	8005ed8 <_free_r>
 8006cd8:	4625      	mov	r5, r4
 8006cda:	4628      	mov	r0, r5
 8006cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ce0:	f000 f841 	bl	8006d66 <_malloc_usable_size_r>
 8006ce4:	4284      	cmp	r4, r0
 8006ce6:	4607      	mov	r7, r0
 8006ce8:	d802      	bhi.n	8006cf0 <_realloc_r+0x34>
 8006cea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006cee:	d812      	bhi.n	8006d16 <_realloc_r+0x5a>
 8006cf0:	4621      	mov	r1, r4
 8006cf2:	4640      	mov	r0, r8
 8006cf4:	f7ff f960 	bl	8005fb8 <_malloc_r>
 8006cf8:	4605      	mov	r5, r0
 8006cfa:	2800      	cmp	r0, #0
 8006cfc:	d0ed      	beq.n	8006cda <_realloc_r+0x1e>
 8006cfe:	42bc      	cmp	r4, r7
 8006d00:	4622      	mov	r2, r4
 8006d02:	4631      	mov	r1, r6
 8006d04:	bf28      	it	cs
 8006d06:	463a      	movcs	r2, r7
 8006d08:	f7ff ff86 	bl	8006c18 <memcpy>
 8006d0c:	4631      	mov	r1, r6
 8006d0e:	4640      	mov	r0, r8
 8006d10:	f7ff f8e2 	bl	8005ed8 <_free_r>
 8006d14:	e7e1      	b.n	8006cda <_realloc_r+0x1e>
 8006d16:	4635      	mov	r5, r6
 8006d18:	e7df      	b.n	8006cda <_realloc_r+0x1e>

08006d1a <__ascii_wctomb>:
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	4608      	mov	r0, r1
 8006d1e:	b141      	cbz	r1, 8006d32 <__ascii_wctomb+0x18>
 8006d20:	2aff      	cmp	r2, #255	; 0xff
 8006d22:	d904      	bls.n	8006d2e <__ascii_wctomb+0x14>
 8006d24:	228a      	movs	r2, #138	; 0x8a
 8006d26:	f04f 30ff 	mov.w	r0, #4294967295
 8006d2a:	601a      	str	r2, [r3, #0]
 8006d2c:	4770      	bx	lr
 8006d2e:	2001      	movs	r0, #1
 8006d30:	700a      	strb	r2, [r1, #0]
 8006d32:	4770      	bx	lr

08006d34 <fiprintf>:
 8006d34:	b40e      	push	{r1, r2, r3}
 8006d36:	b503      	push	{r0, r1, lr}
 8006d38:	4601      	mov	r1, r0
 8006d3a:	ab03      	add	r3, sp, #12
 8006d3c:	4805      	ldr	r0, [pc, #20]	; (8006d54 <fiprintf+0x20>)
 8006d3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d42:	6800      	ldr	r0, [r0, #0]
 8006d44:	9301      	str	r3, [sp, #4]
 8006d46:	f000 f83d 	bl	8006dc4 <_vfiprintf_r>
 8006d4a:	b002      	add	sp, #8
 8006d4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d50:	b003      	add	sp, #12
 8006d52:	4770      	bx	lr
 8006d54:	2000008c 	.word	0x2000008c

08006d58 <abort>:
 8006d58:	2006      	movs	r0, #6
 8006d5a:	b508      	push	{r3, lr}
 8006d5c:	f000 fa0a 	bl	8007174 <raise>
 8006d60:	2001      	movs	r0, #1
 8006d62:	f7fa fe5d 	bl	8001a20 <_exit>

08006d66 <_malloc_usable_size_r>:
 8006d66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d6a:	1f18      	subs	r0, r3, #4
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	bfbc      	itt	lt
 8006d70:	580b      	ldrlt	r3, [r1, r0]
 8006d72:	18c0      	addlt	r0, r0, r3
 8006d74:	4770      	bx	lr

08006d76 <__sfputc_r>:
 8006d76:	6893      	ldr	r3, [r2, #8]
 8006d78:	b410      	push	{r4}
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	6093      	str	r3, [r2, #8]
 8006d80:	da07      	bge.n	8006d92 <__sfputc_r+0x1c>
 8006d82:	6994      	ldr	r4, [r2, #24]
 8006d84:	42a3      	cmp	r3, r4
 8006d86:	db01      	blt.n	8006d8c <__sfputc_r+0x16>
 8006d88:	290a      	cmp	r1, #10
 8006d8a:	d102      	bne.n	8006d92 <__sfputc_r+0x1c>
 8006d8c:	bc10      	pop	{r4}
 8006d8e:	f000 b933 	b.w	8006ff8 <__swbuf_r>
 8006d92:	6813      	ldr	r3, [r2, #0]
 8006d94:	1c58      	adds	r0, r3, #1
 8006d96:	6010      	str	r0, [r2, #0]
 8006d98:	7019      	strb	r1, [r3, #0]
 8006d9a:	4608      	mov	r0, r1
 8006d9c:	bc10      	pop	{r4}
 8006d9e:	4770      	bx	lr

08006da0 <__sfputs_r>:
 8006da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006da2:	4606      	mov	r6, r0
 8006da4:	460f      	mov	r7, r1
 8006da6:	4614      	mov	r4, r2
 8006da8:	18d5      	adds	r5, r2, r3
 8006daa:	42ac      	cmp	r4, r5
 8006dac:	d101      	bne.n	8006db2 <__sfputs_r+0x12>
 8006dae:	2000      	movs	r0, #0
 8006db0:	e007      	b.n	8006dc2 <__sfputs_r+0x22>
 8006db2:	463a      	mov	r2, r7
 8006db4:	4630      	mov	r0, r6
 8006db6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dba:	f7ff ffdc 	bl	8006d76 <__sfputc_r>
 8006dbe:	1c43      	adds	r3, r0, #1
 8006dc0:	d1f3      	bne.n	8006daa <__sfputs_r+0xa>
 8006dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006dc4 <_vfiprintf_r>:
 8006dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dc8:	460d      	mov	r5, r1
 8006dca:	4614      	mov	r4, r2
 8006dcc:	4698      	mov	r8, r3
 8006dce:	4606      	mov	r6, r0
 8006dd0:	b09d      	sub	sp, #116	; 0x74
 8006dd2:	b118      	cbz	r0, 8006ddc <_vfiprintf_r+0x18>
 8006dd4:	6a03      	ldr	r3, [r0, #32]
 8006dd6:	b90b      	cbnz	r3, 8006ddc <_vfiprintf_r+0x18>
 8006dd8:	f7fe f8e8 	bl	8004fac <__sinit>
 8006ddc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006dde:	07d9      	lsls	r1, r3, #31
 8006de0:	d405      	bmi.n	8006dee <_vfiprintf_r+0x2a>
 8006de2:	89ab      	ldrh	r3, [r5, #12]
 8006de4:	059a      	lsls	r2, r3, #22
 8006de6:	d402      	bmi.n	8006dee <_vfiprintf_r+0x2a>
 8006de8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006dea:	f7fe f9f5 	bl	80051d8 <__retarget_lock_acquire_recursive>
 8006dee:	89ab      	ldrh	r3, [r5, #12]
 8006df0:	071b      	lsls	r3, r3, #28
 8006df2:	d501      	bpl.n	8006df8 <_vfiprintf_r+0x34>
 8006df4:	692b      	ldr	r3, [r5, #16]
 8006df6:	b99b      	cbnz	r3, 8006e20 <_vfiprintf_r+0x5c>
 8006df8:	4629      	mov	r1, r5
 8006dfa:	4630      	mov	r0, r6
 8006dfc:	f000 f93a 	bl	8007074 <__swsetup_r>
 8006e00:	b170      	cbz	r0, 8006e20 <_vfiprintf_r+0x5c>
 8006e02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e04:	07dc      	lsls	r4, r3, #31
 8006e06:	d504      	bpl.n	8006e12 <_vfiprintf_r+0x4e>
 8006e08:	f04f 30ff 	mov.w	r0, #4294967295
 8006e0c:	b01d      	add	sp, #116	; 0x74
 8006e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e12:	89ab      	ldrh	r3, [r5, #12]
 8006e14:	0598      	lsls	r0, r3, #22
 8006e16:	d4f7      	bmi.n	8006e08 <_vfiprintf_r+0x44>
 8006e18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e1a:	f7fe f9de 	bl	80051da <__retarget_lock_release_recursive>
 8006e1e:	e7f3      	b.n	8006e08 <_vfiprintf_r+0x44>
 8006e20:	2300      	movs	r3, #0
 8006e22:	9309      	str	r3, [sp, #36]	; 0x24
 8006e24:	2320      	movs	r3, #32
 8006e26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e2a:	2330      	movs	r3, #48	; 0x30
 8006e2c:	f04f 0901 	mov.w	r9, #1
 8006e30:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e34:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8006fe4 <_vfiprintf_r+0x220>
 8006e38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e3c:	4623      	mov	r3, r4
 8006e3e:	469a      	mov	sl, r3
 8006e40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e44:	b10a      	cbz	r2, 8006e4a <_vfiprintf_r+0x86>
 8006e46:	2a25      	cmp	r2, #37	; 0x25
 8006e48:	d1f9      	bne.n	8006e3e <_vfiprintf_r+0x7a>
 8006e4a:	ebba 0b04 	subs.w	fp, sl, r4
 8006e4e:	d00b      	beq.n	8006e68 <_vfiprintf_r+0xa4>
 8006e50:	465b      	mov	r3, fp
 8006e52:	4622      	mov	r2, r4
 8006e54:	4629      	mov	r1, r5
 8006e56:	4630      	mov	r0, r6
 8006e58:	f7ff ffa2 	bl	8006da0 <__sfputs_r>
 8006e5c:	3001      	adds	r0, #1
 8006e5e:	f000 80a9 	beq.w	8006fb4 <_vfiprintf_r+0x1f0>
 8006e62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e64:	445a      	add	r2, fp
 8006e66:	9209      	str	r2, [sp, #36]	; 0x24
 8006e68:	f89a 3000 	ldrb.w	r3, [sl]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	f000 80a1 	beq.w	8006fb4 <_vfiprintf_r+0x1f0>
 8006e72:	2300      	movs	r3, #0
 8006e74:	f04f 32ff 	mov.w	r2, #4294967295
 8006e78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e7c:	f10a 0a01 	add.w	sl, sl, #1
 8006e80:	9304      	str	r3, [sp, #16]
 8006e82:	9307      	str	r3, [sp, #28]
 8006e84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e88:	931a      	str	r3, [sp, #104]	; 0x68
 8006e8a:	4654      	mov	r4, sl
 8006e8c:	2205      	movs	r2, #5
 8006e8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e92:	4854      	ldr	r0, [pc, #336]	; (8006fe4 <_vfiprintf_r+0x220>)
 8006e94:	f7fe f9a2 	bl	80051dc <memchr>
 8006e98:	9a04      	ldr	r2, [sp, #16]
 8006e9a:	b9d8      	cbnz	r0, 8006ed4 <_vfiprintf_r+0x110>
 8006e9c:	06d1      	lsls	r1, r2, #27
 8006e9e:	bf44      	itt	mi
 8006ea0:	2320      	movmi	r3, #32
 8006ea2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ea6:	0713      	lsls	r3, r2, #28
 8006ea8:	bf44      	itt	mi
 8006eaa:	232b      	movmi	r3, #43	; 0x2b
 8006eac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006eb0:	f89a 3000 	ldrb.w	r3, [sl]
 8006eb4:	2b2a      	cmp	r3, #42	; 0x2a
 8006eb6:	d015      	beq.n	8006ee4 <_vfiprintf_r+0x120>
 8006eb8:	4654      	mov	r4, sl
 8006eba:	2000      	movs	r0, #0
 8006ebc:	f04f 0c0a 	mov.w	ip, #10
 8006ec0:	9a07      	ldr	r2, [sp, #28]
 8006ec2:	4621      	mov	r1, r4
 8006ec4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ec8:	3b30      	subs	r3, #48	; 0x30
 8006eca:	2b09      	cmp	r3, #9
 8006ecc:	d94d      	bls.n	8006f6a <_vfiprintf_r+0x1a6>
 8006ece:	b1b0      	cbz	r0, 8006efe <_vfiprintf_r+0x13a>
 8006ed0:	9207      	str	r2, [sp, #28]
 8006ed2:	e014      	b.n	8006efe <_vfiprintf_r+0x13a>
 8006ed4:	eba0 0308 	sub.w	r3, r0, r8
 8006ed8:	fa09 f303 	lsl.w	r3, r9, r3
 8006edc:	4313      	orrs	r3, r2
 8006ede:	46a2      	mov	sl, r4
 8006ee0:	9304      	str	r3, [sp, #16]
 8006ee2:	e7d2      	b.n	8006e8a <_vfiprintf_r+0xc6>
 8006ee4:	9b03      	ldr	r3, [sp, #12]
 8006ee6:	1d19      	adds	r1, r3, #4
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	9103      	str	r1, [sp, #12]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	bfbb      	ittet	lt
 8006ef0:	425b      	neglt	r3, r3
 8006ef2:	f042 0202 	orrlt.w	r2, r2, #2
 8006ef6:	9307      	strge	r3, [sp, #28]
 8006ef8:	9307      	strlt	r3, [sp, #28]
 8006efa:	bfb8      	it	lt
 8006efc:	9204      	strlt	r2, [sp, #16]
 8006efe:	7823      	ldrb	r3, [r4, #0]
 8006f00:	2b2e      	cmp	r3, #46	; 0x2e
 8006f02:	d10c      	bne.n	8006f1e <_vfiprintf_r+0x15a>
 8006f04:	7863      	ldrb	r3, [r4, #1]
 8006f06:	2b2a      	cmp	r3, #42	; 0x2a
 8006f08:	d134      	bne.n	8006f74 <_vfiprintf_r+0x1b0>
 8006f0a:	9b03      	ldr	r3, [sp, #12]
 8006f0c:	3402      	adds	r4, #2
 8006f0e:	1d1a      	adds	r2, r3, #4
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	9203      	str	r2, [sp, #12]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	bfb8      	it	lt
 8006f18:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f1c:	9305      	str	r3, [sp, #20]
 8006f1e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006fe8 <_vfiprintf_r+0x224>
 8006f22:	2203      	movs	r2, #3
 8006f24:	4650      	mov	r0, sl
 8006f26:	7821      	ldrb	r1, [r4, #0]
 8006f28:	f7fe f958 	bl	80051dc <memchr>
 8006f2c:	b138      	cbz	r0, 8006f3e <_vfiprintf_r+0x17a>
 8006f2e:	2240      	movs	r2, #64	; 0x40
 8006f30:	9b04      	ldr	r3, [sp, #16]
 8006f32:	eba0 000a 	sub.w	r0, r0, sl
 8006f36:	4082      	lsls	r2, r0
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	3401      	adds	r4, #1
 8006f3c:	9304      	str	r3, [sp, #16]
 8006f3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f42:	2206      	movs	r2, #6
 8006f44:	4829      	ldr	r0, [pc, #164]	; (8006fec <_vfiprintf_r+0x228>)
 8006f46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f4a:	f7fe f947 	bl	80051dc <memchr>
 8006f4e:	2800      	cmp	r0, #0
 8006f50:	d03f      	beq.n	8006fd2 <_vfiprintf_r+0x20e>
 8006f52:	4b27      	ldr	r3, [pc, #156]	; (8006ff0 <_vfiprintf_r+0x22c>)
 8006f54:	bb1b      	cbnz	r3, 8006f9e <_vfiprintf_r+0x1da>
 8006f56:	9b03      	ldr	r3, [sp, #12]
 8006f58:	3307      	adds	r3, #7
 8006f5a:	f023 0307 	bic.w	r3, r3, #7
 8006f5e:	3308      	adds	r3, #8
 8006f60:	9303      	str	r3, [sp, #12]
 8006f62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f64:	443b      	add	r3, r7
 8006f66:	9309      	str	r3, [sp, #36]	; 0x24
 8006f68:	e768      	b.n	8006e3c <_vfiprintf_r+0x78>
 8006f6a:	460c      	mov	r4, r1
 8006f6c:	2001      	movs	r0, #1
 8006f6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f72:	e7a6      	b.n	8006ec2 <_vfiprintf_r+0xfe>
 8006f74:	2300      	movs	r3, #0
 8006f76:	f04f 0c0a 	mov.w	ip, #10
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	3401      	adds	r4, #1
 8006f7e:	9305      	str	r3, [sp, #20]
 8006f80:	4620      	mov	r0, r4
 8006f82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f86:	3a30      	subs	r2, #48	; 0x30
 8006f88:	2a09      	cmp	r2, #9
 8006f8a:	d903      	bls.n	8006f94 <_vfiprintf_r+0x1d0>
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d0c6      	beq.n	8006f1e <_vfiprintf_r+0x15a>
 8006f90:	9105      	str	r1, [sp, #20]
 8006f92:	e7c4      	b.n	8006f1e <_vfiprintf_r+0x15a>
 8006f94:	4604      	mov	r4, r0
 8006f96:	2301      	movs	r3, #1
 8006f98:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f9c:	e7f0      	b.n	8006f80 <_vfiprintf_r+0x1bc>
 8006f9e:	ab03      	add	r3, sp, #12
 8006fa0:	9300      	str	r3, [sp, #0]
 8006fa2:	462a      	mov	r2, r5
 8006fa4:	4630      	mov	r0, r6
 8006fa6:	4b13      	ldr	r3, [pc, #76]	; (8006ff4 <_vfiprintf_r+0x230>)
 8006fa8:	a904      	add	r1, sp, #16
 8006faa:	f7fd fbc3 	bl	8004734 <_printf_float>
 8006fae:	4607      	mov	r7, r0
 8006fb0:	1c78      	adds	r0, r7, #1
 8006fb2:	d1d6      	bne.n	8006f62 <_vfiprintf_r+0x19e>
 8006fb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fb6:	07d9      	lsls	r1, r3, #31
 8006fb8:	d405      	bmi.n	8006fc6 <_vfiprintf_r+0x202>
 8006fba:	89ab      	ldrh	r3, [r5, #12]
 8006fbc:	059a      	lsls	r2, r3, #22
 8006fbe:	d402      	bmi.n	8006fc6 <_vfiprintf_r+0x202>
 8006fc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fc2:	f7fe f90a 	bl	80051da <__retarget_lock_release_recursive>
 8006fc6:	89ab      	ldrh	r3, [r5, #12]
 8006fc8:	065b      	lsls	r3, r3, #25
 8006fca:	f53f af1d 	bmi.w	8006e08 <_vfiprintf_r+0x44>
 8006fce:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006fd0:	e71c      	b.n	8006e0c <_vfiprintf_r+0x48>
 8006fd2:	ab03      	add	r3, sp, #12
 8006fd4:	9300      	str	r3, [sp, #0]
 8006fd6:	462a      	mov	r2, r5
 8006fd8:	4630      	mov	r0, r6
 8006fda:	4b06      	ldr	r3, [pc, #24]	; (8006ff4 <_vfiprintf_r+0x230>)
 8006fdc:	a904      	add	r1, sp, #16
 8006fde:	f7fd fe49 	bl	8004c74 <_printf_i>
 8006fe2:	e7e4      	b.n	8006fae <_vfiprintf_r+0x1ea>
 8006fe4:	08007524 	.word	0x08007524
 8006fe8:	0800752a 	.word	0x0800752a
 8006fec:	0800752e 	.word	0x0800752e
 8006ff0:	08004735 	.word	0x08004735
 8006ff4:	08006da1 	.word	0x08006da1

08006ff8 <__swbuf_r>:
 8006ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ffa:	460e      	mov	r6, r1
 8006ffc:	4614      	mov	r4, r2
 8006ffe:	4605      	mov	r5, r0
 8007000:	b118      	cbz	r0, 800700a <__swbuf_r+0x12>
 8007002:	6a03      	ldr	r3, [r0, #32]
 8007004:	b90b      	cbnz	r3, 800700a <__swbuf_r+0x12>
 8007006:	f7fd ffd1 	bl	8004fac <__sinit>
 800700a:	69a3      	ldr	r3, [r4, #24]
 800700c:	60a3      	str	r3, [r4, #8]
 800700e:	89a3      	ldrh	r3, [r4, #12]
 8007010:	071a      	lsls	r2, r3, #28
 8007012:	d525      	bpl.n	8007060 <__swbuf_r+0x68>
 8007014:	6923      	ldr	r3, [r4, #16]
 8007016:	b31b      	cbz	r3, 8007060 <__swbuf_r+0x68>
 8007018:	6823      	ldr	r3, [r4, #0]
 800701a:	6922      	ldr	r2, [r4, #16]
 800701c:	b2f6      	uxtb	r6, r6
 800701e:	1a98      	subs	r0, r3, r2
 8007020:	6963      	ldr	r3, [r4, #20]
 8007022:	4637      	mov	r7, r6
 8007024:	4283      	cmp	r3, r0
 8007026:	dc04      	bgt.n	8007032 <__swbuf_r+0x3a>
 8007028:	4621      	mov	r1, r4
 800702a:	4628      	mov	r0, r5
 800702c:	f7ff fda2 	bl	8006b74 <_fflush_r>
 8007030:	b9e0      	cbnz	r0, 800706c <__swbuf_r+0x74>
 8007032:	68a3      	ldr	r3, [r4, #8]
 8007034:	3b01      	subs	r3, #1
 8007036:	60a3      	str	r3, [r4, #8]
 8007038:	6823      	ldr	r3, [r4, #0]
 800703a:	1c5a      	adds	r2, r3, #1
 800703c:	6022      	str	r2, [r4, #0]
 800703e:	701e      	strb	r6, [r3, #0]
 8007040:	6962      	ldr	r2, [r4, #20]
 8007042:	1c43      	adds	r3, r0, #1
 8007044:	429a      	cmp	r2, r3
 8007046:	d004      	beq.n	8007052 <__swbuf_r+0x5a>
 8007048:	89a3      	ldrh	r3, [r4, #12]
 800704a:	07db      	lsls	r3, r3, #31
 800704c:	d506      	bpl.n	800705c <__swbuf_r+0x64>
 800704e:	2e0a      	cmp	r6, #10
 8007050:	d104      	bne.n	800705c <__swbuf_r+0x64>
 8007052:	4621      	mov	r1, r4
 8007054:	4628      	mov	r0, r5
 8007056:	f7ff fd8d 	bl	8006b74 <_fflush_r>
 800705a:	b938      	cbnz	r0, 800706c <__swbuf_r+0x74>
 800705c:	4638      	mov	r0, r7
 800705e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007060:	4621      	mov	r1, r4
 8007062:	4628      	mov	r0, r5
 8007064:	f000 f806 	bl	8007074 <__swsetup_r>
 8007068:	2800      	cmp	r0, #0
 800706a:	d0d5      	beq.n	8007018 <__swbuf_r+0x20>
 800706c:	f04f 37ff 	mov.w	r7, #4294967295
 8007070:	e7f4      	b.n	800705c <__swbuf_r+0x64>
	...

08007074 <__swsetup_r>:
 8007074:	b538      	push	{r3, r4, r5, lr}
 8007076:	4b2a      	ldr	r3, [pc, #168]	; (8007120 <__swsetup_r+0xac>)
 8007078:	4605      	mov	r5, r0
 800707a:	6818      	ldr	r0, [r3, #0]
 800707c:	460c      	mov	r4, r1
 800707e:	b118      	cbz	r0, 8007088 <__swsetup_r+0x14>
 8007080:	6a03      	ldr	r3, [r0, #32]
 8007082:	b90b      	cbnz	r3, 8007088 <__swsetup_r+0x14>
 8007084:	f7fd ff92 	bl	8004fac <__sinit>
 8007088:	89a3      	ldrh	r3, [r4, #12]
 800708a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800708e:	0718      	lsls	r0, r3, #28
 8007090:	d422      	bmi.n	80070d8 <__swsetup_r+0x64>
 8007092:	06d9      	lsls	r1, r3, #27
 8007094:	d407      	bmi.n	80070a6 <__swsetup_r+0x32>
 8007096:	2309      	movs	r3, #9
 8007098:	602b      	str	r3, [r5, #0]
 800709a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800709e:	f04f 30ff 	mov.w	r0, #4294967295
 80070a2:	81a3      	strh	r3, [r4, #12]
 80070a4:	e034      	b.n	8007110 <__swsetup_r+0x9c>
 80070a6:	0758      	lsls	r0, r3, #29
 80070a8:	d512      	bpl.n	80070d0 <__swsetup_r+0x5c>
 80070aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070ac:	b141      	cbz	r1, 80070c0 <__swsetup_r+0x4c>
 80070ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070b2:	4299      	cmp	r1, r3
 80070b4:	d002      	beq.n	80070bc <__swsetup_r+0x48>
 80070b6:	4628      	mov	r0, r5
 80070b8:	f7fe ff0e 	bl	8005ed8 <_free_r>
 80070bc:	2300      	movs	r3, #0
 80070be:	6363      	str	r3, [r4, #52]	; 0x34
 80070c0:	89a3      	ldrh	r3, [r4, #12]
 80070c2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80070c6:	81a3      	strh	r3, [r4, #12]
 80070c8:	2300      	movs	r3, #0
 80070ca:	6063      	str	r3, [r4, #4]
 80070cc:	6923      	ldr	r3, [r4, #16]
 80070ce:	6023      	str	r3, [r4, #0]
 80070d0:	89a3      	ldrh	r3, [r4, #12]
 80070d2:	f043 0308 	orr.w	r3, r3, #8
 80070d6:	81a3      	strh	r3, [r4, #12]
 80070d8:	6923      	ldr	r3, [r4, #16]
 80070da:	b94b      	cbnz	r3, 80070f0 <__swsetup_r+0x7c>
 80070dc:	89a3      	ldrh	r3, [r4, #12]
 80070de:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80070e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070e6:	d003      	beq.n	80070f0 <__swsetup_r+0x7c>
 80070e8:	4621      	mov	r1, r4
 80070ea:	4628      	mov	r0, r5
 80070ec:	f000 f883 	bl	80071f6 <__smakebuf_r>
 80070f0:	89a0      	ldrh	r0, [r4, #12]
 80070f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80070f6:	f010 0301 	ands.w	r3, r0, #1
 80070fa:	d00a      	beq.n	8007112 <__swsetup_r+0x9e>
 80070fc:	2300      	movs	r3, #0
 80070fe:	60a3      	str	r3, [r4, #8]
 8007100:	6963      	ldr	r3, [r4, #20]
 8007102:	425b      	negs	r3, r3
 8007104:	61a3      	str	r3, [r4, #24]
 8007106:	6923      	ldr	r3, [r4, #16]
 8007108:	b943      	cbnz	r3, 800711c <__swsetup_r+0xa8>
 800710a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800710e:	d1c4      	bne.n	800709a <__swsetup_r+0x26>
 8007110:	bd38      	pop	{r3, r4, r5, pc}
 8007112:	0781      	lsls	r1, r0, #30
 8007114:	bf58      	it	pl
 8007116:	6963      	ldrpl	r3, [r4, #20]
 8007118:	60a3      	str	r3, [r4, #8]
 800711a:	e7f4      	b.n	8007106 <__swsetup_r+0x92>
 800711c:	2000      	movs	r0, #0
 800711e:	e7f7      	b.n	8007110 <__swsetup_r+0x9c>
 8007120:	2000008c 	.word	0x2000008c

08007124 <_raise_r>:
 8007124:	291f      	cmp	r1, #31
 8007126:	b538      	push	{r3, r4, r5, lr}
 8007128:	4604      	mov	r4, r0
 800712a:	460d      	mov	r5, r1
 800712c:	d904      	bls.n	8007138 <_raise_r+0x14>
 800712e:	2316      	movs	r3, #22
 8007130:	6003      	str	r3, [r0, #0]
 8007132:	f04f 30ff 	mov.w	r0, #4294967295
 8007136:	bd38      	pop	{r3, r4, r5, pc}
 8007138:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800713a:	b112      	cbz	r2, 8007142 <_raise_r+0x1e>
 800713c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007140:	b94b      	cbnz	r3, 8007156 <_raise_r+0x32>
 8007142:	4620      	mov	r0, r4
 8007144:	f000 f830 	bl	80071a8 <_getpid_r>
 8007148:	462a      	mov	r2, r5
 800714a:	4601      	mov	r1, r0
 800714c:	4620      	mov	r0, r4
 800714e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007152:	f000 b817 	b.w	8007184 <_kill_r>
 8007156:	2b01      	cmp	r3, #1
 8007158:	d00a      	beq.n	8007170 <_raise_r+0x4c>
 800715a:	1c59      	adds	r1, r3, #1
 800715c:	d103      	bne.n	8007166 <_raise_r+0x42>
 800715e:	2316      	movs	r3, #22
 8007160:	6003      	str	r3, [r0, #0]
 8007162:	2001      	movs	r0, #1
 8007164:	e7e7      	b.n	8007136 <_raise_r+0x12>
 8007166:	2400      	movs	r4, #0
 8007168:	4628      	mov	r0, r5
 800716a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800716e:	4798      	blx	r3
 8007170:	2000      	movs	r0, #0
 8007172:	e7e0      	b.n	8007136 <_raise_r+0x12>

08007174 <raise>:
 8007174:	4b02      	ldr	r3, [pc, #8]	; (8007180 <raise+0xc>)
 8007176:	4601      	mov	r1, r0
 8007178:	6818      	ldr	r0, [r3, #0]
 800717a:	f7ff bfd3 	b.w	8007124 <_raise_r>
 800717e:	bf00      	nop
 8007180:	2000008c 	.word	0x2000008c

08007184 <_kill_r>:
 8007184:	b538      	push	{r3, r4, r5, lr}
 8007186:	2300      	movs	r3, #0
 8007188:	4d06      	ldr	r5, [pc, #24]	; (80071a4 <_kill_r+0x20>)
 800718a:	4604      	mov	r4, r0
 800718c:	4608      	mov	r0, r1
 800718e:	4611      	mov	r1, r2
 8007190:	602b      	str	r3, [r5, #0]
 8007192:	f7fa fc35 	bl	8001a00 <_kill>
 8007196:	1c43      	adds	r3, r0, #1
 8007198:	d102      	bne.n	80071a0 <_kill_r+0x1c>
 800719a:	682b      	ldr	r3, [r5, #0]
 800719c:	b103      	cbz	r3, 80071a0 <_kill_r+0x1c>
 800719e:	6023      	str	r3, [r4, #0]
 80071a0:	bd38      	pop	{r3, r4, r5, pc}
 80071a2:	bf00      	nop
 80071a4:	200004fc 	.word	0x200004fc

080071a8 <_getpid_r>:
 80071a8:	f7fa bc23 	b.w	80019f2 <_getpid>

080071ac <__swhatbuf_r>:
 80071ac:	b570      	push	{r4, r5, r6, lr}
 80071ae:	460c      	mov	r4, r1
 80071b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071b4:	4615      	mov	r5, r2
 80071b6:	2900      	cmp	r1, #0
 80071b8:	461e      	mov	r6, r3
 80071ba:	b096      	sub	sp, #88	; 0x58
 80071bc:	da0c      	bge.n	80071d8 <__swhatbuf_r+0x2c>
 80071be:	89a3      	ldrh	r3, [r4, #12]
 80071c0:	2100      	movs	r1, #0
 80071c2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80071c6:	bf0c      	ite	eq
 80071c8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80071cc:	2340      	movne	r3, #64	; 0x40
 80071ce:	2000      	movs	r0, #0
 80071d0:	6031      	str	r1, [r6, #0]
 80071d2:	602b      	str	r3, [r5, #0]
 80071d4:	b016      	add	sp, #88	; 0x58
 80071d6:	bd70      	pop	{r4, r5, r6, pc}
 80071d8:	466a      	mov	r2, sp
 80071da:	f000 f849 	bl	8007270 <_fstat_r>
 80071de:	2800      	cmp	r0, #0
 80071e0:	dbed      	blt.n	80071be <__swhatbuf_r+0x12>
 80071e2:	9901      	ldr	r1, [sp, #4]
 80071e4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80071e8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80071ec:	4259      	negs	r1, r3
 80071ee:	4159      	adcs	r1, r3
 80071f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071f4:	e7eb      	b.n	80071ce <__swhatbuf_r+0x22>

080071f6 <__smakebuf_r>:
 80071f6:	898b      	ldrh	r3, [r1, #12]
 80071f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80071fa:	079d      	lsls	r5, r3, #30
 80071fc:	4606      	mov	r6, r0
 80071fe:	460c      	mov	r4, r1
 8007200:	d507      	bpl.n	8007212 <__smakebuf_r+0x1c>
 8007202:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007206:	6023      	str	r3, [r4, #0]
 8007208:	6123      	str	r3, [r4, #16]
 800720a:	2301      	movs	r3, #1
 800720c:	6163      	str	r3, [r4, #20]
 800720e:	b002      	add	sp, #8
 8007210:	bd70      	pop	{r4, r5, r6, pc}
 8007212:	466a      	mov	r2, sp
 8007214:	ab01      	add	r3, sp, #4
 8007216:	f7ff ffc9 	bl	80071ac <__swhatbuf_r>
 800721a:	9900      	ldr	r1, [sp, #0]
 800721c:	4605      	mov	r5, r0
 800721e:	4630      	mov	r0, r6
 8007220:	f7fe feca 	bl	8005fb8 <_malloc_r>
 8007224:	b948      	cbnz	r0, 800723a <__smakebuf_r+0x44>
 8007226:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800722a:	059a      	lsls	r2, r3, #22
 800722c:	d4ef      	bmi.n	800720e <__smakebuf_r+0x18>
 800722e:	f023 0303 	bic.w	r3, r3, #3
 8007232:	f043 0302 	orr.w	r3, r3, #2
 8007236:	81a3      	strh	r3, [r4, #12]
 8007238:	e7e3      	b.n	8007202 <__smakebuf_r+0xc>
 800723a:	89a3      	ldrh	r3, [r4, #12]
 800723c:	6020      	str	r0, [r4, #0]
 800723e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007242:	81a3      	strh	r3, [r4, #12]
 8007244:	9b00      	ldr	r3, [sp, #0]
 8007246:	6120      	str	r0, [r4, #16]
 8007248:	6163      	str	r3, [r4, #20]
 800724a:	9b01      	ldr	r3, [sp, #4]
 800724c:	b15b      	cbz	r3, 8007266 <__smakebuf_r+0x70>
 800724e:	4630      	mov	r0, r6
 8007250:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007254:	f000 f81e 	bl	8007294 <_isatty_r>
 8007258:	b128      	cbz	r0, 8007266 <__smakebuf_r+0x70>
 800725a:	89a3      	ldrh	r3, [r4, #12]
 800725c:	f023 0303 	bic.w	r3, r3, #3
 8007260:	f043 0301 	orr.w	r3, r3, #1
 8007264:	81a3      	strh	r3, [r4, #12]
 8007266:	89a3      	ldrh	r3, [r4, #12]
 8007268:	431d      	orrs	r5, r3
 800726a:	81a5      	strh	r5, [r4, #12]
 800726c:	e7cf      	b.n	800720e <__smakebuf_r+0x18>
	...

08007270 <_fstat_r>:
 8007270:	b538      	push	{r3, r4, r5, lr}
 8007272:	2300      	movs	r3, #0
 8007274:	4d06      	ldr	r5, [pc, #24]	; (8007290 <_fstat_r+0x20>)
 8007276:	4604      	mov	r4, r0
 8007278:	4608      	mov	r0, r1
 800727a:	4611      	mov	r1, r2
 800727c:	602b      	str	r3, [r5, #0]
 800727e:	f7fa fc1d 	bl	8001abc <_fstat>
 8007282:	1c43      	adds	r3, r0, #1
 8007284:	d102      	bne.n	800728c <_fstat_r+0x1c>
 8007286:	682b      	ldr	r3, [r5, #0]
 8007288:	b103      	cbz	r3, 800728c <_fstat_r+0x1c>
 800728a:	6023      	str	r3, [r4, #0]
 800728c:	bd38      	pop	{r3, r4, r5, pc}
 800728e:	bf00      	nop
 8007290:	200004fc 	.word	0x200004fc

08007294 <_isatty_r>:
 8007294:	b538      	push	{r3, r4, r5, lr}
 8007296:	2300      	movs	r3, #0
 8007298:	4d05      	ldr	r5, [pc, #20]	; (80072b0 <_isatty_r+0x1c>)
 800729a:	4604      	mov	r4, r0
 800729c:	4608      	mov	r0, r1
 800729e:	602b      	str	r3, [r5, #0]
 80072a0:	f7fa fc1b 	bl	8001ada <_isatty>
 80072a4:	1c43      	adds	r3, r0, #1
 80072a6:	d102      	bne.n	80072ae <_isatty_r+0x1a>
 80072a8:	682b      	ldr	r3, [r5, #0]
 80072aa:	b103      	cbz	r3, 80072ae <_isatty_r+0x1a>
 80072ac:	6023      	str	r3, [r4, #0]
 80072ae:	bd38      	pop	{r3, r4, r5, pc}
 80072b0:	200004fc 	.word	0x200004fc

080072b4 <_init>:
 80072b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072b6:	bf00      	nop
 80072b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ba:	bc08      	pop	{r3}
 80072bc:	469e      	mov	lr, r3
 80072be:	4770      	bx	lr

080072c0 <_fini>:
 80072c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072c2:	bf00      	nop
 80072c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072c6:	bc08      	pop	{r3}
 80072c8:	469e      	mov	lr, r3
 80072ca:	4770      	bx	lr
