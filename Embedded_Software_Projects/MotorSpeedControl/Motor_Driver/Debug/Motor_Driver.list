
Motor_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081ac  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  080082c0  080082c0  000182c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800867c  0800867c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800867c  0800867c  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800867c  0800867c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800867c  0800867c  0001867c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008680  08008680  00018680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08008684  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  200001d4  08008858  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000500  08008858  00020500  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000086  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e638  00000000  00000000  00020283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002465  00000000  00000000  0002e8bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e80  00000000  00000000  00030d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b50  00000000  00000000  00031ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001942d  00000000  00000000  000326f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010e06  00000000  00000000  0004bb1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091309  00000000  00000000  0005c923  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004f28  00000000  00000000  000edc2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000f2b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	080082a4 	.word	0x080082a4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	080082a4 	.word	0x080082a4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_f2iz>:
 8000fe4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fec:	d30f      	bcc.n	800100e <__aeabi_f2iz+0x2a>
 8000fee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ff2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ff6:	d90d      	bls.n	8001014 <__aeabi_f2iz+0x30>
 8000ff8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ffc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001000:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001004:	fa23 f002 	lsr.w	r0, r3, r2
 8001008:	bf18      	it	ne
 800100a:	4240      	negne	r0, r0
 800100c:	4770      	bx	lr
 800100e:	f04f 0000 	mov.w	r0, #0
 8001012:	4770      	bx	lr
 8001014:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001018:	d101      	bne.n	800101e <__aeabi_f2iz+0x3a>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	d105      	bne.n	800102a <__aeabi_f2iz+0x46>
 800101e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001022:	bf08      	it	eq
 8001024:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001028:	4770      	bx	lr
 800102a:	f04f 0000 	mov.w	r0, #0
 800102e:	4770      	bx	lr

08001030 <__aeabi_f2uiz>:
 8001030:	0042      	lsls	r2, r0, #1
 8001032:	d20e      	bcs.n	8001052 <__aeabi_f2uiz+0x22>
 8001034:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001038:	d30b      	bcc.n	8001052 <__aeabi_f2uiz+0x22>
 800103a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800103e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001042:	d409      	bmi.n	8001058 <__aeabi_f2uiz+0x28>
 8001044:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001048:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800104c:	fa23 f002 	lsr.w	r0, r3, r2
 8001050:	4770      	bx	lr
 8001052:	f04f 0000 	mov.w	r0, #0
 8001056:	4770      	bx	lr
 8001058:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800105c:	d101      	bne.n	8001062 <__aeabi_f2uiz+0x32>
 800105e:	0242      	lsls	r2, r0, #9
 8001060:	d102      	bne.n	8001068 <__aeabi_f2uiz+0x38>
 8001062:	f04f 30ff 	mov.w	r0, #4294967295
 8001066:	4770      	bx	lr
 8001068:	f04f 0000 	mov.w	r0, #0
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <Map>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint16_t Map(float adc_value, float adc_max, float adc_min, float conmax, float conmin){
 8001070:	b5b0      	push	{r4, r5, r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
 800107c:	603b      	str	r3, [r7, #0]

	return (int)((adc_value - adc_min) * ((conmax - conmin) / (adc_max - adc_min))) + conmin;
 800107e:	6879      	ldr	r1, [r7, #4]
 8001080:	68f8      	ldr	r0, [r7, #12]
 8001082:	f7ff fd55 	bl	8000b30 <__aeabi_fsub>
 8001086:	4603      	mov	r3, r0
 8001088:	461c      	mov	r4, r3
 800108a:	6a39      	ldr	r1, [r7, #32]
 800108c:	6838      	ldr	r0, [r7, #0]
 800108e:	f7ff fd4f 	bl	8000b30 <__aeabi_fsub>
 8001092:	4603      	mov	r3, r0
 8001094:	461d      	mov	r5, r3
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	68b8      	ldr	r0, [r7, #8]
 800109a:	f7ff fd49 	bl	8000b30 <__aeabi_fsub>
 800109e:	4603      	mov	r3, r0
 80010a0:	4619      	mov	r1, r3
 80010a2:	4628      	mov	r0, r5
 80010a4:	f7ff ff02 	bl	8000eac <__aeabi_fdiv>
 80010a8:	4603      	mov	r3, r0
 80010aa:	4619      	mov	r1, r3
 80010ac:	4620      	mov	r0, r4
 80010ae:	f7ff fe49 	bl	8000d44 <__aeabi_fmul>
 80010b2:	4603      	mov	r3, r0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff95 	bl	8000fe4 <__aeabi_f2iz>
 80010ba:	4603      	mov	r3, r0
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fded 	bl	8000c9c <__aeabi_i2f>
 80010c2:	4603      	mov	r3, r0
 80010c4:	6a39      	ldr	r1, [r7, #32]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fd34 	bl	8000b34 <__addsf3>
 80010cc:	4603      	mov	r3, r0
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff ffae 	bl	8001030 <__aeabi_f2uiz>
 80010d4:	4603      	mov	r3, r0
 80010d6:	b29b      	uxth	r3, r3

}
 80010d8:	4618      	mov	r0, r3
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bdb0      	pop	{r4, r5, r7, pc}

080010e0 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 80010e0:	b590      	push	{r4, r7, lr}
 80010e2:	b087      	sub	sp, #28
 80010e4:	af02      	add	r7, sp, #8
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	460b      	mov	r3, r1
 80010ea:	807b      	strh	r3, [r7, #2]

	if(USART1 == huart->Instance){
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a2f      	ldr	r2, [pc, #188]	; (80011b0 <HAL_UARTEx_RxEventCallback+0xd0>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d144      	bne.n	8001180 <HAL_UARTEx_RxEventCallback+0xa0>

		if(__HAL_DMA_GET_TC_FLAG_INDEX(&hdma_usart1_rx)){

			deger = atoi((char *)RxBuffer);
 80010f6:	482f      	ldr	r0, [pc, #188]	; (80011b4 <HAL_UARTEx_RxEventCallback+0xd4>)
 80010f8:	f004 f9da 	bl	80054b0 <atoi>
 80010fc:	4603      	mov	r3, r0
 80010fe:	b29a      	uxth	r2, r3
 8001100:	4b2d      	ldr	r3, [pc, #180]	; (80011b8 <HAL_UARTEx_RxEventCallback+0xd8>)
 8001102:	801a      	strh	r2, [r3, #0]
			adc_voltage = deger * ((3.3)/4095);
 8001104:	4b2c      	ldr	r3, [pc, #176]	; (80011b8 <HAL_UARTEx_RxEventCallback+0xd8>)
 8001106:	881b      	ldrh	r3, [r3, #0]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff f97b 	bl	8000404 <__aeabi_i2d>
 800110e:	a326      	add	r3, pc, #152	; (adr r3, 80011a8 <HAL_UARTEx_RxEventCallback+0xc8>)
 8001110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001114:	f7ff f9e0 	bl	80004d8 <__aeabi_dmul>
 8001118:	4602      	mov	r2, r0
 800111a:	460b      	mov	r3, r1
 800111c:	4610      	mov	r0, r2
 800111e:	4619      	mov	r1, r3
 8001120:	f7ff fcb2 	bl	8000a88 <__aeabi_d2f>
 8001124:	4603      	mov	r3, r0
 8001126:	4a25      	ldr	r2, [pc, #148]	; (80011bc <HAL_UARTEx_RxEventCallback+0xdc>)
 8001128:	6013      	str	r3, [r2, #0]
			size = sprintf((char *)TxBuffer, "PWM: %d - Voltage: %.1fV\n", deger, adc_voltage);
 800112a:	4b23      	ldr	r3, [pc, #140]	; (80011b8 <HAL_UARTEx_RxEventCallback+0xd8>)
 800112c:	881b      	ldrh	r3, [r3, #0]
 800112e:	461c      	mov	r4, r3
 8001130:	4b22      	ldr	r3, [pc, #136]	; (80011bc <HAL_UARTEx_RxEventCallback+0xdc>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff f977 	bl	8000428 <__aeabi_f2d>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	e9cd 2300 	strd	r2, r3, [sp]
 8001142:	4622      	mov	r2, r4
 8001144:	491e      	ldr	r1, [pc, #120]	; (80011c0 <HAL_UARTEx_RxEventCallback+0xe0>)
 8001146:	481f      	ldr	r0, [pc, #124]	; (80011c4 <HAL_UARTEx_RxEventCallback+0xe4>)
 8001148:	f004 ff5e 	bl	8006008 <siprintf>
 800114c:	4603      	mov	r3, r0
 800114e:	b2da      	uxtb	r2, r3
 8001150:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <HAL_UARTEx_RxEventCallback+0xe8>)
 8001152:	701a      	strb	r2, [r3, #0]

			HAL_UART_Transmit_DMA(&huart1, TxBuffer, size);
 8001154:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <HAL_UARTEx_RxEventCallback+0xe8>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	b29b      	uxth	r3, r3
 800115a:	461a      	mov	r2, r3
 800115c:	4919      	ldr	r1, [pc, #100]	; (80011c4 <HAL_UARTEx_RxEventCallback+0xe4>)
 800115e:	481b      	ldr	r0, [pc, #108]	; (80011cc <HAL_UARTEx_RxEventCallback+0xec>)
 8001160:	f003 f9d6 	bl	8004510 <HAL_UART_Transmit_DMA>

			for(int i=Size; i<BUFFER_SIZE; ++i)
 8001164:	887b      	ldrh	r3, [r7, #2]
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	e007      	b.n	800117a <HAL_UARTEx_RxEventCallback+0x9a>
				RxBuffer[i] = 0;
 800116a:	4a12      	ldr	r2, [pc, #72]	; (80011b4 <HAL_UARTEx_RxEventCallback+0xd4>)
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4413      	add	r3, r2
 8001170:	2200      	movs	r2, #0
 8001172:	701a      	strb	r2, [r3, #0]
			for(int i=Size; i<BUFFER_SIZE; ++i)
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	3301      	adds	r3, #1
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	2b31      	cmp	r3, #49	; 0x31
 800117e:	ddf4      	ble.n	800116a <HAL_UARTEx_RxEventCallback+0x8a>
		}

	}

	  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuffer, BUFFER_SIZE);
 8001180:	2232      	movs	r2, #50	; 0x32
 8001182:	490c      	ldr	r1, [pc, #48]	; (80011b4 <HAL_UARTEx_RxEventCallback+0xd4>)
 8001184:	4811      	ldr	r0, [pc, #68]	; (80011cc <HAL_UARTEx_RxEventCallback+0xec>)
 8001186:	f003 fa33 	bl	80045f0 <HAL_UARTEx_ReceiveToIdle_DMA>
	  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800118a:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <HAL_UARTEx_RxEventCallback+0xf0>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <HAL_UARTEx_RxEventCallback+0xf0>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f022 0204 	bic.w	r2, r2, #4
 8001198:	601a      	str	r2, [r3, #0]

}
 800119a:	bf00      	nop
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd90      	pop	{r4, r7, pc}
 80011a2:	bf00      	nop
 80011a4:	f3af 8000 	nop.w
 80011a8:	e734d9b4 	.word	0xe734d9b4
 80011ac:	3f4a680c 	.word	0x3f4a680c
 80011b0:	40013800 	.word	0x40013800
 80011b4:	20000378 	.word	0x20000378
 80011b8:	20000342 	.word	0x20000342
 80011bc:	2000033c 	.word	0x2000033c
 80011c0:	080082c0 	.word	0x080082c0
 80011c4:	20000344 	.word	0x20000344
 80011c8:	200003aa 	.word	0x200003aa
 80011cc:	20000268 	.word	0x20000268
 80011d0:	200002f4 	.word	0x200002f4

080011d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011da:	f000 fcbd 	bl	8001b58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011de:	f000 f849 	bl	8001274 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011e2:	f000 f9d1 	bl	8001588 <MX_GPIO_Init>
  MX_DMA_Init();
 80011e6:	f000 f9a9 	bl	800153c <MX_DMA_Init>
  MX_ADC1_Init();
 80011ea:	f000 f89f 	bl	800132c <MX_ADC1_Init>
  MX_TIM1_Init();
 80011ee:	f000 f8db 	bl	80013a8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80011f2:	f000 f979 	bl	80014e8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_IT(&hadc1);
 80011f6:	4816      	ldr	r0, [pc, #88]	; (8001250 <main+0x7c>)
 80011f8:	f000 fde8 	bl	8001dcc <HAL_ADC_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80011fc:	2100      	movs	r1, #0
 80011fe:	4815      	ldr	r0, [pc, #84]	; (8001254 <main+0x80>)
 8001200:	f002 fbb6 	bl	8003970 <HAL_TIM_PWM_Start>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuffer, BUFFER_SIZE);
 8001204:	2232      	movs	r2, #50	; 0x32
 8001206:	4914      	ldr	r1, [pc, #80]	; (8001258 <main+0x84>)
 8001208:	4814      	ldr	r0, [pc, #80]	; (800125c <main+0x88>)
 800120a:	f003 f9f1 	bl	80045f0 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800120e:	4b14      	ldr	r3, [pc, #80]	; (8001260 <main+0x8c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	4b12      	ldr	r3, [pc, #72]	; (8001260 <main+0x8c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f022 0204 	bic.w	r2, r2, #4
 800121c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  pulse = Map(deger, 4095, 0, 99, 0);
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <main+0x90>)
 8001220:	881b      	ldrh	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fd36 	bl	8000c94 <__aeabi_ui2f>
 8001228:	f04f 0300 	mov.w	r3, #0
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <main+0x94>)
 8001230:	f04f 0200 	mov.w	r2, #0
 8001234:	490d      	ldr	r1, [pc, #52]	; (800126c <main+0x98>)
 8001236:	f7ff ff1b 	bl	8001070 <Map>
 800123a:	4603      	mov	r3, r0
 800123c:	461a      	mov	r2, r3
 800123e:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <main+0x9c>)
 8001240:	801a      	strh	r2, [r3, #0]
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse);
 8001242:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <main+0x9c>)
 8001244:	881a      	ldrh	r2, [r3, #0]
 8001246:	4b03      	ldr	r3, [pc, #12]	; (8001254 <main+0x80>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	635a      	str	r2, [r3, #52]	; 0x34
	  pulse = Map(deger, 4095, 0, 99, 0);
 800124c:	e7e7      	b.n	800121e <main+0x4a>
 800124e:	bf00      	nop
 8001250:	200001f0 	.word	0x200001f0
 8001254:	20000220 	.word	0x20000220
 8001258:	20000378 	.word	0x20000378
 800125c:	20000268 	.word	0x20000268
 8001260:	200002f4 	.word	0x200002f4
 8001264:	20000342 	.word	0x20000342
 8001268:	42c60000 	.word	0x42c60000
 800126c:	457ff000 	.word	0x457ff000
 8001270:	20000340 	.word	0x20000340

08001274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b094      	sub	sp, #80	; 0x50
 8001278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800127a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800127e:	2228      	movs	r2, #40	; 0x28
 8001280:	2100      	movs	r1, #0
 8001282:	4618      	mov	r0, r3
 8001284:	f004 ff23 	bl	80060ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001298:	1d3b      	adds	r3, r7, #4
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012a4:	2301      	movs	r3, #1
 80012a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012ae:	2300      	movs	r3, #0
 80012b0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012b2:	2301      	movs	r3, #1
 80012b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012b6:	2302      	movs	r3, #2
 80012b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012c0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80012c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012ca:	4618      	mov	r0, r3
 80012cc:	f001 fde2 	bl	8002e94 <HAL_RCC_OscConfig>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <SystemClock_Config+0x66>
  {
    Error_Handler();
 80012d6:	f000 f979 	bl	80015cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012da:	230f      	movs	r3, #15
 80012dc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012de:	2302      	movs	r3, #2
 80012e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012ea:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ec:	2300      	movs	r3, #0
 80012ee:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	2102      	movs	r1, #2
 80012f6:	4618      	mov	r0, r3
 80012f8:	f002 f84e 	bl	8003398 <HAL_RCC_ClockConfig>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001302:	f000 f963 	bl	80015cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001306:	2302      	movs	r3, #2
 8001308:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800130a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800130e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001310:	1d3b      	adds	r3, r7, #4
 8001312:	4618      	mov	r0, r3
 8001314:	f002 f9ce 	bl	80036b4 <HAL_RCCEx_PeriphCLKConfig>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800131e:	f000 f955 	bl	80015cc <Error_Handler>
  }
}
 8001322:	bf00      	nop
 8001324:	3750      	adds	r7, #80	; 0x50
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800133c:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <MX_ADC1_Init+0x74>)
 800133e:	4a19      	ldr	r2, [pc, #100]	; (80013a4 <MX_ADC1_Init+0x78>)
 8001340:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001342:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <MX_ADC1_Init+0x74>)
 8001344:	2200      	movs	r2, #0
 8001346:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001348:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <MX_ADC1_Init+0x74>)
 800134a:	2201      	movs	r2, #1
 800134c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800134e:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <MX_ADC1_Init+0x74>)
 8001350:	2200      	movs	r2, #0
 8001352:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001354:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <MX_ADC1_Init+0x74>)
 8001356:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800135a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800135c:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <MX_ADC1_Init+0x74>)
 800135e:	2200      	movs	r2, #0
 8001360:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001362:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <MX_ADC1_Init+0x74>)
 8001364:	2201      	movs	r2, #1
 8001366:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001368:	480d      	ldr	r0, [pc, #52]	; (80013a0 <MX_ADC1_Init+0x74>)
 800136a:	f000 fc57 	bl	8001c1c <HAL_ADC_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001374:	f000 f92a 	bl	80015cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001378:	2300      	movs	r3, #0
 800137a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800137c:	2301      	movs	r3, #1
 800137e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001380:	2305      	movs	r3, #5
 8001382:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001384:	1d3b      	adds	r3, r7, #4
 8001386:	4619      	mov	r1, r3
 8001388:	4805      	ldr	r0, [pc, #20]	; (80013a0 <MX_ADC1_Init+0x74>)
 800138a:	f000 feb3 	bl	80020f4 <HAL_ADC_ConfigChannel>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001394:	f000 f91a 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001398:	bf00      	nop
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	200001f0 	.word	0x200001f0
 80013a4:	40012400 	.word	0x40012400

080013a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b096      	sub	sp, #88	; 0x58
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
 80013d4:	611a      	str	r2, [r3, #16]
 80013d6:	615a      	str	r2, [r3, #20]
 80013d8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	2220      	movs	r2, #32
 80013de:	2100      	movs	r1, #0
 80013e0:	4618      	mov	r0, r3
 80013e2:	f004 fe74 	bl	80060ce <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013e6:	4b3e      	ldr	r3, [pc, #248]	; (80014e0 <MX_TIM1_Init+0x138>)
 80013e8:	4a3e      	ldr	r2, [pc, #248]	; (80014e4 <MX_TIM1_Init+0x13c>)
 80013ea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80013ec:	4b3c      	ldr	r3, [pc, #240]	; (80014e0 <MX_TIM1_Init+0x138>)
 80013ee:	2247      	movs	r2, #71	; 0x47
 80013f0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f2:	4b3b      	ldr	r3, [pc, #236]	; (80014e0 <MX_TIM1_Init+0x138>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80013f8:	4b39      	ldr	r3, [pc, #228]	; (80014e0 <MX_TIM1_Init+0x138>)
 80013fa:	2263      	movs	r2, #99	; 0x63
 80013fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013fe:	4b38      	ldr	r3, [pc, #224]	; (80014e0 <MX_TIM1_Init+0x138>)
 8001400:	2200      	movs	r2, #0
 8001402:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001404:	4b36      	ldr	r3, [pc, #216]	; (80014e0 <MX_TIM1_Init+0x138>)
 8001406:	2200      	movs	r2, #0
 8001408:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800140a:	4b35      	ldr	r3, [pc, #212]	; (80014e0 <MX_TIM1_Init+0x138>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001410:	4833      	ldr	r0, [pc, #204]	; (80014e0 <MX_TIM1_Init+0x138>)
 8001412:	f002 fa05 	bl	8003820 <HAL_TIM_Base_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800141c:	f000 f8d6 	bl	80015cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001420:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001424:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001426:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800142a:	4619      	mov	r1, r3
 800142c:	482c      	ldr	r0, [pc, #176]	; (80014e0 <MX_TIM1_Init+0x138>)
 800142e:	f002 fc03 	bl	8003c38 <HAL_TIM_ConfigClockSource>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001438:	f000 f8c8 	bl	80015cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800143c:	4828      	ldr	r0, [pc, #160]	; (80014e0 <MX_TIM1_Init+0x138>)
 800143e:	f002 fa3e 	bl	80038be <HAL_TIM_PWM_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001448:	f000 f8c0 	bl	80015cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800144c:	2300      	movs	r3, #0
 800144e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001450:	2300      	movs	r3, #0
 8001452:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001454:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001458:	4619      	mov	r1, r3
 800145a:	4821      	ldr	r0, [pc, #132]	; (80014e0 <MX_TIM1_Init+0x138>)
 800145c:	f002 ff58 	bl	8004310 <HAL_TIMEx_MasterConfigSynchronization>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001466:	f000 f8b1 	bl	80015cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800146a:	2360      	movs	r3, #96	; 0x60
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001472:	2300      	movs	r3, #0
 8001474:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001476:	2300      	movs	r3, #0
 8001478:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800147a:	2300      	movs	r3, #0
 800147c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800147e:	2300      	movs	r3, #0
 8001480:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001482:	2300      	movs	r3, #0
 8001484:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001486:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800148a:	2200      	movs	r2, #0
 800148c:	4619      	mov	r1, r3
 800148e:	4814      	ldr	r0, [pc, #80]	; (80014e0 <MX_TIM1_Init+0x138>)
 8001490:	f002 fb10 	bl	8003ab4 <HAL_TIM_PWM_ConfigChannel>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800149a:	f000 f897 	bl	80015cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800149e:	2300      	movs	r3, #0
 80014a0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014a2:	2300      	movs	r3, #0
 80014a4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014b6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014b8:	2300      	movs	r3, #0
 80014ba:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	4619      	mov	r1, r3
 80014c0:	4807      	ldr	r0, [pc, #28]	; (80014e0 <MX_TIM1_Init+0x138>)
 80014c2:	f002 ff83 	bl	80043cc <HAL_TIMEx_ConfigBreakDeadTime>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80014cc:	f000 f87e 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014d0:	4803      	ldr	r0, [pc, #12]	; (80014e0 <MX_TIM1_Init+0x138>)
 80014d2:	f000 f915 	bl	8001700 <HAL_TIM_MspPostInit>

}
 80014d6:	bf00      	nop
 80014d8:	3758      	adds	r7, #88	; 0x58
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000220 	.word	0x20000220
 80014e4:	40012c00 	.word	0x40012c00

080014e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014ec:	4b11      	ldr	r3, [pc, #68]	; (8001534 <MX_USART1_UART_Init+0x4c>)
 80014ee:	4a12      	ldr	r2, [pc, #72]	; (8001538 <MX_USART1_UART_Init+0x50>)
 80014f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014f2:	4b10      	ldr	r3, [pc, #64]	; (8001534 <MX_USART1_UART_Init+0x4c>)
 80014f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <MX_USART1_UART_Init+0x4c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <MX_USART1_UART_Init+0x4c>)
 8001502:	2200      	movs	r2, #0
 8001504:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001506:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <MX_USART1_UART_Init+0x4c>)
 8001508:	2200      	movs	r2, #0
 800150a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800150c:	4b09      	ldr	r3, [pc, #36]	; (8001534 <MX_USART1_UART_Init+0x4c>)
 800150e:	220c      	movs	r2, #12
 8001510:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001512:	4b08      	ldr	r3, [pc, #32]	; (8001534 <MX_USART1_UART_Init+0x4c>)
 8001514:	2200      	movs	r2, #0
 8001516:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <MX_USART1_UART_Init+0x4c>)
 800151a:	2200      	movs	r2, #0
 800151c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800151e:	4805      	ldr	r0, [pc, #20]	; (8001534 <MX_USART1_UART_Init+0x4c>)
 8001520:	f002 ffa5 	bl	800446e <HAL_UART_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800152a:	f000 f84f 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000268 	.word	0x20000268
 8001538:	40013800 	.word	0x40013800

0800153c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001542:	4b10      	ldr	r3, [pc, #64]	; (8001584 <MX_DMA_Init+0x48>)
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	4a0f      	ldr	r2, [pc, #60]	; (8001584 <MX_DMA_Init+0x48>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	6153      	str	r3, [r2, #20]
 800154e:	4b0d      	ldr	r3, [pc, #52]	; (8001584 <MX_DMA_Init+0x48>)
 8001550:	695b      	ldr	r3, [r3, #20]
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	607b      	str	r3, [r7, #4]
 8001558:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800155a:	2200      	movs	r2, #0
 800155c:	2100      	movs	r1, #0
 800155e:	200e      	movs	r0, #14
 8001560:	f001 f83b 	bl	80025da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001564:	200e      	movs	r0, #14
 8001566:	f001 f854 	bl	8002612 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800156a:	2200      	movs	r2, #0
 800156c:	2100      	movs	r1, #0
 800156e:	200f      	movs	r0, #15
 8001570:	f001 f833 	bl	80025da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001574:	200f      	movs	r0, #15
 8001576:	f001 f84c 	bl	8002612 <HAL_NVIC_EnableIRQ>

}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40021000 	.word	0x40021000

08001588 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800158e:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <MX_GPIO_Init+0x40>)
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	4a0d      	ldr	r2, [pc, #52]	; (80015c8 <MX_GPIO_Init+0x40>)
 8001594:	f043 0320 	orr.w	r3, r3, #32
 8001598:	6193      	str	r3, [r2, #24]
 800159a:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <MX_GPIO_Init+0x40>)
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	f003 0320 	and.w	r3, r3, #32
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a6:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <MX_GPIO_Init+0x40>)
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	4a07      	ldr	r2, [pc, #28]	; (80015c8 <MX_GPIO_Init+0x40>)
 80015ac:	f043 0304 	orr.w	r3, r3, #4
 80015b0:	6193      	str	r3, [r2, #24]
 80015b2:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <MX_GPIO_Init+0x40>)
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	f003 0304 	and.w	r3, r3, #4
 80015ba:	603b      	str	r3, [r7, #0]
 80015bc:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr
 80015c8:	40021000 	.word	0x40021000

080015cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015d0:	b672      	cpsid	i
}
 80015d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <Error_Handler+0x8>
	...

080015d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015de:	4b15      	ldr	r3, [pc, #84]	; (8001634 <HAL_MspInit+0x5c>)
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	4a14      	ldr	r2, [pc, #80]	; (8001634 <HAL_MspInit+0x5c>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	6193      	str	r3, [r2, #24]
 80015ea:	4b12      	ldr	r3, [pc, #72]	; (8001634 <HAL_MspInit+0x5c>)
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	60bb      	str	r3, [r7, #8]
 80015f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015f6:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <HAL_MspInit+0x5c>)
 80015f8:	69db      	ldr	r3, [r3, #28]
 80015fa:	4a0e      	ldr	r2, [pc, #56]	; (8001634 <HAL_MspInit+0x5c>)
 80015fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001600:	61d3      	str	r3, [r2, #28]
 8001602:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <HAL_MspInit+0x5c>)
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800160e:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <HAL_MspInit+0x60>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	4a04      	ldr	r2, [pc, #16]	; (8001638 <HAL_MspInit+0x60>)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800162a:	bf00      	nop
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr
 8001634:	40021000 	.word	0x40021000
 8001638:	40010000 	.word	0x40010000

0800163c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b088      	sub	sp, #32
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	f107 0310 	add.w	r3, r7, #16
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a18      	ldr	r2, [pc, #96]	; (80016b8 <HAL_ADC_MspInit+0x7c>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d129      	bne.n	80016b0 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800165c:	4b17      	ldr	r3, [pc, #92]	; (80016bc <HAL_ADC_MspInit+0x80>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	4a16      	ldr	r2, [pc, #88]	; (80016bc <HAL_ADC_MspInit+0x80>)
 8001662:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001666:	6193      	str	r3, [r2, #24]
 8001668:	4b14      	ldr	r3, [pc, #80]	; (80016bc <HAL_ADC_MspInit+0x80>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001674:	4b11      	ldr	r3, [pc, #68]	; (80016bc <HAL_ADC_MspInit+0x80>)
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	4a10      	ldr	r2, [pc, #64]	; (80016bc <HAL_ADC_MspInit+0x80>)
 800167a:	f043 0304 	orr.w	r3, r3, #4
 800167e:	6193      	str	r3, [r2, #24]
 8001680:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <HAL_ADC_MspInit+0x80>)
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800168c:	2301      	movs	r3, #1
 800168e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001690:	2303      	movs	r3, #3
 8001692:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001694:	f107 0310 	add.w	r3, r7, #16
 8001698:	4619      	mov	r1, r3
 800169a:	4809      	ldr	r0, [pc, #36]	; (80016c0 <HAL_ADC_MspInit+0x84>)
 800169c:	f001 fa76 	bl	8002b8c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80016a0:	2200      	movs	r2, #0
 80016a2:	2100      	movs	r1, #0
 80016a4:	2012      	movs	r0, #18
 80016a6:	f000 ff98 	bl	80025da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80016aa:	2012      	movs	r0, #18
 80016ac:	f000 ffb1 	bl	8002612 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016b0:	bf00      	nop
 80016b2:	3720      	adds	r7, #32
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40012400 	.word	0x40012400
 80016bc:	40021000 	.word	0x40021000
 80016c0:	40010800 	.word	0x40010800

080016c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a09      	ldr	r2, [pc, #36]	; (80016f8 <HAL_TIM_Base_MspInit+0x34>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d10b      	bne.n	80016ee <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016d6:	4b09      	ldr	r3, [pc, #36]	; (80016fc <HAL_TIM_Base_MspInit+0x38>)
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	4a08      	ldr	r2, [pc, #32]	; (80016fc <HAL_TIM_Base_MspInit+0x38>)
 80016dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016e0:	6193      	str	r3, [r2, #24]
 80016e2:	4b06      	ldr	r3, [pc, #24]	; (80016fc <HAL_TIM_Base_MspInit+0x38>)
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80016ee:	bf00      	nop
 80016f0:	3714      	adds	r7, #20
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr
 80016f8:	40012c00 	.word	0x40012c00
 80016fc:	40021000 	.word	0x40021000

08001700 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b088      	sub	sp, #32
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001708:	f107 0310 	add.w	r3, r7, #16
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a10      	ldr	r2, [pc, #64]	; (800175c <HAL_TIM_MspPostInit+0x5c>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d118      	bne.n	8001752 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001720:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <HAL_TIM_MspPostInit+0x60>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	4a0e      	ldr	r2, [pc, #56]	; (8001760 <HAL_TIM_MspPostInit+0x60>)
 8001726:	f043 0304 	orr.w	r3, r3, #4
 800172a:	6193      	str	r3, [r2, #24]
 800172c:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <HAL_TIM_MspPostInit+0x60>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001738:	f44f 7380 	mov.w	r3, #256	; 0x100
 800173c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173e:	2302      	movs	r3, #2
 8001740:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001742:	2302      	movs	r3, #2
 8001744:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001746:	f107 0310 	add.w	r3, r7, #16
 800174a:	4619      	mov	r1, r3
 800174c:	4805      	ldr	r0, [pc, #20]	; (8001764 <HAL_TIM_MspPostInit+0x64>)
 800174e:	f001 fa1d 	bl	8002b8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001752:	bf00      	nop
 8001754:	3720      	adds	r7, #32
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40012c00 	.word	0x40012c00
 8001760:	40021000 	.word	0x40021000
 8001764:	40010800 	.word	0x40010800

08001768 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b088      	sub	sp, #32
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001770:	f107 0310 	add.w	r3, r7, #16
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a48      	ldr	r2, [pc, #288]	; (80018a4 <HAL_UART_MspInit+0x13c>)
 8001784:	4293      	cmp	r3, r2
 8001786:	f040 8088 	bne.w	800189a <HAL_UART_MspInit+0x132>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800178a:	4b47      	ldr	r3, [pc, #284]	; (80018a8 <HAL_UART_MspInit+0x140>)
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	4a46      	ldr	r2, [pc, #280]	; (80018a8 <HAL_UART_MspInit+0x140>)
 8001790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001794:	6193      	str	r3, [r2, #24]
 8001796:	4b44      	ldr	r3, [pc, #272]	; (80018a8 <HAL_UART_MspInit+0x140>)
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a2:	4b41      	ldr	r3, [pc, #260]	; (80018a8 <HAL_UART_MspInit+0x140>)
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	4a40      	ldr	r2, [pc, #256]	; (80018a8 <HAL_UART_MspInit+0x140>)
 80017a8:	f043 0304 	orr.w	r3, r3, #4
 80017ac:	6193      	str	r3, [r2, #24]
 80017ae:	4b3e      	ldr	r3, [pc, #248]	; (80018a8 <HAL_UART_MspInit+0x140>)
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	f003 0304 	and.w	r3, r3, #4
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c0:	2302      	movs	r3, #2
 80017c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017c4:	2303      	movs	r3, #3
 80017c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c8:	f107 0310 	add.w	r3, r7, #16
 80017cc:	4619      	mov	r1, r3
 80017ce:	4837      	ldr	r0, [pc, #220]	; (80018ac <HAL_UART_MspInit+0x144>)
 80017d0:	f001 f9dc 	bl	8002b8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017da:	2300      	movs	r3, #0
 80017dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e2:	f107 0310 	add.w	r3, r7, #16
 80017e6:	4619      	mov	r1, r3
 80017e8:	4830      	ldr	r0, [pc, #192]	; (80018ac <HAL_UART_MspInit+0x144>)
 80017ea:	f001 f9cf 	bl	8002b8c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80017ee:	4b30      	ldr	r3, [pc, #192]	; (80018b0 <HAL_UART_MspInit+0x148>)
 80017f0:	4a30      	ldr	r2, [pc, #192]	; (80018b4 <HAL_UART_MspInit+0x14c>)
 80017f2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017f4:	4b2e      	ldr	r3, [pc, #184]	; (80018b0 <HAL_UART_MspInit+0x148>)
 80017f6:	2210      	movs	r2, #16
 80017f8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017fa:	4b2d      	ldr	r3, [pc, #180]	; (80018b0 <HAL_UART_MspInit+0x148>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001800:	4b2b      	ldr	r3, [pc, #172]	; (80018b0 <HAL_UART_MspInit+0x148>)
 8001802:	2280      	movs	r2, #128	; 0x80
 8001804:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001806:	4b2a      	ldr	r3, [pc, #168]	; (80018b0 <HAL_UART_MspInit+0x148>)
 8001808:	2200      	movs	r2, #0
 800180a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800180c:	4b28      	ldr	r3, [pc, #160]	; (80018b0 <HAL_UART_MspInit+0x148>)
 800180e:	2200      	movs	r2, #0
 8001810:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001812:	4b27      	ldr	r3, [pc, #156]	; (80018b0 <HAL_UART_MspInit+0x148>)
 8001814:	2200      	movs	r2, #0
 8001816:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001818:	4b25      	ldr	r3, [pc, #148]	; (80018b0 <HAL_UART_MspInit+0x148>)
 800181a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800181e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001820:	4823      	ldr	r0, [pc, #140]	; (80018b0 <HAL_UART_MspInit+0x148>)
 8001822:	f000 ff11 	bl	8002648 <HAL_DMA_Init>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 800182c:	f7ff fece 	bl	80015cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a1f      	ldr	r2, [pc, #124]	; (80018b0 <HAL_UART_MspInit+0x148>)
 8001834:	639a      	str	r2, [r3, #56]	; 0x38
 8001836:	4a1e      	ldr	r2, [pc, #120]	; (80018b0 <HAL_UART_MspInit+0x148>)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800183c:	4b1e      	ldr	r3, [pc, #120]	; (80018b8 <HAL_UART_MspInit+0x150>)
 800183e:	4a1f      	ldr	r2, [pc, #124]	; (80018bc <HAL_UART_MspInit+0x154>)
 8001840:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001842:	4b1d      	ldr	r3, [pc, #116]	; (80018b8 <HAL_UART_MspInit+0x150>)
 8001844:	2200      	movs	r2, #0
 8001846:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001848:	4b1b      	ldr	r3, [pc, #108]	; (80018b8 <HAL_UART_MspInit+0x150>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800184e:	4b1a      	ldr	r3, [pc, #104]	; (80018b8 <HAL_UART_MspInit+0x150>)
 8001850:	2280      	movs	r2, #128	; 0x80
 8001852:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001854:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <HAL_UART_MspInit+0x150>)
 8001856:	2200      	movs	r2, #0
 8001858:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800185a:	4b17      	ldr	r3, [pc, #92]	; (80018b8 <HAL_UART_MspInit+0x150>)
 800185c:	2200      	movs	r2, #0
 800185e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001860:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <HAL_UART_MspInit+0x150>)
 8001862:	2200      	movs	r2, #0
 8001864:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001866:	4b14      	ldr	r3, [pc, #80]	; (80018b8 <HAL_UART_MspInit+0x150>)
 8001868:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800186c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800186e:	4812      	ldr	r0, [pc, #72]	; (80018b8 <HAL_UART_MspInit+0x150>)
 8001870:	f000 feea 	bl	8002648 <HAL_DMA_Init>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 800187a:	f7ff fea7 	bl	80015cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a0d      	ldr	r2, [pc, #52]	; (80018b8 <HAL_UART_MspInit+0x150>)
 8001882:	63da      	str	r2, [r3, #60]	; 0x3c
 8001884:	4a0c      	ldr	r2, [pc, #48]	; (80018b8 <HAL_UART_MspInit+0x150>)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800188a:	2200      	movs	r2, #0
 800188c:	2100      	movs	r1, #0
 800188e:	2025      	movs	r0, #37	; 0x25
 8001890:	f000 fea3 	bl	80025da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001894:	2025      	movs	r0, #37	; 0x25
 8001896:	f000 febc 	bl	8002612 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800189a:	bf00      	nop
 800189c:	3720      	adds	r7, #32
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40013800 	.word	0x40013800
 80018a8:	40021000 	.word	0x40021000
 80018ac:	40010800 	.word	0x40010800
 80018b0:	200002b0 	.word	0x200002b0
 80018b4:	40020044 	.word	0x40020044
 80018b8:	200002f4 	.word	0x200002f4
 80018bc:	40020058 	.word	0x40020058

080018c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018c4:	e7fe      	b.n	80018c4 <NMI_Handler+0x4>

080018c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ca:	e7fe      	b.n	80018ca <HardFault_Handler+0x4>

080018cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d0:	e7fe      	b.n	80018d0 <MemManage_Handler+0x4>

080018d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018d6:	e7fe      	b.n	80018d6 <BusFault_Handler+0x4>

080018d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018dc:	e7fe      	b.n	80018dc <UsageFault_Handler+0x4>

080018de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bc80      	pop	{r7}
 80018e8:	4770      	bx	lr

080018ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ea:	b480      	push	{r7}
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bc80      	pop	{r7}
 80018f4:	4770      	bx	lr

080018f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr

08001902 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001906:	f000 f96d 	bl	8001be4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
	...

08001910 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001914:	4802      	ldr	r0, [pc, #8]	; (8001920 <DMA1_Channel4_IRQHandler+0x10>)
 8001916:	f001 f805 	bl	8002924 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	200002b0 	.word	0x200002b0

08001924 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001928:	4802      	ldr	r0, [pc, #8]	; (8001934 <DMA1_Channel5_IRQHandler+0x10>)
 800192a:	f000 fffb 	bl	8002924 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	200002f4 	.word	0x200002f4

08001938 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

	if(__HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_EOC)){
 800193c:	4b09      	ldr	r3, [pc, #36]	; (8001964 <ADC1_2_IRQHandler+0x2c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b02      	cmp	r3, #2
 8001948:	d106      	bne.n	8001958 <ADC1_2_IRQHandler+0x20>
		adc_data = HAL_ADC_GetValue(&hadc1);
 800194a:	4806      	ldr	r0, [pc, #24]	; (8001964 <ADC1_2_IRQHandler+0x2c>)
 800194c:	f000 faf4 	bl	8001f38 <HAL_ADC_GetValue>
 8001950:	4603      	mov	r3, r0
 8001952:	b29a      	uxth	r2, r3
 8001954:	4b04      	ldr	r3, [pc, #16]	; (8001968 <ADC1_2_IRQHandler+0x30>)
 8001956:	801a      	strh	r2, [r3, #0]
	}

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001958:	4802      	ldr	r0, [pc, #8]	; (8001964 <ADC1_2_IRQHandler+0x2c>)
 800195a:	f000 faf9 	bl	8001f50 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	200001f0 	.word	0x200001f0
 8001968:	20000338 	.word	0x20000338

0800196c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */


  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001970:	4802      	ldr	r0, [pc, #8]	; (800197c <USART1_IRQHandler+0x10>)
 8001972:	f002 fe9b 	bl	80046ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20000268 	.word	0x20000268

08001980 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  return 1;
 8001984:	2301      	movs	r3, #1
}
 8001986:	4618      	mov	r0, r3
 8001988:	46bd      	mov	sp, r7
 800198a:	bc80      	pop	{r7}
 800198c:	4770      	bx	lr

0800198e <_kill>:

int _kill(int pid, int sig)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
 8001996:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001998:	f004 fbec 	bl	8006174 <__errno>
 800199c:	4603      	mov	r3, r0
 800199e:	2216      	movs	r2, #22
 80019a0:	601a      	str	r2, [r3, #0]
  return -1;
 80019a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <_exit>:

void _exit (int status)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019b6:	f04f 31ff 	mov.w	r1, #4294967295
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7ff ffe7 	bl	800198e <_kill>
  while (1) {}    /* Make sure we hang here */
 80019c0:	e7fe      	b.n	80019c0 <_exit+0x12>

080019c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b086      	sub	sp, #24
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	60f8      	str	r0, [r7, #12]
 80019ca:	60b9      	str	r1, [r7, #8]
 80019cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ce:	2300      	movs	r3, #0
 80019d0:	617b      	str	r3, [r7, #20]
 80019d2:	e00a      	b.n	80019ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019d4:	f3af 8000 	nop.w
 80019d8:	4601      	mov	r1, r0
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	1c5a      	adds	r2, r3, #1
 80019de:	60ba      	str	r2, [r7, #8]
 80019e0:	b2ca      	uxtb	r2, r1
 80019e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	3301      	adds	r3, #1
 80019e8:	617b      	str	r3, [r7, #20]
 80019ea:	697a      	ldr	r2, [r7, #20]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	dbf0      	blt.n	80019d4 <_read+0x12>
  }

  return len;
 80019f2:	687b      	ldr	r3, [r7, #4]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3718      	adds	r7, #24
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	e009      	b.n	8001a22 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	1c5a      	adds	r2, r3, #1
 8001a12:	60ba      	str	r2, [r7, #8]
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	617b      	str	r3, [r7, #20]
 8001a22:	697a      	ldr	r2, [r7, #20]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	dbf1      	blt.n	8001a0e <_write+0x12>
  }
  return len;
 8001a2a:	687b      	ldr	r3, [r7, #4]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3718      	adds	r7, #24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <_close>:

int _close(int file)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bc80      	pop	{r7}
 8001a48:	4770      	bx	lr

08001a4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b083      	sub	sp, #12
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
 8001a52:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a5a:	605a      	str	r2, [r3, #4]
  return 0;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr

08001a68 <_isatty>:

int _isatty(int file)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a70:	2301      	movs	r3, #1
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr

08001a7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr

08001a94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a9c:	4a14      	ldr	r2, [pc, #80]	; (8001af0 <_sbrk+0x5c>)
 8001a9e:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <_sbrk+0x60>)
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aa8:	4b13      	ldr	r3, [pc, #76]	; (8001af8 <_sbrk+0x64>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d102      	bne.n	8001ab6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ab0:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <_sbrk+0x64>)
 8001ab2:	4a12      	ldr	r2, [pc, #72]	; (8001afc <_sbrk+0x68>)
 8001ab4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ab6:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <_sbrk+0x64>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4413      	add	r3, r2
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d207      	bcs.n	8001ad4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ac4:	f004 fb56 	bl	8006174 <__errno>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	220c      	movs	r2, #12
 8001acc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ace:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad2:	e009      	b.n	8001ae8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ad4:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <_sbrk+0x64>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ada:	4b07      	ldr	r3, [pc, #28]	; (8001af8 <_sbrk+0x64>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	4a05      	ldr	r2, [pc, #20]	; (8001af8 <_sbrk+0x64>)
 8001ae4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3718      	adds	r7, #24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20005000 	.word	0x20005000
 8001af4:	00000400 	.word	0x00000400
 8001af8:	200003ac 	.word	0x200003ac
 8001afc:	20000500 	.word	0x20000500

08001b00 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr

08001b0c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b0c:	f7ff fff8 	bl	8001b00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b10:	480b      	ldr	r0, [pc, #44]	; (8001b40 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b12:	490c      	ldr	r1, [pc, #48]	; (8001b44 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b14:	4a0c      	ldr	r2, [pc, #48]	; (8001b48 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b18:	e002      	b.n	8001b20 <LoopCopyDataInit>

08001b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b1e:	3304      	adds	r3, #4

08001b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b24:	d3f9      	bcc.n	8001b1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b26:	4a09      	ldr	r2, [pc, #36]	; (8001b4c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b28:	4c09      	ldr	r4, [pc, #36]	; (8001b50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b2c:	e001      	b.n	8001b32 <LoopFillZerobss>

08001b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b30:	3204      	adds	r2, #4

08001b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b34:	d3fb      	bcc.n	8001b2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b36:	f004 fb23 	bl	8006180 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b3a:	f7ff fb4b 	bl	80011d4 <main>
  bx lr
 8001b3e:	4770      	bx	lr
  ldr r0, =_sdata
 8001b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b44:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001b48:	08008684 	.word	0x08008684
  ldr r2, =_sbss
 8001b4c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001b50:	20000500 	.word	0x20000500

08001b54 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b54:	e7fe      	b.n	8001b54 <CAN1_RX1_IRQHandler>
	...

08001b58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b5c:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <HAL_Init+0x28>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a07      	ldr	r2, [pc, #28]	; (8001b80 <HAL_Init+0x28>)
 8001b62:	f043 0310 	orr.w	r3, r3, #16
 8001b66:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b68:	2003      	movs	r0, #3
 8001b6a:	f000 fd2b 	bl	80025c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b6e:	200f      	movs	r0, #15
 8001b70:	f000 f808 	bl	8001b84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b74:	f7ff fd30 	bl	80015d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40022000 	.word	0x40022000

08001b84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b8c:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <HAL_InitTick+0x54>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <HAL_InitTick+0x58>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	4619      	mov	r1, r3
 8001b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f000 fd43 	bl	800262e <HAL_SYSTICK_Config>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e00e      	b.n	8001bd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b0f      	cmp	r3, #15
 8001bb6:	d80a      	bhi.n	8001bce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	6879      	ldr	r1, [r7, #4]
 8001bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc0:	f000 fd0b 	bl	80025da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bc4:	4a06      	ldr	r2, [pc, #24]	; (8001be0 <HAL_InitTick+0x5c>)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	e000      	b.n	8001bd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000000 	.word	0x20000000
 8001bdc:	20000008 	.word	0x20000008
 8001be0:	20000004 	.word	0x20000004

08001be4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001be8:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <HAL_IncTick+0x1c>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	461a      	mov	r2, r3
 8001bee:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <HAL_IncTick+0x20>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	4a03      	ldr	r2, [pc, #12]	; (8001c04 <HAL_IncTick+0x20>)
 8001bf6:	6013      	str	r3, [r2, #0]
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr
 8001c00:	20000008 	.word	0x20000008
 8001c04:	200003b0 	.word	0x200003b0

08001c08 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c0c:	4b02      	ldr	r3, [pc, #8]	; (8001c18 <HAL_GetTick+0x10>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr
 8001c18:	200003b0 	.word	0x200003b0

08001c1c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c24:	2300      	movs	r3, #0
 8001c26:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001c30:	2300      	movs	r3, #0
 8001c32:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e0be      	b.n	8001dbc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d109      	bne.n	8001c60 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7ff fcee 	bl	800163c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 fb99 	bl	8002398 <ADC_ConversionStop_Disable>
 8001c66:	4603      	mov	r3, r0
 8001c68:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6e:	f003 0310 	and.w	r3, r3, #16
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f040 8099 	bne.w	8001daa <HAL_ADC_Init+0x18e>
 8001c78:	7dfb      	ldrb	r3, [r7, #23]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f040 8095 	bne.w	8001daa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c84:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c88:	f023 0302 	bic.w	r3, r3, #2
 8001c8c:	f043 0202 	orr.w	r2, r3, #2
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c9c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	7b1b      	ldrb	r3, [r3, #12]
 8001ca2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ca4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ca6:	68ba      	ldr	r2, [r7, #8]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cb4:	d003      	beq.n	8001cbe <HAL_ADC_Init+0xa2>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d102      	bne.n	8001cc4 <HAL_ADC_Init+0xa8>
 8001cbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cc2:	e000      	b.n	8001cc6 <HAL_ADC_Init+0xaa>
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	7d1b      	ldrb	r3, [r3, #20]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d119      	bne.n	8001d08 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	7b1b      	ldrb	r3, [r3, #12]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d109      	bne.n	8001cf0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	035a      	lsls	r2, r3, #13
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	e00b      	b.n	8001d08 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf4:	f043 0220 	orr.w	r2, r3, #32
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d00:	f043 0201 	orr.w	r2, r3, #1
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	689a      	ldr	r2, [r3, #8]
 8001d22:	4b28      	ldr	r3, [pc, #160]	; (8001dc4 <HAL_ADC_Init+0x1a8>)
 8001d24:	4013      	ands	r3, r2
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	6812      	ldr	r2, [r2, #0]
 8001d2a:	68b9      	ldr	r1, [r7, #8]
 8001d2c:	430b      	orrs	r3, r1
 8001d2e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d38:	d003      	beq.n	8001d42 <HAL_ADC_Init+0x126>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d104      	bne.n	8001d4c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	3b01      	subs	r3, #1
 8001d48:	051b      	lsls	r3, r3, #20
 8001d4a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d52:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	689a      	ldr	r2, [r3, #8]
 8001d66:	4b18      	ldr	r3, [pc, #96]	; (8001dc8 <HAL_ADC_Init+0x1ac>)
 8001d68:	4013      	ands	r3, r2
 8001d6a:	68ba      	ldr	r2, [r7, #8]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d10b      	bne.n	8001d88 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7a:	f023 0303 	bic.w	r3, r3, #3
 8001d7e:	f043 0201 	orr.w	r2, r3, #1
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d86:	e018      	b.n	8001dba <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8c:	f023 0312 	bic.w	r3, r3, #18
 8001d90:	f043 0210 	orr.w	r2, r3, #16
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9c:	f043 0201 	orr.w	r2, r3, #1
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001da8:	e007      	b.n	8001dba <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dae:	f043 0210 	orr.w	r2, r3, #16
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001dba:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3718      	adds	r7, #24
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	ffe1f7fd 	.word	0xffe1f7fd
 8001dc8:	ff1f0efe 	.word	0xff1f0efe

08001dcc <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d101      	bne.n	8001de6 <HAL_ADC_Start_IT+0x1a>
 8001de2:	2302      	movs	r3, #2
 8001de4:	e0a0      	b.n	8001f28 <HAL_ADC_Start_IT+0x15c>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2201      	movs	r2, #1
 8001dea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 fa78 	bl	80022e4 <ADC_Enable>
 8001df4:	4603      	mov	r3, r0
 8001df6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001df8:	7bfb      	ldrb	r3, [r7, #15]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f040 808f 	bne.w	8001f1e <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e04:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e08:	f023 0301 	bic.w	r3, r3, #1
 8001e0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a45      	ldr	r2, [pc, #276]	; (8001f30 <HAL_ADC_Start_IT+0x164>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d105      	bne.n	8001e2a <HAL_ADC_Start_IT+0x5e>
 8001e1e:	4b45      	ldr	r3, [pc, #276]	; (8001f34 <HAL_ADC_Start_IT+0x168>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d115      	bne.n	8001e56 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d026      	beq.n	8001e92 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e48:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e4c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e54:	e01d      	b.n	8001e92 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a33      	ldr	r2, [pc, #204]	; (8001f34 <HAL_ADC_Start_IT+0x168>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d004      	beq.n	8001e76 <HAL_ADC_Start_IT+0xaa>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a2f      	ldr	r2, [pc, #188]	; (8001f30 <HAL_ADC_Start_IT+0x164>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d10d      	bne.n	8001e92 <HAL_ADC_Start_IT+0xc6>
 8001e76:	4b2f      	ldr	r3, [pc, #188]	; (8001f34 <HAL_ADC_Start_IT+0x168>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d007      	beq.n	8001e92 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e86:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e8a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d006      	beq.n	8001eac <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea2:	f023 0206 	bic.w	r2, r3, #6
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	62da      	str	r2, [r3, #44]	; 0x2c
 8001eaa:	e002      	b.n	8001eb2 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f06f 0202 	mvn.w	r2, #2
 8001ec2:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f042 0220 	orr.w	r2, r2, #32
 8001ed2:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001ede:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001ee2:	d113      	bne.n	8001f0c <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001ee8:	4a11      	ldr	r2, [pc, #68]	; (8001f30 <HAL_ADC_Start_IT+0x164>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d105      	bne.n	8001efa <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001eee:	4b11      	ldr	r3, [pc, #68]	; (8001f34 <HAL_ADC_Start_IT+0x168>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d108      	bne.n	8001f0c <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001f08:	609a      	str	r2, [r3, #8]
 8001f0a:	e00c      	b.n	8001f26 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689a      	ldr	r2, [r3, #8]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	e003      	b.n	8001f26 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40012800 	.word	0x40012800
 8001f34:	40012400 	.word	0x40012400

08001f38 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr

08001f50 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	f003 0320 	and.w	r3, r3, #32
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d03e      	beq.n	8001ff0 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d039      	beq.n	8001ff0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f80:	f003 0310 	and.w	r3, r3, #16
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d105      	bne.n	8001f94 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001f9e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001fa2:	d11d      	bne.n	8001fe0 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d119      	bne.n	8001fe0 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f022 0220 	bic.w	r2, r2, #32
 8001fba:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d105      	bne.n	8001fe0 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd8:	f043 0201 	orr.w	r2, r3, #1
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f874 	bl	80020ce <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f06f 0212 	mvn.w	r2, #18
 8001fee:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d04d      	beq.n	8002096 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f003 0304 	and.w	r3, r3, #4
 8002000:	2b00      	cmp	r3, #0
 8002002:	d048      	beq.n	8002096 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002008:	f003 0310 	and.w	r3, r3, #16
 800200c:	2b00      	cmp	r3, #0
 800200e:	d105      	bne.n	800201c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002014:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8002026:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800202a:	d012      	beq.n	8002052 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002036:	2b00      	cmp	r3, #0
 8002038:	d125      	bne.n	8002086 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002044:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002048:	d11d      	bne.n	8002086 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800204e:	2b00      	cmp	r3, #0
 8002050:	d119      	bne.n	8002086 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002060:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002066:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002076:	2b00      	cmp	r3, #0
 8002078:	d105      	bne.n	8002086 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207e:	f043 0201 	orr.w	r2, r3, #1
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f9c7 	bl	800241a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f06f 020c 	mvn.w	r2, #12
 8002094:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800209c:	2b00      	cmp	r3, #0
 800209e:	d012      	beq.n	80020c6 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00d      	beq.n	80020c6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f812 	bl	80020e0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f06f 0201 	mvn.w	r2, #1
 80020c4:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80020c6:	bf00      	nop
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b083      	sub	sp, #12
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr

080020e0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bc80      	pop	{r7}
 80020f0:	4770      	bx	lr
	...

080020f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020fe:	2300      	movs	r3, #0
 8002100:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002102:	2300      	movs	r3, #0
 8002104:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800210c:	2b01      	cmp	r3, #1
 800210e:	d101      	bne.n	8002114 <HAL_ADC_ConfigChannel+0x20>
 8002110:	2302      	movs	r3, #2
 8002112:	e0dc      	b.n	80022ce <HAL_ADC_ConfigChannel+0x1da>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	2b06      	cmp	r3, #6
 8002122:	d81c      	bhi.n	800215e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685a      	ldr	r2, [r3, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	3b05      	subs	r3, #5
 8002136:	221f      	movs	r2, #31
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	43db      	mvns	r3, r3
 800213e:	4019      	ands	r1, r3
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	6818      	ldr	r0, [r3, #0]
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685a      	ldr	r2, [r3, #4]
 8002148:	4613      	mov	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	3b05      	subs	r3, #5
 8002150:	fa00 f203 	lsl.w	r2, r0, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	430a      	orrs	r2, r1
 800215a:	635a      	str	r2, [r3, #52]	; 0x34
 800215c:	e03c      	b.n	80021d8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2b0c      	cmp	r3, #12
 8002164:	d81c      	bhi.n	80021a0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	4613      	mov	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4413      	add	r3, r2
 8002176:	3b23      	subs	r3, #35	; 0x23
 8002178:	221f      	movs	r2, #31
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	43db      	mvns	r3, r3
 8002180:	4019      	ands	r1, r3
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	6818      	ldr	r0, [r3, #0]
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685a      	ldr	r2, [r3, #4]
 800218a:	4613      	mov	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	3b23      	subs	r3, #35	; 0x23
 8002192:	fa00 f203 	lsl.w	r2, r0, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	430a      	orrs	r2, r1
 800219c:	631a      	str	r2, [r3, #48]	; 0x30
 800219e:	e01b      	b.n	80021d8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685a      	ldr	r2, [r3, #4]
 80021aa:	4613      	mov	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	3b41      	subs	r3, #65	; 0x41
 80021b2:	221f      	movs	r2, #31
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	4019      	ands	r1, r3
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	6818      	ldr	r0, [r3, #0]
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	4613      	mov	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	3b41      	subs	r3, #65	; 0x41
 80021cc:	fa00 f203 	lsl.w	r2, r0, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2b09      	cmp	r3, #9
 80021de:	d91c      	bls.n	800221a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68d9      	ldr	r1, [r3, #12]
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	4613      	mov	r3, r2
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	4413      	add	r3, r2
 80021f0:	3b1e      	subs	r3, #30
 80021f2:	2207      	movs	r2, #7
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	4019      	ands	r1, r3
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	6898      	ldr	r0, [r3, #8]
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	4613      	mov	r3, r2
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	4413      	add	r3, r2
 800220a:	3b1e      	subs	r3, #30
 800220c:	fa00 f203 	lsl.w	r2, r0, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	430a      	orrs	r2, r1
 8002216:	60da      	str	r2, [r3, #12]
 8002218:	e019      	b.n	800224e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6919      	ldr	r1, [r3, #16]
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	4613      	mov	r3, r2
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	4413      	add	r3, r2
 800222a:	2207      	movs	r2, #7
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	43db      	mvns	r3, r3
 8002232:	4019      	ands	r1, r3
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	6898      	ldr	r0, [r3, #8]
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	4613      	mov	r3, r2
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	4413      	add	r3, r2
 8002242:	fa00 f203 	lsl.w	r2, r0, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	430a      	orrs	r2, r1
 800224c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2b10      	cmp	r3, #16
 8002254:	d003      	beq.n	800225e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800225a:	2b11      	cmp	r3, #17
 800225c:	d132      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a1d      	ldr	r2, [pc, #116]	; (80022d8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d125      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d126      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002284:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2b10      	cmp	r3, #16
 800228c:	d11a      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800228e:	4b13      	ldr	r3, [pc, #76]	; (80022dc <HAL_ADC_ConfigChannel+0x1e8>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a13      	ldr	r2, [pc, #76]	; (80022e0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002294:	fba2 2303 	umull	r2, r3, r2, r3
 8002298:	0c9a      	lsrs	r2, r3, #18
 800229a:	4613      	mov	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022a4:	e002      	b.n	80022ac <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	3b01      	subs	r3, #1
 80022aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f9      	bne.n	80022a6 <HAL_ADC_ConfigChannel+0x1b2>
 80022b2:	e007      	b.n	80022c4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b8:	f043 0220 	orr.w	r2, r3, #32
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80022cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3714      	adds	r7, #20
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr
 80022d8:	40012400 	.word	0x40012400
 80022dc:	20000000 	.word	0x20000000
 80022e0:	431bde83 	.word	0x431bde83

080022e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022ec:	2300      	movs	r3, #0
 80022ee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80022f0:	2300      	movs	r3, #0
 80022f2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d040      	beq.n	8002384 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f042 0201 	orr.w	r2, r2, #1
 8002310:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002312:	4b1f      	ldr	r3, [pc, #124]	; (8002390 <ADC_Enable+0xac>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a1f      	ldr	r2, [pc, #124]	; (8002394 <ADC_Enable+0xb0>)
 8002318:	fba2 2303 	umull	r2, r3, r2, r3
 800231c:	0c9b      	lsrs	r3, r3, #18
 800231e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002320:	e002      	b.n	8002328 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	3b01      	subs	r3, #1
 8002326:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f9      	bne.n	8002322 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800232e:	f7ff fc6b 	bl	8001c08 <HAL_GetTick>
 8002332:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002334:	e01f      	b.n	8002376 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002336:	f7ff fc67 	bl	8001c08 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d918      	bls.n	8002376 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	2b01      	cmp	r3, #1
 8002350:	d011      	beq.n	8002376 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002356:	f043 0210 	orr.w	r2, r3, #16
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002362:	f043 0201 	orr.w	r2, r3, #1
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e007      	b.n	8002386 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	2b01      	cmp	r3, #1
 8002382:	d1d8      	bne.n	8002336 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	20000000 	.word	0x20000000
 8002394:	431bde83 	.word	0x431bde83

08002398 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023a0:	2300      	movs	r3, #0
 80023a2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d12e      	bne.n	8002410 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	689a      	ldr	r2, [r3, #8]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 0201 	bic.w	r2, r2, #1
 80023c0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80023c2:	f7ff fc21 	bl	8001c08 <HAL_GetTick>
 80023c6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80023c8:	e01b      	b.n	8002402 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80023ca:	f7ff fc1d 	bl	8001c08 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d914      	bls.n	8002402 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d10d      	bne.n	8002402 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ea:	f043 0210 	orr.w	r2, r3, #16
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f6:	f043 0201 	orr.w	r2, r3, #1
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e007      	b.n	8002412 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b01      	cmp	r3, #1
 800240e:	d0dc      	beq.n	80023ca <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr

0800242c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800243c:	4b0c      	ldr	r3, [pc, #48]	; (8002470 <__NVIC_SetPriorityGrouping+0x44>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002442:	68ba      	ldr	r2, [r7, #8]
 8002444:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002448:	4013      	ands	r3, r2
 800244a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002454:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800245c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800245e:	4a04      	ldr	r2, [pc, #16]	; (8002470 <__NVIC_SetPriorityGrouping+0x44>)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	60d3      	str	r3, [r2, #12]
}
 8002464:	bf00      	nop
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	bc80      	pop	{r7}
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002478:	4b04      	ldr	r3, [pc, #16]	; (800248c <__NVIC_GetPriorityGrouping+0x18>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	0a1b      	lsrs	r3, r3, #8
 800247e:	f003 0307 	and.w	r3, r3, #7
}
 8002482:	4618      	mov	r0, r3
 8002484:	46bd      	mov	sp, r7
 8002486:	bc80      	pop	{r7}
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	e000ed00 	.word	0xe000ed00

08002490 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800249a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	db0b      	blt.n	80024ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	f003 021f 	and.w	r2, r3, #31
 80024a8:	4906      	ldr	r1, [pc, #24]	; (80024c4 <__NVIC_EnableIRQ+0x34>)
 80024aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ae:	095b      	lsrs	r3, r3, #5
 80024b0:	2001      	movs	r0, #1
 80024b2:	fa00 f202 	lsl.w	r2, r0, r2
 80024b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr
 80024c4:	e000e100 	.word	0xe000e100

080024c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	6039      	str	r1, [r7, #0]
 80024d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	db0a      	blt.n	80024f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	490c      	ldr	r1, [pc, #48]	; (8002514 <__NVIC_SetPriority+0x4c>)
 80024e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e6:	0112      	lsls	r2, r2, #4
 80024e8:	b2d2      	uxtb	r2, r2
 80024ea:	440b      	add	r3, r1
 80024ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024f0:	e00a      	b.n	8002508 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	4908      	ldr	r1, [pc, #32]	; (8002518 <__NVIC_SetPriority+0x50>)
 80024f8:	79fb      	ldrb	r3, [r7, #7]
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	3b04      	subs	r3, #4
 8002500:	0112      	lsls	r2, r2, #4
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	440b      	add	r3, r1
 8002506:	761a      	strb	r2, [r3, #24]
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	bc80      	pop	{r7}
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	e000e100 	.word	0xe000e100
 8002518:	e000ed00 	.word	0xe000ed00

0800251c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800251c:	b480      	push	{r7}
 800251e:	b089      	sub	sp, #36	; 0x24
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f1c3 0307 	rsb	r3, r3, #7
 8002536:	2b04      	cmp	r3, #4
 8002538:	bf28      	it	cs
 800253a:	2304      	movcs	r3, #4
 800253c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	3304      	adds	r3, #4
 8002542:	2b06      	cmp	r3, #6
 8002544:	d902      	bls.n	800254c <NVIC_EncodePriority+0x30>
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	3b03      	subs	r3, #3
 800254a:	e000      	b.n	800254e <NVIC_EncodePriority+0x32>
 800254c:	2300      	movs	r3, #0
 800254e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002550:	f04f 32ff 	mov.w	r2, #4294967295
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43da      	mvns	r2, r3
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	401a      	ands	r2, r3
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002564:	f04f 31ff 	mov.w	r1, #4294967295
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	fa01 f303 	lsl.w	r3, r1, r3
 800256e:	43d9      	mvns	r1, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002574:	4313      	orrs	r3, r2
         );
}
 8002576:	4618      	mov	r0, r3
 8002578:	3724      	adds	r7, #36	; 0x24
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr

08002580 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3b01      	subs	r3, #1
 800258c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002590:	d301      	bcc.n	8002596 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002592:	2301      	movs	r3, #1
 8002594:	e00f      	b.n	80025b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002596:	4a0a      	ldr	r2, [pc, #40]	; (80025c0 <SysTick_Config+0x40>)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3b01      	subs	r3, #1
 800259c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800259e:	210f      	movs	r1, #15
 80025a0:	f04f 30ff 	mov.w	r0, #4294967295
 80025a4:	f7ff ff90 	bl	80024c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025a8:	4b05      	ldr	r3, [pc, #20]	; (80025c0 <SysTick_Config+0x40>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ae:	4b04      	ldr	r3, [pc, #16]	; (80025c0 <SysTick_Config+0x40>)
 80025b0:	2207      	movs	r2, #7
 80025b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	e000e010 	.word	0xe000e010

080025c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f7ff ff2d 	bl	800242c <__NVIC_SetPriorityGrouping>
}
 80025d2:	bf00      	nop
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025da:	b580      	push	{r7, lr}
 80025dc:	b086      	sub	sp, #24
 80025de:	af00      	add	r7, sp, #0
 80025e0:	4603      	mov	r3, r0
 80025e2:	60b9      	str	r1, [r7, #8]
 80025e4:	607a      	str	r2, [r7, #4]
 80025e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025e8:	2300      	movs	r3, #0
 80025ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025ec:	f7ff ff42 	bl	8002474 <__NVIC_GetPriorityGrouping>
 80025f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	68b9      	ldr	r1, [r7, #8]
 80025f6:	6978      	ldr	r0, [r7, #20]
 80025f8:	f7ff ff90 	bl	800251c <NVIC_EncodePriority>
 80025fc:	4602      	mov	r2, r0
 80025fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002602:	4611      	mov	r1, r2
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff ff5f 	bl	80024c8 <__NVIC_SetPriority>
}
 800260a:	bf00      	nop
 800260c:	3718      	adds	r7, #24
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b082      	sub	sp, #8
 8002616:	af00      	add	r7, sp, #0
 8002618:	4603      	mov	r3, r0
 800261a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800261c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff ff35 	bl	8002490 <__NVIC_EnableIRQ>
}
 8002626:	bf00      	nop
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b082      	sub	sp, #8
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f7ff ffa2 	bl	8002580 <SysTick_Config>
 800263c:	4603      	mov	r3, r0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
	...

08002648 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002650:	2300      	movs	r3, #0
 8002652:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e043      	b.n	80026e6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	461a      	mov	r2, r3
 8002664:	4b22      	ldr	r3, [pc, #136]	; (80026f0 <HAL_DMA_Init+0xa8>)
 8002666:	4413      	add	r3, r2
 8002668:	4a22      	ldr	r2, [pc, #136]	; (80026f4 <HAL_DMA_Init+0xac>)
 800266a:	fba2 2303 	umull	r2, r3, r2, r3
 800266e:	091b      	lsrs	r3, r3, #4
 8002670:	009a      	lsls	r2, r3, #2
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a1f      	ldr	r2, [pc, #124]	; (80026f8 <HAL_DMA_Init+0xb0>)
 800267a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2202      	movs	r2, #2
 8002680:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002692:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002696:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80026a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3714      	adds	r7, #20
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr
 80026f0:	bffdfff8 	.word	0xbffdfff8
 80026f4:	cccccccd 	.word	0xcccccccd
 80026f8:	40020000 	.word	0x40020000

080026fc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
 8002708:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800270a:	2300      	movs	r3, #0
 800270c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d101      	bne.n	800271c <HAL_DMA_Start_IT+0x20>
 8002718:	2302      	movs	r3, #2
 800271a:	e04b      	b.n	80027b4 <HAL_DMA_Start_IT+0xb8>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b01      	cmp	r3, #1
 800272e:	d13a      	bne.n	80027a6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2202      	movs	r2, #2
 8002734:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 0201 	bic.w	r2, r2, #1
 800274c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	68b9      	ldr	r1, [r7, #8]
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f000 f9eb 	bl	8002b30 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275e:	2b00      	cmp	r3, #0
 8002760:	d008      	beq.n	8002774 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f042 020e 	orr.w	r2, r2, #14
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	e00f      	b.n	8002794 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f022 0204 	bic.w	r2, r2, #4
 8002782:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f042 020a 	orr.w	r2, r2, #10
 8002792:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f042 0201 	orr.w	r2, r2, #1
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	e005      	b.n	80027b2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80027ae:	2302      	movs	r3, #2
 80027b0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80027b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027c4:	2300      	movs	r3, #0
 80027c6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d008      	beq.n	80027e6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2204      	movs	r2, #4
 80027d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e020      	b.n	8002828 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 020e 	bic.w	r2, r2, #14
 80027f4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 0201 	bic.w	r2, r2, #1
 8002804:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800280e:	2101      	movs	r1, #1
 8002810:	fa01 f202 	lsl.w	r2, r1, r2
 8002814:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002826:	7bfb      	ldrb	r3, [r7, #15]
}
 8002828:	4618      	mov	r0, r3
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	bc80      	pop	{r7}
 8002830:	4770      	bx	lr
	...

08002834 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800283c:	2300      	movs	r3, #0
 800283e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d005      	beq.n	8002858 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2204      	movs	r2, #4
 8002850:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	73fb      	strb	r3, [r7, #15]
 8002856:	e051      	b.n	80028fc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 020e 	bic.w	r2, r2, #14
 8002866:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 0201 	bic.w	r2, r2, #1
 8002876:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a22      	ldr	r2, [pc, #136]	; (8002908 <HAL_DMA_Abort_IT+0xd4>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d029      	beq.n	80028d6 <HAL_DMA_Abort_IT+0xa2>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a21      	ldr	r2, [pc, #132]	; (800290c <HAL_DMA_Abort_IT+0xd8>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d022      	beq.n	80028d2 <HAL_DMA_Abort_IT+0x9e>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a1f      	ldr	r2, [pc, #124]	; (8002910 <HAL_DMA_Abort_IT+0xdc>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d01a      	beq.n	80028cc <HAL_DMA_Abort_IT+0x98>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a1e      	ldr	r2, [pc, #120]	; (8002914 <HAL_DMA_Abort_IT+0xe0>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d012      	beq.n	80028c6 <HAL_DMA_Abort_IT+0x92>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a1c      	ldr	r2, [pc, #112]	; (8002918 <HAL_DMA_Abort_IT+0xe4>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d00a      	beq.n	80028c0 <HAL_DMA_Abort_IT+0x8c>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a1b      	ldr	r2, [pc, #108]	; (800291c <HAL_DMA_Abort_IT+0xe8>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d102      	bne.n	80028ba <HAL_DMA_Abort_IT+0x86>
 80028b4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80028b8:	e00e      	b.n	80028d8 <HAL_DMA_Abort_IT+0xa4>
 80028ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028be:	e00b      	b.n	80028d8 <HAL_DMA_Abort_IT+0xa4>
 80028c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028c4:	e008      	b.n	80028d8 <HAL_DMA_Abort_IT+0xa4>
 80028c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028ca:	e005      	b.n	80028d8 <HAL_DMA_Abort_IT+0xa4>
 80028cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028d0:	e002      	b.n	80028d8 <HAL_DMA_Abort_IT+0xa4>
 80028d2:	2310      	movs	r3, #16
 80028d4:	e000      	b.n	80028d8 <HAL_DMA_Abort_IT+0xa4>
 80028d6:	2301      	movs	r3, #1
 80028d8:	4a11      	ldr	r2, [pc, #68]	; (8002920 <HAL_DMA_Abort_IT+0xec>)
 80028da:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d003      	beq.n	80028fc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	4798      	blx	r3
    } 
  }
  return status;
 80028fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	40020008 	.word	0x40020008
 800290c:	4002001c 	.word	0x4002001c
 8002910:	40020030 	.word	0x40020030
 8002914:	40020044 	.word	0x40020044
 8002918:	40020058 	.word	0x40020058
 800291c:	4002006c 	.word	0x4002006c
 8002920:	40020000 	.word	0x40020000

08002924 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002940:	2204      	movs	r2, #4
 8002942:	409a      	lsls	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	4013      	ands	r3, r2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d04f      	beq.n	80029ec <HAL_DMA_IRQHandler+0xc8>
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	f003 0304 	and.w	r3, r3, #4
 8002952:	2b00      	cmp	r3, #0
 8002954:	d04a      	beq.n	80029ec <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0320 	and.w	r3, r3, #32
 8002960:	2b00      	cmp	r3, #0
 8002962:	d107      	bne.n	8002974 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 0204 	bic.w	r2, r2, #4
 8002972:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a66      	ldr	r2, [pc, #408]	; (8002b14 <HAL_DMA_IRQHandler+0x1f0>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d029      	beq.n	80029d2 <HAL_DMA_IRQHandler+0xae>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a65      	ldr	r2, [pc, #404]	; (8002b18 <HAL_DMA_IRQHandler+0x1f4>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d022      	beq.n	80029ce <HAL_DMA_IRQHandler+0xaa>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a63      	ldr	r2, [pc, #396]	; (8002b1c <HAL_DMA_IRQHandler+0x1f8>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d01a      	beq.n	80029c8 <HAL_DMA_IRQHandler+0xa4>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a62      	ldr	r2, [pc, #392]	; (8002b20 <HAL_DMA_IRQHandler+0x1fc>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d012      	beq.n	80029c2 <HAL_DMA_IRQHandler+0x9e>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a60      	ldr	r2, [pc, #384]	; (8002b24 <HAL_DMA_IRQHandler+0x200>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d00a      	beq.n	80029bc <HAL_DMA_IRQHandler+0x98>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a5f      	ldr	r2, [pc, #380]	; (8002b28 <HAL_DMA_IRQHandler+0x204>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d102      	bne.n	80029b6 <HAL_DMA_IRQHandler+0x92>
 80029b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80029b4:	e00e      	b.n	80029d4 <HAL_DMA_IRQHandler+0xb0>
 80029b6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80029ba:	e00b      	b.n	80029d4 <HAL_DMA_IRQHandler+0xb0>
 80029bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80029c0:	e008      	b.n	80029d4 <HAL_DMA_IRQHandler+0xb0>
 80029c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029c6:	e005      	b.n	80029d4 <HAL_DMA_IRQHandler+0xb0>
 80029c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029cc:	e002      	b.n	80029d4 <HAL_DMA_IRQHandler+0xb0>
 80029ce:	2340      	movs	r3, #64	; 0x40
 80029d0:	e000      	b.n	80029d4 <HAL_DMA_IRQHandler+0xb0>
 80029d2:	2304      	movs	r3, #4
 80029d4:	4a55      	ldr	r2, [pc, #340]	; (8002b2c <HAL_DMA_IRQHandler+0x208>)
 80029d6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f000 8094 	beq.w	8002b0a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80029ea:	e08e      	b.n	8002b0a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f0:	2202      	movs	r2, #2
 80029f2:	409a      	lsls	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	4013      	ands	r3, r2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d056      	beq.n	8002aaa <HAL_DMA_IRQHandler+0x186>
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d051      	beq.n	8002aaa <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0320 	and.w	r3, r3, #32
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10b      	bne.n	8002a2c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 020a 	bic.w	r2, r2, #10
 8002a22:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a38      	ldr	r2, [pc, #224]	; (8002b14 <HAL_DMA_IRQHandler+0x1f0>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d029      	beq.n	8002a8a <HAL_DMA_IRQHandler+0x166>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a37      	ldr	r2, [pc, #220]	; (8002b18 <HAL_DMA_IRQHandler+0x1f4>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d022      	beq.n	8002a86 <HAL_DMA_IRQHandler+0x162>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a35      	ldr	r2, [pc, #212]	; (8002b1c <HAL_DMA_IRQHandler+0x1f8>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d01a      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x15c>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a34      	ldr	r2, [pc, #208]	; (8002b20 <HAL_DMA_IRQHandler+0x1fc>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d012      	beq.n	8002a7a <HAL_DMA_IRQHandler+0x156>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a32      	ldr	r2, [pc, #200]	; (8002b24 <HAL_DMA_IRQHandler+0x200>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d00a      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x150>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a31      	ldr	r2, [pc, #196]	; (8002b28 <HAL_DMA_IRQHandler+0x204>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d102      	bne.n	8002a6e <HAL_DMA_IRQHandler+0x14a>
 8002a68:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a6c:	e00e      	b.n	8002a8c <HAL_DMA_IRQHandler+0x168>
 8002a6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a72:	e00b      	b.n	8002a8c <HAL_DMA_IRQHandler+0x168>
 8002a74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a78:	e008      	b.n	8002a8c <HAL_DMA_IRQHandler+0x168>
 8002a7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a7e:	e005      	b.n	8002a8c <HAL_DMA_IRQHandler+0x168>
 8002a80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a84:	e002      	b.n	8002a8c <HAL_DMA_IRQHandler+0x168>
 8002a86:	2320      	movs	r3, #32
 8002a88:	e000      	b.n	8002a8c <HAL_DMA_IRQHandler+0x168>
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	4a27      	ldr	r2, [pc, #156]	; (8002b2c <HAL_DMA_IRQHandler+0x208>)
 8002a8e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d034      	beq.n	8002b0a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002aa8:	e02f      	b.n	8002b0a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	2208      	movs	r2, #8
 8002ab0:	409a      	lsls	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d028      	beq.n	8002b0c <HAL_DMA_IRQHandler+0x1e8>
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	f003 0308 	and.w	r3, r3, #8
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d023      	beq.n	8002b0c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 020e 	bic.w	r2, r2, #14
 8002ad2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002adc:	2101      	movs	r1, #1
 8002ade:	fa01 f202 	lsl.w	r2, r1, r2
 8002ae2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d004      	beq.n	8002b0c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	4798      	blx	r3
    }
  }
  return;
 8002b0a:	bf00      	nop
 8002b0c:	bf00      	nop
}
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40020008 	.word	0x40020008
 8002b18:	4002001c 	.word	0x4002001c
 8002b1c:	40020030 	.word	0x40020030
 8002b20:	40020044 	.word	0x40020044
 8002b24:	40020058 	.word	0x40020058
 8002b28:	4002006c 	.word	0x4002006c
 8002b2c:	40020000 	.word	0x40020000

08002b30 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
 8002b3c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b46:	2101      	movs	r1, #1
 8002b48:	fa01 f202 	lsl.w	r2, r1, r2
 8002b4c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2b10      	cmp	r3, #16
 8002b5c:	d108      	bne.n	8002b70 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68ba      	ldr	r2, [r7, #8]
 8002b6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b6e:	e007      	b.n	8002b80 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	60da      	str	r2, [r3, #12]
}
 8002b80:	bf00      	nop
 8002b82:	3714      	adds	r7, #20
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bc80      	pop	{r7}
 8002b88:	4770      	bx	lr
	...

08002b8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b08b      	sub	sp, #44	; 0x2c
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b96:	2300      	movs	r3, #0
 8002b98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b9e:	e169      	b.n	8002e74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	69fa      	ldr	r2, [r7, #28]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	f040 8158 	bne.w	8002e6e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	4a9a      	ldr	r2, [pc, #616]	; (8002e2c <HAL_GPIO_Init+0x2a0>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d05e      	beq.n	8002c86 <HAL_GPIO_Init+0xfa>
 8002bc8:	4a98      	ldr	r2, [pc, #608]	; (8002e2c <HAL_GPIO_Init+0x2a0>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d875      	bhi.n	8002cba <HAL_GPIO_Init+0x12e>
 8002bce:	4a98      	ldr	r2, [pc, #608]	; (8002e30 <HAL_GPIO_Init+0x2a4>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d058      	beq.n	8002c86 <HAL_GPIO_Init+0xfa>
 8002bd4:	4a96      	ldr	r2, [pc, #600]	; (8002e30 <HAL_GPIO_Init+0x2a4>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d86f      	bhi.n	8002cba <HAL_GPIO_Init+0x12e>
 8002bda:	4a96      	ldr	r2, [pc, #600]	; (8002e34 <HAL_GPIO_Init+0x2a8>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d052      	beq.n	8002c86 <HAL_GPIO_Init+0xfa>
 8002be0:	4a94      	ldr	r2, [pc, #592]	; (8002e34 <HAL_GPIO_Init+0x2a8>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d869      	bhi.n	8002cba <HAL_GPIO_Init+0x12e>
 8002be6:	4a94      	ldr	r2, [pc, #592]	; (8002e38 <HAL_GPIO_Init+0x2ac>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d04c      	beq.n	8002c86 <HAL_GPIO_Init+0xfa>
 8002bec:	4a92      	ldr	r2, [pc, #584]	; (8002e38 <HAL_GPIO_Init+0x2ac>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d863      	bhi.n	8002cba <HAL_GPIO_Init+0x12e>
 8002bf2:	4a92      	ldr	r2, [pc, #584]	; (8002e3c <HAL_GPIO_Init+0x2b0>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d046      	beq.n	8002c86 <HAL_GPIO_Init+0xfa>
 8002bf8:	4a90      	ldr	r2, [pc, #576]	; (8002e3c <HAL_GPIO_Init+0x2b0>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d85d      	bhi.n	8002cba <HAL_GPIO_Init+0x12e>
 8002bfe:	2b12      	cmp	r3, #18
 8002c00:	d82a      	bhi.n	8002c58 <HAL_GPIO_Init+0xcc>
 8002c02:	2b12      	cmp	r3, #18
 8002c04:	d859      	bhi.n	8002cba <HAL_GPIO_Init+0x12e>
 8002c06:	a201      	add	r2, pc, #4	; (adr r2, 8002c0c <HAL_GPIO_Init+0x80>)
 8002c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c0c:	08002c87 	.word	0x08002c87
 8002c10:	08002c61 	.word	0x08002c61
 8002c14:	08002c73 	.word	0x08002c73
 8002c18:	08002cb5 	.word	0x08002cb5
 8002c1c:	08002cbb 	.word	0x08002cbb
 8002c20:	08002cbb 	.word	0x08002cbb
 8002c24:	08002cbb 	.word	0x08002cbb
 8002c28:	08002cbb 	.word	0x08002cbb
 8002c2c:	08002cbb 	.word	0x08002cbb
 8002c30:	08002cbb 	.word	0x08002cbb
 8002c34:	08002cbb 	.word	0x08002cbb
 8002c38:	08002cbb 	.word	0x08002cbb
 8002c3c:	08002cbb 	.word	0x08002cbb
 8002c40:	08002cbb 	.word	0x08002cbb
 8002c44:	08002cbb 	.word	0x08002cbb
 8002c48:	08002cbb 	.word	0x08002cbb
 8002c4c:	08002cbb 	.word	0x08002cbb
 8002c50:	08002c69 	.word	0x08002c69
 8002c54:	08002c7d 	.word	0x08002c7d
 8002c58:	4a79      	ldr	r2, [pc, #484]	; (8002e40 <HAL_GPIO_Init+0x2b4>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d013      	beq.n	8002c86 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c5e:	e02c      	b.n	8002cba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	623b      	str	r3, [r7, #32]
          break;
 8002c66:	e029      	b.n	8002cbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	623b      	str	r3, [r7, #32]
          break;
 8002c70:	e024      	b.n	8002cbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	3308      	adds	r3, #8
 8002c78:	623b      	str	r3, [r7, #32]
          break;
 8002c7a:	e01f      	b.n	8002cbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	330c      	adds	r3, #12
 8002c82:	623b      	str	r3, [r7, #32]
          break;
 8002c84:	e01a      	b.n	8002cbc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d102      	bne.n	8002c94 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c8e:	2304      	movs	r3, #4
 8002c90:	623b      	str	r3, [r7, #32]
          break;
 8002c92:	e013      	b.n	8002cbc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d105      	bne.n	8002ca8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c9c:	2308      	movs	r3, #8
 8002c9e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	69fa      	ldr	r2, [r7, #28]
 8002ca4:	611a      	str	r2, [r3, #16]
          break;
 8002ca6:	e009      	b.n	8002cbc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ca8:	2308      	movs	r3, #8
 8002caa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	69fa      	ldr	r2, [r7, #28]
 8002cb0:	615a      	str	r2, [r3, #20]
          break;
 8002cb2:	e003      	b.n	8002cbc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	623b      	str	r3, [r7, #32]
          break;
 8002cb8:	e000      	b.n	8002cbc <HAL_GPIO_Init+0x130>
          break;
 8002cba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	2bff      	cmp	r3, #255	; 0xff
 8002cc0:	d801      	bhi.n	8002cc6 <HAL_GPIO_Init+0x13a>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	e001      	b.n	8002cca <HAL_GPIO_Init+0x13e>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	3304      	adds	r3, #4
 8002cca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	2bff      	cmp	r3, #255	; 0xff
 8002cd0:	d802      	bhi.n	8002cd8 <HAL_GPIO_Init+0x14c>
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	e002      	b.n	8002cde <HAL_GPIO_Init+0x152>
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cda:	3b08      	subs	r3, #8
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	210f      	movs	r1, #15
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cec:	43db      	mvns	r3, r3
 8002cee:	401a      	ands	r2, r3
 8002cf0:	6a39      	ldr	r1, [r7, #32]
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 80b1 	beq.w	8002e6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d0c:	4b4d      	ldr	r3, [pc, #308]	; (8002e44 <HAL_GPIO_Init+0x2b8>)
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	4a4c      	ldr	r2, [pc, #304]	; (8002e44 <HAL_GPIO_Init+0x2b8>)
 8002d12:	f043 0301 	orr.w	r3, r3, #1
 8002d16:	6193      	str	r3, [r2, #24]
 8002d18:	4b4a      	ldr	r3, [pc, #296]	; (8002e44 <HAL_GPIO_Init+0x2b8>)
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	60bb      	str	r3, [r7, #8]
 8002d22:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d24:	4a48      	ldr	r2, [pc, #288]	; (8002e48 <HAL_GPIO_Init+0x2bc>)
 8002d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d28:	089b      	lsrs	r3, r3, #2
 8002d2a:	3302      	adds	r3, #2
 8002d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d30:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	f003 0303 	and.w	r3, r3, #3
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	220f      	movs	r2, #15
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	43db      	mvns	r3, r3
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	4013      	ands	r3, r2
 8002d46:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a40      	ldr	r2, [pc, #256]	; (8002e4c <HAL_GPIO_Init+0x2c0>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d013      	beq.n	8002d78 <HAL_GPIO_Init+0x1ec>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a3f      	ldr	r2, [pc, #252]	; (8002e50 <HAL_GPIO_Init+0x2c4>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d00d      	beq.n	8002d74 <HAL_GPIO_Init+0x1e8>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a3e      	ldr	r2, [pc, #248]	; (8002e54 <HAL_GPIO_Init+0x2c8>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d007      	beq.n	8002d70 <HAL_GPIO_Init+0x1e4>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a3d      	ldr	r2, [pc, #244]	; (8002e58 <HAL_GPIO_Init+0x2cc>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d101      	bne.n	8002d6c <HAL_GPIO_Init+0x1e0>
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e006      	b.n	8002d7a <HAL_GPIO_Init+0x1ee>
 8002d6c:	2304      	movs	r3, #4
 8002d6e:	e004      	b.n	8002d7a <HAL_GPIO_Init+0x1ee>
 8002d70:	2302      	movs	r3, #2
 8002d72:	e002      	b.n	8002d7a <HAL_GPIO_Init+0x1ee>
 8002d74:	2301      	movs	r3, #1
 8002d76:	e000      	b.n	8002d7a <HAL_GPIO_Init+0x1ee>
 8002d78:	2300      	movs	r3, #0
 8002d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d7c:	f002 0203 	and.w	r2, r2, #3
 8002d80:	0092      	lsls	r2, r2, #2
 8002d82:	4093      	lsls	r3, r2
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d8a:	492f      	ldr	r1, [pc, #188]	; (8002e48 <HAL_GPIO_Init+0x2bc>)
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8e:	089b      	lsrs	r3, r3, #2
 8002d90:	3302      	adds	r3, #2
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d006      	beq.n	8002db2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002da4:	4b2d      	ldr	r3, [pc, #180]	; (8002e5c <HAL_GPIO_Init+0x2d0>)
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	492c      	ldr	r1, [pc, #176]	; (8002e5c <HAL_GPIO_Init+0x2d0>)
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	608b      	str	r3, [r1, #8]
 8002db0:	e006      	b.n	8002dc0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002db2:	4b2a      	ldr	r3, [pc, #168]	; (8002e5c <HAL_GPIO_Init+0x2d0>)
 8002db4:	689a      	ldr	r2, [r3, #8]
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	43db      	mvns	r3, r3
 8002dba:	4928      	ldr	r1, [pc, #160]	; (8002e5c <HAL_GPIO_Init+0x2d0>)
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d006      	beq.n	8002dda <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002dcc:	4b23      	ldr	r3, [pc, #140]	; (8002e5c <HAL_GPIO_Init+0x2d0>)
 8002dce:	68da      	ldr	r2, [r3, #12]
 8002dd0:	4922      	ldr	r1, [pc, #136]	; (8002e5c <HAL_GPIO_Init+0x2d0>)
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	60cb      	str	r3, [r1, #12]
 8002dd8:	e006      	b.n	8002de8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002dda:	4b20      	ldr	r3, [pc, #128]	; (8002e5c <HAL_GPIO_Init+0x2d0>)
 8002ddc:	68da      	ldr	r2, [r3, #12]
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	43db      	mvns	r3, r3
 8002de2:	491e      	ldr	r1, [pc, #120]	; (8002e5c <HAL_GPIO_Init+0x2d0>)
 8002de4:	4013      	ands	r3, r2
 8002de6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d006      	beq.n	8002e02 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002df4:	4b19      	ldr	r3, [pc, #100]	; (8002e5c <HAL_GPIO_Init+0x2d0>)
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	4918      	ldr	r1, [pc, #96]	; (8002e5c <HAL_GPIO_Init+0x2d0>)
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	604b      	str	r3, [r1, #4]
 8002e00:	e006      	b.n	8002e10 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e02:	4b16      	ldr	r3, [pc, #88]	; (8002e5c <HAL_GPIO_Init+0x2d0>)
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	4914      	ldr	r1, [pc, #80]	; (8002e5c <HAL_GPIO_Init+0x2d0>)
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d021      	beq.n	8002e60 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002e1c:	4b0f      	ldr	r3, [pc, #60]	; (8002e5c <HAL_GPIO_Init+0x2d0>)
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	490e      	ldr	r1, [pc, #56]	; (8002e5c <HAL_GPIO_Init+0x2d0>)
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	600b      	str	r3, [r1, #0]
 8002e28:	e021      	b.n	8002e6e <HAL_GPIO_Init+0x2e2>
 8002e2a:	bf00      	nop
 8002e2c:	10320000 	.word	0x10320000
 8002e30:	10310000 	.word	0x10310000
 8002e34:	10220000 	.word	0x10220000
 8002e38:	10210000 	.word	0x10210000
 8002e3c:	10120000 	.word	0x10120000
 8002e40:	10110000 	.word	0x10110000
 8002e44:	40021000 	.word	0x40021000
 8002e48:	40010000 	.word	0x40010000
 8002e4c:	40010800 	.word	0x40010800
 8002e50:	40010c00 	.word	0x40010c00
 8002e54:	40011000 	.word	0x40011000
 8002e58:	40011400 	.word	0x40011400
 8002e5c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e60:	4b0b      	ldr	r3, [pc, #44]	; (8002e90 <HAL_GPIO_Init+0x304>)
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	43db      	mvns	r3, r3
 8002e68:	4909      	ldr	r1, [pc, #36]	; (8002e90 <HAL_GPIO_Init+0x304>)
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	3301      	adds	r3, #1
 8002e72:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f47f ae8e 	bne.w	8002ba0 <HAL_GPIO_Init+0x14>
  }
}
 8002e84:	bf00      	nop
 8002e86:	bf00      	nop
 8002e88:	372c      	adds	r7, #44	; 0x2c
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bc80      	pop	{r7}
 8002e8e:	4770      	bx	lr
 8002e90:	40010400 	.word	0x40010400

08002e94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e272      	b.n	800338c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f000 8087 	beq.w	8002fc2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002eb4:	4b92      	ldr	r3, [pc, #584]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f003 030c 	and.w	r3, r3, #12
 8002ebc:	2b04      	cmp	r3, #4
 8002ebe:	d00c      	beq.n	8002eda <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ec0:	4b8f      	ldr	r3, [pc, #572]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f003 030c 	and.w	r3, r3, #12
 8002ec8:	2b08      	cmp	r3, #8
 8002eca:	d112      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x5e>
 8002ecc:	4b8c      	ldr	r3, [pc, #560]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ed8:	d10b      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eda:	4b89      	ldr	r3, [pc, #548]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d06c      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x12c>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d168      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e24c      	b.n	800338c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002efa:	d106      	bne.n	8002f0a <HAL_RCC_OscConfig+0x76>
 8002efc:	4b80      	ldr	r3, [pc, #512]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a7f      	ldr	r2, [pc, #508]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 8002f02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f06:	6013      	str	r3, [r2, #0]
 8002f08:	e02e      	b.n	8002f68 <HAL_RCC_OscConfig+0xd4>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10c      	bne.n	8002f2c <HAL_RCC_OscConfig+0x98>
 8002f12:	4b7b      	ldr	r3, [pc, #492]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a7a      	ldr	r2, [pc, #488]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 8002f18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f1c:	6013      	str	r3, [r2, #0]
 8002f1e:	4b78      	ldr	r3, [pc, #480]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a77      	ldr	r2, [pc, #476]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 8002f24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f28:	6013      	str	r3, [r2, #0]
 8002f2a:	e01d      	b.n	8002f68 <HAL_RCC_OscConfig+0xd4>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f34:	d10c      	bne.n	8002f50 <HAL_RCC_OscConfig+0xbc>
 8002f36:	4b72      	ldr	r3, [pc, #456]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a71      	ldr	r2, [pc, #452]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 8002f3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	4b6f      	ldr	r3, [pc, #444]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a6e      	ldr	r2, [pc, #440]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 8002f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f4c:	6013      	str	r3, [r2, #0]
 8002f4e:	e00b      	b.n	8002f68 <HAL_RCC_OscConfig+0xd4>
 8002f50:	4b6b      	ldr	r3, [pc, #428]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a6a      	ldr	r2, [pc, #424]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 8002f56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f5a:	6013      	str	r3, [r2, #0]
 8002f5c:	4b68      	ldr	r3, [pc, #416]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a67      	ldr	r2, [pc, #412]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 8002f62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d013      	beq.n	8002f98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f70:	f7fe fe4a 	bl	8001c08 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f78:	f7fe fe46 	bl	8001c08 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b64      	cmp	r3, #100	; 0x64
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e200      	b.n	800338c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f8a:	4b5d      	ldr	r3, [pc, #372]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d0f0      	beq.n	8002f78 <HAL_RCC_OscConfig+0xe4>
 8002f96:	e014      	b.n	8002fc2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f98:	f7fe fe36 	bl	8001c08 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fa0:	f7fe fe32 	bl	8001c08 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b64      	cmp	r3, #100	; 0x64
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e1ec      	b.n	800338c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fb2:	4b53      	ldr	r3, [pc, #332]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f0      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x10c>
 8002fbe:	e000      	b.n	8002fc2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d063      	beq.n	8003096 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fce:	4b4c      	ldr	r3, [pc, #304]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f003 030c 	and.w	r3, r3, #12
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00b      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002fda:	4b49      	ldr	r3, [pc, #292]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f003 030c 	and.w	r3, r3, #12
 8002fe2:	2b08      	cmp	r3, #8
 8002fe4:	d11c      	bne.n	8003020 <HAL_RCC_OscConfig+0x18c>
 8002fe6:	4b46      	ldr	r3, [pc, #280]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d116      	bne.n	8003020 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ff2:	4b43      	ldr	r3, [pc, #268]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d005      	beq.n	800300a <HAL_RCC_OscConfig+0x176>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d001      	beq.n	800300a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e1c0      	b.n	800338c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800300a:	4b3d      	ldr	r3, [pc, #244]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	4939      	ldr	r1, [pc, #228]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 800301a:	4313      	orrs	r3, r2
 800301c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800301e:	e03a      	b.n	8003096 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d020      	beq.n	800306a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003028:	4b36      	ldr	r3, [pc, #216]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 800302a:	2201      	movs	r2, #1
 800302c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800302e:	f7fe fdeb 	bl	8001c08 <HAL_GetTick>
 8003032:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003034:	e008      	b.n	8003048 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003036:	f7fe fde7 	bl	8001c08 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d901      	bls.n	8003048 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e1a1      	b.n	800338c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003048:	4b2d      	ldr	r3, [pc, #180]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d0f0      	beq.n	8003036 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003054:	4b2a      	ldr	r3, [pc, #168]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	4927      	ldr	r1, [pc, #156]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 8003064:	4313      	orrs	r3, r2
 8003066:	600b      	str	r3, [r1, #0]
 8003068:	e015      	b.n	8003096 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800306a:	4b26      	ldr	r3, [pc, #152]	; (8003104 <HAL_RCC_OscConfig+0x270>)
 800306c:	2200      	movs	r2, #0
 800306e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003070:	f7fe fdca 	bl	8001c08 <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003078:	f7fe fdc6 	bl	8001c08 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e180      	b.n	800338c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800308a:	4b1d      	ldr	r3, [pc, #116]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1f0      	bne.n	8003078 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0308 	and.w	r3, r3, #8
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d03a      	beq.n	8003118 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d019      	beq.n	80030de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030aa:	4b17      	ldr	r3, [pc, #92]	; (8003108 <HAL_RCC_OscConfig+0x274>)
 80030ac:	2201      	movs	r2, #1
 80030ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b0:	f7fe fdaa 	bl	8001c08 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030b8:	f7fe fda6 	bl	8001c08 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e160      	b.n	800338c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ca:	4b0d      	ldr	r3, [pc, #52]	; (8003100 <HAL_RCC_OscConfig+0x26c>)
 80030cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d0f0      	beq.n	80030b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80030d6:	2001      	movs	r0, #1
 80030d8:	f000 face 	bl	8003678 <RCC_Delay>
 80030dc:	e01c      	b.n	8003118 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030de:	4b0a      	ldr	r3, [pc, #40]	; (8003108 <HAL_RCC_OscConfig+0x274>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030e4:	f7fe fd90 	bl	8001c08 <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ea:	e00f      	b.n	800310c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030ec:	f7fe fd8c 	bl	8001c08 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d908      	bls.n	800310c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e146      	b.n	800338c <HAL_RCC_OscConfig+0x4f8>
 80030fe:	bf00      	nop
 8003100:	40021000 	.word	0x40021000
 8003104:	42420000 	.word	0x42420000
 8003108:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800310c:	4b92      	ldr	r3, [pc, #584]	; (8003358 <HAL_RCC_OscConfig+0x4c4>)
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1e9      	bne.n	80030ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 80a6 	beq.w	8003272 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003126:	2300      	movs	r3, #0
 8003128:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800312a:	4b8b      	ldr	r3, [pc, #556]	; (8003358 <HAL_RCC_OscConfig+0x4c4>)
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10d      	bne.n	8003152 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003136:	4b88      	ldr	r3, [pc, #544]	; (8003358 <HAL_RCC_OscConfig+0x4c4>)
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	4a87      	ldr	r2, [pc, #540]	; (8003358 <HAL_RCC_OscConfig+0x4c4>)
 800313c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003140:	61d3      	str	r3, [r2, #28]
 8003142:	4b85      	ldr	r3, [pc, #532]	; (8003358 <HAL_RCC_OscConfig+0x4c4>)
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800314a:	60bb      	str	r3, [r7, #8]
 800314c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800314e:	2301      	movs	r3, #1
 8003150:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003152:	4b82      	ldr	r3, [pc, #520]	; (800335c <HAL_RCC_OscConfig+0x4c8>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315a:	2b00      	cmp	r3, #0
 800315c:	d118      	bne.n	8003190 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800315e:	4b7f      	ldr	r3, [pc, #508]	; (800335c <HAL_RCC_OscConfig+0x4c8>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a7e      	ldr	r2, [pc, #504]	; (800335c <HAL_RCC_OscConfig+0x4c8>)
 8003164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003168:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800316a:	f7fe fd4d 	bl	8001c08 <HAL_GetTick>
 800316e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003170:	e008      	b.n	8003184 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003172:	f7fe fd49 	bl	8001c08 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b64      	cmp	r3, #100	; 0x64
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e103      	b.n	800338c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003184:	4b75      	ldr	r3, [pc, #468]	; (800335c <HAL_RCC_OscConfig+0x4c8>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0f0      	beq.n	8003172 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d106      	bne.n	80031a6 <HAL_RCC_OscConfig+0x312>
 8003198:	4b6f      	ldr	r3, [pc, #444]	; (8003358 <HAL_RCC_OscConfig+0x4c4>)
 800319a:	6a1b      	ldr	r3, [r3, #32]
 800319c:	4a6e      	ldr	r2, [pc, #440]	; (8003358 <HAL_RCC_OscConfig+0x4c4>)
 800319e:	f043 0301 	orr.w	r3, r3, #1
 80031a2:	6213      	str	r3, [r2, #32]
 80031a4:	e02d      	b.n	8003202 <HAL_RCC_OscConfig+0x36e>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10c      	bne.n	80031c8 <HAL_RCC_OscConfig+0x334>
 80031ae:	4b6a      	ldr	r3, [pc, #424]	; (8003358 <HAL_RCC_OscConfig+0x4c4>)
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	4a69      	ldr	r2, [pc, #420]	; (8003358 <HAL_RCC_OscConfig+0x4c4>)
 80031b4:	f023 0301 	bic.w	r3, r3, #1
 80031b8:	6213      	str	r3, [r2, #32]
 80031ba:	4b67      	ldr	r3, [pc, #412]	; (8003358 <HAL_RCC_OscConfig+0x4c4>)
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	4a66      	ldr	r2, [pc, #408]	; (8003358 <HAL_RCC_OscConfig+0x4c4>)
 80031c0:	f023 0304 	bic.w	r3, r3, #4
 80031c4:	6213      	str	r3, [r2, #32]
 80031c6:	e01c      	b.n	8003202 <HAL_RCC_OscConfig+0x36e>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	2b05      	cmp	r3, #5
 80031ce:	d10c      	bne.n	80031ea <HAL_RCC_OscConfig+0x356>
 80031d0:	4b61      	ldr	r3, [pc, #388]	; (8003358 <HAL_RCC_OscConfig+0x4c4>)
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	4a60      	ldr	r2, [pc, #384]	; (8003358 <HAL_RCC_OscConfig+0x4c4>)
 80031d6:	f043 0304 	orr.w	r3, r3, #4
 80031da:	6213      	str	r3, [r2, #32]
 80031dc:	4b5e      	ldr	r3, [pc, #376]	; (8003358 <HAL_RCC_OscConfig+0x4c4>)
 80031de:	6a1b      	ldr	r3, [r3, #32]
 80031e0:	4a5d      	ldr	r2, [pc, #372]	; (8003358 <HAL_RCC_OscConfig+0x4c4>)
 80031e2:	f043 0301 	orr.w	r3, r3, #1
 80031e6:	6213      	str	r3, [r2, #32]
 80031e8:	e00b      	b.n	8003202 <HAL_RCC_OscConfig+0x36e>
 80031ea:	4b5b      	ldr	r3, [pc, #364]	; (8003358 <HAL_RCC_OscConfig+0x4c4>)
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	4a5a      	ldr	r2, [pc, #360]	; (8003358 <HAL_RCC_OscConfig+0x4c4>)
 80031f0:	f023 0301 	bic.w	r3, r3, #1
 80031f4:	6213      	str	r3, [r2, #32]
 80031f6:	4b58      	ldr	r3, [pc, #352]	; (8003358 <HAL_RCC_OscConfig+0x4c4>)
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	4a57      	ldr	r2, [pc, #348]	; (8003358 <HAL_RCC_OscConfig+0x4c4>)
 80031fc:	f023 0304 	bic.w	r3, r3, #4
 8003200:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d015      	beq.n	8003236 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800320a:	f7fe fcfd 	bl	8001c08 <HAL_GetTick>
 800320e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003210:	e00a      	b.n	8003228 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003212:	f7fe fcf9 	bl	8001c08 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003220:	4293      	cmp	r3, r2
 8003222:	d901      	bls.n	8003228 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e0b1      	b.n	800338c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003228:	4b4b      	ldr	r3, [pc, #300]	; (8003358 <HAL_RCC_OscConfig+0x4c4>)
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0ee      	beq.n	8003212 <HAL_RCC_OscConfig+0x37e>
 8003234:	e014      	b.n	8003260 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003236:	f7fe fce7 	bl	8001c08 <HAL_GetTick>
 800323a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800323c:	e00a      	b.n	8003254 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800323e:	f7fe fce3 	bl	8001c08 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	f241 3288 	movw	r2, #5000	; 0x1388
 800324c:	4293      	cmp	r3, r2
 800324e:	d901      	bls.n	8003254 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e09b      	b.n	800338c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003254:	4b40      	ldr	r3, [pc, #256]	; (8003358 <HAL_RCC_OscConfig+0x4c4>)
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1ee      	bne.n	800323e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003260:	7dfb      	ldrb	r3, [r7, #23]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d105      	bne.n	8003272 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003266:	4b3c      	ldr	r3, [pc, #240]	; (8003358 <HAL_RCC_OscConfig+0x4c4>)
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	4a3b      	ldr	r2, [pc, #236]	; (8003358 <HAL_RCC_OscConfig+0x4c4>)
 800326c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003270:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	2b00      	cmp	r3, #0
 8003278:	f000 8087 	beq.w	800338a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800327c:	4b36      	ldr	r3, [pc, #216]	; (8003358 <HAL_RCC_OscConfig+0x4c4>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f003 030c 	and.w	r3, r3, #12
 8003284:	2b08      	cmp	r3, #8
 8003286:	d061      	beq.n	800334c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	69db      	ldr	r3, [r3, #28]
 800328c:	2b02      	cmp	r3, #2
 800328e:	d146      	bne.n	800331e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003290:	4b33      	ldr	r3, [pc, #204]	; (8003360 <HAL_RCC_OscConfig+0x4cc>)
 8003292:	2200      	movs	r2, #0
 8003294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003296:	f7fe fcb7 	bl	8001c08 <HAL_GetTick>
 800329a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800329c:	e008      	b.n	80032b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800329e:	f7fe fcb3 	bl	8001c08 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e06d      	b.n	800338c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032b0:	4b29      	ldr	r3, [pc, #164]	; (8003358 <HAL_RCC_OscConfig+0x4c4>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1f0      	bne.n	800329e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032c4:	d108      	bne.n	80032d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032c6:	4b24      	ldr	r3, [pc, #144]	; (8003358 <HAL_RCC_OscConfig+0x4c4>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	4921      	ldr	r1, [pc, #132]	; (8003358 <HAL_RCC_OscConfig+0x4c4>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032d8:	4b1f      	ldr	r3, [pc, #124]	; (8003358 <HAL_RCC_OscConfig+0x4c4>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a19      	ldr	r1, [r3, #32]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e8:	430b      	orrs	r3, r1
 80032ea:	491b      	ldr	r1, [pc, #108]	; (8003358 <HAL_RCC_OscConfig+0x4c4>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032f0:	4b1b      	ldr	r3, [pc, #108]	; (8003360 <HAL_RCC_OscConfig+0x4cc>)
 80032f2:	2201      	movs	r2, #1
 80032f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f6:	f7fe fc87 	bl	8001c08 <HAL_GetTick>
 80032fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032fc:	e008      	b.n	8003310 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032fe:	f7fe fc83 	bl	8001c08 <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d901      	bls.n	8003310 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e03d      	b.n	800338c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003310:	4b11      	ldr	r3, [pc, #68]	; (8003358 <HAL_RCC_OscConfig+0x4c4>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d0f0      	beq.n	80032fe <HAL_RCC_OscConfig+0x46a>
 800331c:	e035      	b.n	800338a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800331e:	4b10      	ldr	r3, [pc, #64]	; (8003360 <HAL_RCC_OscConfig+0x4cc>)
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003324:	f7fe fc70 	bl	8001c08 <HAL_GetTick>
 8003328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800332c:	f7fe fc6c 	bl	8001c08 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e026      	b.n	800338c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800333e:	4b06      	ldr	r3, [pc, #24]	; (8003358 <HAL_RCC_OscConfig+0x4c4>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1f0      	bne.n	800332c <HAL_RCC_OscConfig+0x498>
 800334a:	e01e      	b.n	800338a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	69db      	ldr	r3, [r3, #28]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d107      	bne.n	8003364 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e019      	b.n	800338c <HAL_RCC_OscConfig+0x4f8>
 8003358:	40021000 	.word	0x40021000
 800335c:	40007000 	.word	0x40007000
 8003360:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003364:	4b0b      	ldr	r3, [pc, #44]	; (8003394 <HAL_RCC_OscConfig+0x500>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	429a      	cmp	r2, r3
 8003376:	d106      	bne.n	8003386 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003382:	429a      	cmp	r2, r3
 8003384:	d001      	beq.n	800338a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e000      	b.n	800338c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3718      	adds	r7, #24
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	40021000 	.word	0x40021000

08003398 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d101      	bne.n	80033ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e0d0      	b.n	800354e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033ac:	4b6a      	ldr	r3, [pc, #424]	; (8003558 <HAL_RCC_ClockConfig+0x1c0>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d910      	bls.n	80033dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ba:	4b67      	ldr	r3, [pc, #412]	; (8003558 <HAL_RCC_ClockConfig+0x1c0>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f023 0207 	bic.w	r2, r3, #7
 80033c2:	4965      	ldr	r1, [pc, #404]	; (8003558 <HAL_RCC_ClockConfig+0x1c0>)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ca:	4b63      	ldr	r3, [pc, #396]	; (8003558 <HAL_RCC_ClockConfig+0x1c0>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0307 	and.w	r3, r3, #7
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d001      	beq.n	80033dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e0b8      	b.n	800354e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d020      	beq.n	800342a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0304 	and.w	r3, r3, #4
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d005      	beq.n	8003400 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033f4:	4b59      	ldr	r3, [pc, #356]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	4a58      	ldr	r2, [pc, #352]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 80033fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80033fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0308 	and.w	r3, r3, #8
 8003408:	2b00      	cmp	r3, #0
 800340a:	d005      	beq.n	8003418 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800340c:	4b53      	ldr	r3, [pc, #332]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	4a52      	ldr	r2, [pc, #328]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 8003412:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003416:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003418:	4b50      	ldr	r3, [pc, #320]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	494d      	ldr	r1, [pc, #308]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 8003426:	4313      	orrs	r3, r2
 8003428:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b00      	cmp	r3, #0
 8003434:	d040      	beq.n	80034b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d107      	bne.n	800344e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800343e:	4b47      	ldr	r3, [pc, #284]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d115      	bne.n	8003476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e07f      	b.n	800354e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2b02      	cmp	r3, #2
 8003454:	d107      	bne.n	8003466 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003456:	4b41      	ldr	r3, [pc, #260]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d109      	bne.n	8003476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e073      	b.n	800354e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003466:	4b3d      	ldr	r3, [pc, #244]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e06b      	b.n	800354e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003476:	4b39      	ldr	r3, [pc, #228]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f023 0203 	bic.w	r2, r3, #3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	4936      	ldr	r1, [pc, #216]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 8003484:	4313      	orrs	r3, r2
 8003486:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003488:	f7fe fbbe 	bl	8001c08 <HAL_GetTick>
 800348c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800348e:	e00a      	b.n	80034a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003490:	f7fe fbba 	bl	8001c08 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	f241 3288 	movw	r2, #5000	; 0x1388
 800349e:	4293      	cmp	r3, r2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e053      	b.n	800354e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034a6:	4b2d      	ldr	r3, [pc, #180]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f003 020c 	and.w	r2, r3, #12
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d1eb      	bne.n	8003490 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034b8:	4b27      	ldr	r3, [pc, #156]	; (8003558 <HAL_RCC_ClockConfig+0x1c0>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0307 	and.w	r3, r3, #7
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d210      	bcs.n	80034e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034c6:	4b24      	ldr	r3, [pc, #144]	; (8003558 <HAL_RCC_ClockConfig+0x1c0>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f023 0207 	bic.w	r2, r3, #7
 80034ce:	4922      	ldr	r1, [pc, #136]	; (8003558 <HAL_RCC_ClockConfig+0x1c0>)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034d6:	4b20      	ldr	r3, [pc, #128]	; (8003558 <HAL_RCC_ClockConfig+0x1c0>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0307 	and.w	r3, r3, #7
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d001      	beq.n	80034e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e032      	b.n	800354e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0304 	and.w	r3, r3, #4
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d008      	beq.n	8003506 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034f4:	4b19      	ldr	r3, [pc, #100]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	4916      	ldr	r1, [pc, #88]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 8003502:	4313      	orrs	r3, r2
 8003504:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0308 	and.w	r3, r3, #8
 800350e:	2b00      	cmp	r3, #0
 8003510:	d009      	beq.n	8003526 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003512:	4b12      	ldr	r3, [pc, #72]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	490e      	ldr	r1, [pc, #56]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 8003522:	4313      	orrs	r3, r2
 8003524:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003526:	f000 f821 	bl	800356c <HAL_RCC_GetSysClockFreq>
 800352a:	4602      	mov	r2, r0
 800352c:	4b0b      	ldr	r3, [pc, #44]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	091b      	lsrs	r3, r3, #4
 8003532:	f003 030f 	and.w	r3, r3, #15
 8003536:	490a      	ldr	r1, [pc, #40]	; (8003560 <HAL_RCC_ClockConfig+0x1c8>)
 8003538:	5ccb      	ldrb	r3, [r1, r3]
 800353a:	fa22 f303 	lsr.w	r3, r2, r3
 800353e:	4a09      	ldr	r2, [pc, #36]	; (8003564 <HAL_RCC_ClockConfig+0x1cc>)
 8003540:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003542:	4b09      	ldr	r3, [pc, #36]	; (8003568 <HAL_RCC_ClockConfig+0x1d0>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	f7fe fb1c 	bl	8001b84 <HAL_InitTick>

  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	40022000 	.word	0x40022000
 800355c:	40021000 	.word	0x40021000
 8003560:	080082dc 	.word	0x080082dc
 8003564:	20000000 	.word	0x20000000
 8003568:	20000004 	.word	0x20000004

0800356c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800356c:	b480      	push	{r7}
 800356e:	b087      	sub	sp, #28
 8003570:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003572:	2300      	movs	r3, #0
 8003574:	60fb      	str	r3, [r7, #12]
 8003576:	2300      	movs	r3, #0
 8003578:	60bb      	str	r3, [r7, #8]
 800357a:	2300      	movs	r3, #0
 800357c:	617b      	str	r3, [r7, #20]
 800357e:	2300      	movs	r3, #0
 8003580:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003582:	2300      	movs	r3, #0
 8003584:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003586:	4b1e      	ldr	r3, [pc, #120]	; (8003600 <HAL_RCC_GetSysClockFreq+0x94>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f003 030c 	and.w	r3, r3, #12
 8003592:	2b04      	cmp	r3, #4
 8003594:	d002      	beq.n	800359c <HAL_RCC_GetSysClockFreq+0x30>
 8003596:	2b08      	cmp	r3, #8
 8003598:	d003      	beq.n	80035a2 <HAL_RCC_GetSysClockFreq+0x36>
 800359a:	e027      	b.n	80035ec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800359c:	4b19      	ldr	r3, [pc, #100]	; (8003604 <HAL_RCC_GetSysClockFreq+0x98>)
 800359e:	613b      	str	r3, [r7, #16]
      break;
 80035a0:	e027      	b.n	80035f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	0c9b      	lsrs	r3, r3, #18
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	4a17      	ldr	r2, [pc, #92]	; (8003608 <HAL_RCC_GetSysClockFreq+0x9c>)
 80035ac:	5cd3      	ldrb	r3, [r2, r3]
 80035ae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d010      	beq.n	80035dc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035ba:	4b11      	ldr	r3, [pc, #68]	; (8003600 <HAL_RCC_GetSysClockFreq+0x94>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	0c5b      	lsrs	r3, r3, #17
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	4a11      	ldr	r2, [pc, #68]	; (800360c <HAL_RCC_GetSysClockFreq+0xa0>)
 80035c6:	5cd3      	ldrb	r3, [r2, r3]
 80035c8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a0d      	ldr	r2, [pc, #52]	; (8003604 <HAL_RCC_GetSysClockFreq+0x98>)
 80035ce:	fb03 f202 	mul.w	r2, r3, r2
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d8:	617b      	str	r3, [r7, #20]
 80035da:	e004      	b.n	80035e6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a0c      	ldr	r2, [pc, #48]	; (8003610 <HAL_RCC_GetSysClockFreq+0xa4>)
 80035e0:	fb02 f303 	mul.w	r3, r2, r3
 80035e4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	613b      	str	r3, [r7, #16]
      break;
 80035ea:	e002      	b.n	80035f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035ec:	4b05      	ldr	r3, [pc, #20]	; (8003604 <HAL_RCC_GetSysClockFreq+0x98>)
 80035ee:	613b      	str	r3, [r7, #16]
      break;
 80035f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035f2:	693b      	ldr	r3, [r7, #16]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	371c      	adds	r7, #28
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bc80      	pop	{r7}
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	40021000 	.word	0x40021000
 8003604:	007a1200 	.word	0x007a1200
 8003608:	080082f4 	.word	0x080082f4
 800360c:	08008304 	.word	0x08008304
 8003610:	003d0900 	.word	0x003d0900

08003614 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003614:	b480      	push	{r7}
 8003616:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003618:	4b02      	ldr	r3, [pc, #8]	; (8003624 <HAL_RCC_GetHCLKFreq+0x10>)
 800361a:	681b      	ldr	r3, [r3, #0]
}
 800361c:	4618      	mov	r0, r3
 800361e:	46bd      	mov	sp, r7
 8003620:	bc80      	pop	{r7}
 8003622:	4770      	bx	lr
 8003624:	20000000 	.word	0x20000000

08003628 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800362c:	f7ff fff2 	bl	8003614 <HAL_RCC_GetHCLKFreq>
 8003630:	4602      	mov	r2, r0
 8003632:	4b05      	ldr	r3, [pc, #20]	; (8003648 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	0a1b      	lsrs	r3, r3, #8
 8003638:	f003 0307 	and.w	r3, r3, #7
 800363c:	4903      	ldr	r1, [pc, #12]	; (800364c <HAL_RCC_GetPCLK1Freq+0x24>)
 800363e:	5ccb      	ldrb	r3, [r1, r3]
 8003640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003644:	4618      	mov	r0, r3
 8003646:	bd80      	pop	{r7, pc}
 8003648:	40021000 	.word	0x40021000
 800364c:	080082ec 	.word	0x080082ec

08003650 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003654:	f7ff ffde 	bl	8003614 <HAL_RCC_GetHCLKFreq>
 8003658:	4602      	mov	r2, r0
 800365a:	4b05      	ldr	r3, [pc, #20]	; (8003670 <HAL_RCC_GetPCLK2Freq+0x20>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	0adb      	lsrs	r3, r3, #11
 8003660:	f003 0307 	and.w	r3, r3, #7
 8003664:	4903      	ldr	r1, [pc, #12]	; (8003674 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003666:	5ccb      	ldrb	r3, [r1, r3]
 8003668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800366c:	4618      	mov	r0, r3
 800366e:	bd80      	pop	{r7, pc}
 8003670:	40021000 	.word	0x40021000
 8003674:	080082ec 	.word	0x080082ec

08003678 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003680:	4b0a      	ldr	r3, [pc, #40]	; (80036ac <RCC_Delay+0x34>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a0a      	ldr	r2, [pc, #40]	; (80036b0 <RCC_Delay+0x38>)
 8003686:	fba2 2303 	umull	r2, r3, r2, r3
 800368a:	0a5b      	lsrs	r3, r3, #9
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	fb02 f303 	mul.w	r3, r2, r3
 8003692:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003694:	bf00      	nop
  }
  while (Delay --);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	1e5a      	subs	r2, r3, #1
 800369a:	60fa      	str	r2, [r7, #12]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1f9      	bne.n	8003694 <RCC_Delay+0x1c>
}
 80036a0:	bf00      	nop
 80036a2:	bf00      	nop
 80036a4:	3714      	adds	r7, #20
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bc80      	pop	{r7}
 80036aa:	4770      	bx	lr
 80036ac:	20000000 	.word	0x20000000
 80036b0:	10624dd3 	.word	0x10624dd3

080036b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b086      	sub	sp, #24
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80036bc:	2300      	movs	r3, #0
 80036be:	613b      	str	r3, [r7, #16]
 80036c0:	2300      	movs	r3, #0
 80036c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d07d      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80036d0:	2300      	movs	r3, #0
 80036d2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036d4:	4b4f      	ldr	r3, [pc, #316]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036d6:	69db      	ldr	r3, [r3, #28]
 80036d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10d      	bne.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036e0:	4b4c      	ldr	r3, [pc, #304]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036e2:	69db      	ldr	r3, [r3, #28]
 80036e4:	4a4b      	ldr	r2, [pc, #300]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036ea:	61d3      	str	r3, [r2, #28]
 80036ec:	4b49      	ldr	r3, [pc, #292]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f4:	60bb      	str	r3, [r7, #8]
 80036f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036f8:	2301      	movs	r3, #1
 80036fa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036fc:	4b46      	ldr	r3, [pc, #280]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003704:	2b00      	cmp	r3, #0
 8003706:	d118      	bne.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003708:	4b43      	ldr	r3, [pc, #268]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a42      	ldr	r2, [pc, #264]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800370e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003712:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003714:	f7fe fa78 	bl	8001c08 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800371a:	e008      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800371c:	f7fe fa74 	bl	8001c08 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b64      	cmp	r3, #100	; 0x64
 8003728:	d901      	bls.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e06d      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800372e:	4b3a      	ldr	r3, [pc, #232]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003736:	2b00      	cmp	r3, #0
 8003738:	d0f0      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800373a:	4b36      	ldr	r3, [pc, #216]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003742:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d02e      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	429a      	cmp	r2, r3
 8003756:	d027      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003758:	4b2e      	ldr	r3, [pc, #184]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800375a:	6a1b      	ldr	r3, [r3, #32]
 800375c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003760:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003762:	4b2e      	ldr	r3, [pc, #184]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003764:	2201      	movs	r2, #1
 8003766:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003768:	4b2c      	ldr	r3, [pc, #176]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800376a:	2200      	movs	r2, #0
 800376c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800376e:	4a29      	ldr	r2, [pc, #164]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d014      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800377e:	f7fe fa43 	bl	8001c08 <HAL_GetTick>
 8003782:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003784:	e00a      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003786:	f7fe fa3f 	bl	8001c08 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	f241 3288 	movw	r2, #5000	; 0x1388
 8003794:	4293      	cmp	r3, r2
 8003796:	d901      	bls.n	800379c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e036      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800379c:	4b1d      	ldr	r3, [pc, #116]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d0ee      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037a8:	4b1a      	ldr	r3, [pc, #104]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037aa:	6a1b      	ldr	r3, [r3, #32]
 80037ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	4917      	ldr	r1, [pc, #92]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037ba:	7dfb      	ldrb	r3, [r7, #23]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d105      	bne.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037c0:	4b14      	ldr	r3, [pc, #80]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037c2:	69db      	ldr	r3, [r3, #28]
 80037c4:	4a13      	ldr	r2, [pc, #76]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037ca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d008      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037d8:	4b0e      	ldr	r3, [pc, #56]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	490b      	ldr	r1, [pc, #44]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0310 	and.w	r3, r3, #16
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d008      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037f6:	4b07      	ldr	r3, [pc, #28]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	4904      	ldr	r1, [pc, #16]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003804:	4313      	orrs	r3, r2
 8003806:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3718      	adds	r7, #24
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	40021000 	.word	0x40021000
 8003818:	40007000 	.word	0x40007000
 800381c:	42420440 	.word	0x42420440

08003820 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e041      	b.n	80038b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d106      	bne.n	800384c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7fd ff3c 	bl	80016c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2202      	movs	r2, #2
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3304      	adds	r3, #4
 800385c:	4619      	mov	r1, r3
 800385e:	4610      	mov	r0, r2
 8003860:	f000 fab2 	bl	8003dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b082      	sub	sp, #8
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e041      	b.n	8003954 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d106      	bne.n	80038ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 f839 	bl	800395c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2202      	movs	r2, #2
 80038ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	3304      	adds	r3, #4
 80038fa:	4619      	mov	r1, r3
 80038fc:	4610      	mov	r0, r2
 80038fe:	f000 fa63 	bl	8003dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3708      	adds	r7, #8
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	bc80      	pop	{r7}
 800396c:	4770      	bx	lr
	...

08003970 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d109      	bne.n	8003994 <HAL_TIM_PWM_Start+0x24>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003986:	b2db      	uxtb	r3, r3
 8003988:	2b01      	cmp	r3, #1
 800398a:	bf14      	ite	ne
 800398c:	2301      	movne	r3, #1
 800398e:	2300      	moveq	r3, #0
 8003990:	b2db      	uxtb	r3, r3
 8003992:	e022      	b.n	80039da <HAL_TIM_PWM_Start+0x6a>
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	2b04      	cmp	r3, #4
 8003998:	d109      	bne.n	80039ae <HAL_TIM_PWM_Start+0x3e>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	bf14      	ite	ne
 80039a6:	2301      	movne	r3, #1
 80039a8:	2300      	moveq	r3, #0
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	e015      	b.n	80039da <HAL_TIM_PWM_Start+0x6a>
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	2b08      	cmp	r3, #8
 80039b2:	d109      	bne.n	80039c8 <HAL_TIM_PWM_Start+0x58>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b01      	cmp	r3, #1
 80039be:	bf14      	ite	ne
 80039c0:	2301      	movne	r3, #1
 80039c2:	2300      	moveq	r3, #0
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	e008      	b.n	80039da <HAL_TIM_PWM_Start+0x6a>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	bf14      	ite	ne
 80039d4:	2301      	movne	r3, #1
 80039d6:	2300      	moveq	r3, #0
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e05e      	b.n	8003aa0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d104      	bne.n	80039f2 <HAL_TIM_PWM_Start+0x82>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2202      	movs	r2, #2
 80039ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039f0:	e013      	b.n	8003a1a <HAL_TIM_PWM_Start+0xaa>
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	2b04      	cmp	r3, #4
 80039f6:	d104      	bne.n	8003a02 <HAL_TIM_PWM_Start+0x92>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2202      	movs	r2, #2
 80039fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a00:	e00b      	b.n	8003a1a <HAL_TIM_PWM_Start+0xaa>
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	2b08      	cmp	r3, #8
 8003a06:	d104      	bne.n	8003a12 <HAL_TIM_PWM_Start+0xa2>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a10:	e003      	b.n	8003a1a <HAL_TIM_PWM_Start+0xaa>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2202      	movs	r2, #2
 8003a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	6839      	ldr	r1, [r7, #0]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f000 fc50 	bl	80042c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a1e      	ldr	r2, [pc, #120]	; (8003aa8 <HAL_TIM_PWM_Start+0x138>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d107      	bne.n	8003a42 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a18      	ldr	r2, [pc, #96]	; (8003aa8 <HAL_TIM_PWM_Start+0x138>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d00e      	beq.n	8003a6a <HAL_TIM_PWM_Start+0xfa>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a54:	d009      	beq.n	8003a6a <HAL_TIM_PWM_Start+0xfa>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a14      	ldr	r2, [pc, #80]	; (8003aac <HAL_TIM_PWM_Start+0x13c>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d004      	beq.n	8003a6a <HAL_TIM_PWM_Start+0xfa>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a12      	ldr	r2, [pc, #72]	; (8003ab0 <HAL_TIM_PWM_Start+0x140>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d111      	bne.n	8003a8e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f003 0307 	and.w	r3, r3, #7
 8003a74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2b06      	cmp	r3, #6
 8003a7a:	d010      	beq.n	8003a9e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f042 0201 	orr.w	r2, r2, #1
 8003a8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a8c:	e007      	b.n	8003a9e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f042 0201 	orr.w	r2, r2, #1
 8003a9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	40012c00 	.word	0x40012c00
 8003aac:	40000400 	.word	0x40000400
 8003ab0:	40000800 	.word	0x40000800

08003ab4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d101      	bne.n	8003ad2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ace:	2302      	movs	r3, #2
 8003ad0:	e0ae      	b.n	8003c30 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2b0c      	cmp	r3, #12
 8003ade:	f200 809f 	bhi.w	8003c20 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003ae2:	a201      	add	r2, pc, #4	; (adr r2, 8003ae8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae8:	08003b1d 	.word	0x08003b1d
 8003aec:	08003c21 	.word	0x08003c21
 8003af0:	08003c21 	.word	0x08003c21
 8003af4:	08003c21 	.word	0x08003c21
 8003af8:	08003b5d 	.word	0x08003b5d
 8003afc:	08003c21 	.word	0x08003c21
 8003b00:	08003c21 	.word	0x08003c21
 8003b04:	08003c21 	.word	0x08003c21
 8003b08:	08003b9f 	.word	0x08003b9f
 8003b0c:	08003c21 	.word	0x08003c21
 8003b10:	08003c21 	.word	0x08003c21
 8003b14:	08003c21 	.word	0x08003c21
 8003b18:	08003bdf 	.word	0x08003bdf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68b9      	ldr	r1, [r7, #8]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 f9b2 	bl	8003e8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	699a      	ldr	r2, [r3, #24]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f042 0208 	orr.w	r2, r2, #8
 8003b36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	699a      	ldr	r2, [r3, #24]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 0204 	bic.w	r2, r2, #4
 8003b46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6999      	ldr	r1, [r3, #24]
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	691a      	ldr	r2, [r3, #16]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	619a      	str	r2, [r3, #24]
      break;
 8003b5a:	e064      	b.n	8003c26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68b9      	ldr	r1, [r7, #8]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f000 f9f8 	bl	8003f58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	699a      	ldr	r2, [r3, #24]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	699a      	ldr	r2, [r3, #24]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6999      	ldr	r1, [r3, #24]
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	021a      	lsls	r2, r3, #8
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	619a      	str	r2, [r3, #24]
      break;
 8003b9c:	e043      	b.n	8003c26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68b9      	ldr	r1, [r7, #8]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f000 fa41 	bl	800402c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	69da      	ldr	r2, [r3, #28]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f042 0208 	orr.w	r2, r2, #8
 8003bb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	69da      	ldr	r2, [r3, #28]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 0204 	bic.w	r2, r2, #4
 8003bc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	69d9      	ldr	r1, [r3, #28]
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	691a      	ldr	r2, [r3, #16]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	61da      	str	r2, [r3, #28]
      break;
 8003bdc:	e023      	b.n	8003c26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68b9      	ldr	r1, [r7, #8]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f000 fa8b 	bl	8004100 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	69da      	ldr	r2, [r3, #28]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	69da      	ldr	r2, [r3, #28]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	69d9      	ldr	r1, [r3, #28]
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	021a      	lsls	r2, r3, #8
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	61da      	str	r2, [r3, #28]
      break;
 8003c1e:	e002      	b.n	8003c26 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	75fb      	strb	r3, [r7, #23]
      break;
 8003c24:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3718      	adds	r7, #24
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c42:	2300      	movs	r3, #0
 8003c44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d101      	bne.n	8003c54 <HAL_TIM_ConfigClockSource+0x1c>
 8003c50:	2302      	movs	r3, #2
 8003c52:	e0b4      	b.n	8003dbe <HAL_TIM_ConfigClockSource+0x186>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2202      	movs	r2, #2
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68ba      	ldr	r2, [r7, #8]
 8003c82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c8c:	d03e      	beq.n	8003d0c <HAL_TIM_ConfigClockSource+0xd4>
 8003c8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c92:	f200 8087 	bhi.w	8003da4 <HAL_TIM_ConfigClockSource+0x16c>
 8003c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c9a:	f000 8086 	beq.w	8003daa <HAL_TIM_ConfigClockSource+0x172>
 8003c9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ca2:	d87f      	bhi.n	8003da4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ca4:	2b70      	cmp	r3, #112	; 0x70
 8003ca6:	d01a      	beq.n	8003cde <HAL_TIM_ConfigClockSource+0xa6>
 8003ca8:	2b70      	cmp	r3, #112	; 0x70
 8003caa:	d87b      	bhi.n	8003da4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cac:	2b60      	cmp	r3, #96	; 0x60
 8003cae:	d050      	beq.n	8003d52 <HAL_TIM_ConfigClockSource+0x11a>
 8003cb0:	2b60      	cmp	r3, #96	; 0x60
 8003cb2:	d877      	bhi.n	8003da4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cb4:	2b50      	cmp	r3, #80	; 0x50
 8003cb6:	d03c      	beq.n	8003d32 <HAL_TIM_ConfigClockSource+0xfa>
 8003cb8:	2b50      	cmp	r3, #80	; 0x50
 8003cba:	d873      	bhi.n	8003da4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cbc:	2b40      	cmp	r3, #64	; 0x40
 8003cbe:	d058      	beq.n	8003d72 <HAL_TIM_ConfigClockSource+0x13a>
 8003cc0:	2b40      	cmp	r3, #64	; 0x40
 8003cc2:	d86f      	bhi.n	8003da4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cc4:	2b30      	cmp	r3, #48	; 0x30
 8003cc6:	d064      	beq.n	8003d92 <HAL_TIM_ConfigClockSource+0x15a>
 8003cc8:	2b30      	cmp	r3, #48	; 0x30
 8003cca:	d86b      	bhi.n	8003da4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ccc:	2b20      	cmp	r3, #32
 8003cce:	d060      	beq.n	8003d92 <HAL_TIM_ConfigClockSource+0x15a>
 8003cd0:	2b20      	cmp	r3, #32
 8003cd2:	d867      	bhi.n	8003da4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d05c      	beq.n	8003d92 <HAL_TIM_ConfigClockSource+0x15a>
 8003cd8:	2b10      	cmp	r3, #16
 8003cda:	d05a      	beq.n	8003d92 <HAL_TIM_ConfigClockSource+0x15a>
 8003cdc:	e062      	b.n	8003da4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003cee:	f000 facc 	bl	800428a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	609a      	str	r2, [r3, #8]
      break;
 8003d0a:	e04f      	b.n	8003dac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d1c:	f000 fab5 	bl	800428a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689a      	ldr	r2, [r3, #8]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d2e:	609a      	str	r2, [r3, #8]
      break;
 8003d30:	e03c      	b.n	8003dac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d3e:	461a      	mov	r2, r3
 8003d40:	f000 fa2c 	bl	800419c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2150      	movs	r1, #80	; 0x50
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f000 fa83 	bl	8004256 <TIM_ITRx_SetConfig>
      break;
 8003d50:	e02c      	b.n	8003dac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d5e:	461a      	mov	r2, r3
 8003d60:	f000 fa4a 	bl	80041f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2160      	movs	r1, #96	; 0x60
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 fa73 	bl	8004256 <TIM_ITRx_SetConfig>
      break;
 8003d70:	e01c      	b.n	8003dac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d7e:	461a      	mov	r2, r3
 8003d80:	f000 fa0c 	bl	800419c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2140      	movs	r1, #64	; 0x40
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 fa63 	bl	8004256 <TIM_ITRx_SetConfig>
      break;
 8003d90:	e00c      	b.n	8003dac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	4610      	mov	r0, r2
 8003d9e:	f000 fa5a 	bl	8004256 <TIM_ITRx_SetConfig>
      break;
 8003da2:	e003      	b.n	8003dac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	73fb      	strb	r3, [r7, #15]
      break;
 8003da8:	e000      	b.n	8003dac <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003daa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
	...

08003dc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a29      	ldr	r2, [pc, #164]	; (8003e80 <TIM_Base_SetConfig+0xb8>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d00b      	beq.n	8003df8 <TIM_Base_SetConfig+0x30>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003de6:	d007      	beq.n	8003df8 <TIM_Base_SetConfig+0x30>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a26      	ldr	r2, [pc, #152]	; (8003e84 <TIM_Base_SetConfig+0xbc>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d003      	beq.n	8003df8 <TIM_Base_SetConfig+0x30>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a25      	ldr	r2, [pc, #148]	; (8003e88 <TIM_Base_SetConfig+0xc0>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d108      	bne.n	8003e0a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a1c      	ldr	r2, [pc, #112]	; (8003e80 <TIM_Base_SetConfig+0xb8>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d00b      	beq.n	8003e2a <TIM_Base_SetConfig+0x62>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e18:	d007      	beq.n	8003e2a <TIM_Base_SetConfig+0x62>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a19      	ldr	r2, [pc, #100]	; (8003e84 <TIM_Base_SetConfig+0xbc>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d003      	beq.n	8003e2a <TIM_Base_SetConfig+0x62>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a18      	ldr	r2, [pc, #96]	; (8003e88 <TIM_Base_SetConfig+0xc0>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d108      	bne.n	8003e3c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	689a      	ldr	r2, [r3, #8]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a07      	ldr	r2, [pc, #28]	; (8003e80 <TIM_Base_SetConfig+0xb8>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d103      	bne.n	8003e70 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	691a      	ldr	r2, [r3, #16]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	615a      	str	r2, [r3, #20]
}
 8003e76:	bf00      	nop
 8003e78:	3714      	adds	r7, #20
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bc80      	pop	{r7}
 8003e7e:	4770      	bx	lr
 8003e80:	40012c00 	.word	0x40012c00
 8003e84:	40000400 	.word	0x40000400
 8003e88:	40000800 	.word	0x40000800

08003e8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b087      	sub	sp, #28
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a1b      	ldr	r3, [r3, #32]
 8003ea0:	f023 0201 	bic.w	r2, r3, #1
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f023 0303 	bic.w	r3, r3, #3
 8003ec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	f023 0302 	bic.w	r3, r3, #2
 8003ed4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a1c      	ldr	r2, [pc, #112]	; (8003f54 <TIM_OC1_SetConfig+0xc8>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d10c      	bne.n	8003f02 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	f023 0308 	bic.w	r3, r3, #8
 8003eee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	f023 0304 	bic.w	r3, r3, #4
 8003f00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a13      	ldr	r2, [pc, #76]	; (8003f54 <TIM_OC1_SetConfig+0xc8>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d111      	bne.n	8003f2e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	685a      	ldr	r2, [r3, #4]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	621a      	str	r2, [r3, #32]
}
 8003f48:	bf00      	nop
 8003f4a:	371c      	adds	r7, #28
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bc80      	pop	{r7}
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	40012c00 	.word	0x40012c00

08003f58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b087      	sub	sp, #28
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a1b      	ldr	r3, [r3, #32]
 8003f6c:	f023 0210 	bic.w	r2, r3, #16
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	021b      	lsls	r3, r3, #8
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	f023 0320 	bic.w	r3, r3, #32
 8003fa2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	011b      	lsls	r3, r3, #4
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a1d      	ldr	r2, [pc, #116]	; (8004028 <TIM_OC2_SetConfig+0xd0>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d10d      	bne.n	8003fd4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	011b      	lsls	r3, r3, #4
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fd2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a14      	ldr	r2, [pc, #80]	; (8004028 <TIM_OC2_SetConfig+0xd0>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d113      	bne.n	8004004 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fe2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	695b      	ldr	r3, [r3, #20]
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	4313      	orrs	r3, r2
 8004002:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685a      	ldr	r2, [r3, #4]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	621a      	str	r2, [r3, #32]
}
 800401e:	bf00      	nop
 8004020:	371c      	adds	r7, #28
 8004022:	46bd      	mov	sp, r7
 8004024:	bc80      	pop	{r7}
 8004026:	4770      	bx	lr
 8004028:	40012c00 	.word	0x40012c00

0800402c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800402c:	b480      	push	{r7}
 800402e:	b087      	sub	sp, #28
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800405a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f023 0303 	bic.w	r3, r3, #3
 8004062:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	4313      	orrs	r3, r2
 800406c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004074:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	021b      	lsls	r3, r3, #8
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	4313      	orrs	r3, r2
 8004080:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a1d      	ldr	r2, [pc, #116]	; (80040fc <TIM_OC3_SetConfig+0xd0>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d10d      	bne.n	80040a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004090:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	021b      	lsls	r3, r3, #8
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	4313      	orrs	r3, r2
 800409c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a14      	ldr	r2, [pc, #80]	; (80040fc <TIM_OC3_SetConfig+0xd0>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d113      	bne.n	80040d6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	011b      	lsls	r3, r3, #4
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	011b      	lsls	r3, r3, #4
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	621a      	str	r2, [r3, #32]
}
 80040f0:	bf00      	nop
 80040f2:	371c      	adds	r7, #28
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bc80      	pop	{r7}
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	40012c00 	.word	0x40012c00

08004100 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004100:	b480      	push	{r7}
 8004102:	b087      	sub	sp, #28
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a1b      	ldr	r3, [r3, #32]
 8004114:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800412e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004136:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	021b      	lsls	r3, r3, #8
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	4313      	orrs	r3, r2
 8004142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800414a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	031b      	lsls	r3, r3, #12
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	4313      	orrs	r3, r2
 8004156:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a0f      	ldr	r2, [pc, #60]	; (8004198 <TIM_OC4_SetConfig+0x98>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d109      	bne.n	8004174 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004166:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	019b      	lsls	r3, r3, #6
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	4313      	orrs	r3, r2
 8004172:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	621a      	str	r2, [r3, #32]
}
 800418e:	bf00      	nop
 8004190:	371c      	adds	r7, #28
 8004192:	46bd      	mov	sp, r7
 8004194:	bc80      	pop	{r7}
 8004196:	4770      	bx	lr
 8004198:	40012c00 	.word	0x40012c00

0800419c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800419c:	b480      	push	{r7}
 800419e:	b087      	sub	sp, #28
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6a1b      	ldr	r3, [r3, #32]
 80041ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	f023 0201 	bic.w	r2, r3, #1
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	011b      	lsls	r3, r3, #4
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f023 030a 	bic.w	r3, r3, #10
 80041d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	4313      	orrs	r3, r2
 80041e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	621a      	str	r2, [r3, #32]
}
 80041ee:	bf00      	nop
 80041f0:	371c      	adds	r7, #28
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bc80      	pop	{r7}
 80041f6:	4770      	bx	lr

080041f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b087      	sub	sp, #28
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6a1b      	ldr	r3, [r3, #32]
 8004208:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	f023 0210 	bic.w	r2, r3, #16
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004222:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	031b      	lsls	r3, r3, #12
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	4313      	orrs	r3, r2
 800422c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004234:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	011b      	lsls	r3, r3, #4
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	4313      	orrs	r3, r2
 800423e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	621a      	str	r2, [r3, #32]
}
 800424c:	bf00      	nop
 800424e:	371c      	adds	r7, #28
 8004250:	46bd      	mov	sp, r7
 8004252:	bc80      	pop	{r7}
 8004254:	4770      	bx	lr

08004256 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004256:	b480      	push	{r7}
 8004258:	b085      	sub	sp, #20
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
 800425e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800426c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	4313      	orrs	r3, r2
 8004274:	f043 0307 	orr.w	r3, r3, #7
 8004278:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	609a      	str	r2, [r3, #8]
}
 8004280:	bf00      	nop
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	bc80      	pop	{r7}
 8004288:	4770      	bx	lr

0800428a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800428a:	b480      	push	{r7}
 800428c:	b087      	sub	sp, #28
 800428e:	af00      	add	r7, sp, #0
 8004290:	60f8      	str	r0, [r7, #12]
 8004292:	60b9      	str	r1, [r7, #8]
 8004294:	607a      	str	r2, [r7, #4]
 8004296:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042a4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	021a      	lsls	r2, r3, #8
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	431a      	orrs	r2, r3
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	609a      	str	r2, [r3, #8]
}
 80042be:	bf00      	nop
 80042c0:	371c      	adds	r7, #28
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bc80      	pop	{r7}
 80042c6:	4770      	bx	lr

080042c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b087      	sub	sp, #28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	f003 031f 	and.w	r3, r3, #31
 80042da:	2201      	movs	r2, #1
 80042dc:	fa02 f303 	lsl.w	r3, r2, r3
 80042e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6a1a      	ldr	r2, [r3, #32]
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	43db      	mvns	r3, r3
 80042ea:	401a      	ands	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6a1a      	ldr	r2, [r3, #32]
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	f003 031f 	and.w	r3, r3, #31
 80042fa:	6879      	ldr	r1, [r7, #4]
 80042fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004300:	431a      	orrs	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	621a      	str	r2, [r3, #32]
}
 8004306:	bf00      	nop
 8004308:	371c      	adds	r7, #28
 800430a:	46bd      	mov	sp, r7
 800430c:	bc80      	pop	{r7}
 800430e:	4770      	bx	lr

08004310 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004320:	2b01      	cmp	r3, #1
 8004322:	d101      	bne.n	8004328 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004324:	2302      	movs	r3, #2
 8004326:	e046      	b.n	80043b6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2202      	movs	r2, #2
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800434e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	4313      	orrs	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a16      	ldr	r2, [pc, #88]	; (80043c0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d00e      	beq.n	800438a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004374:	d009      	beq.n	800438a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a12      	ldr	r2, [pc, #72]	; (80043c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d004      	beq.n	800438a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a10      	ldr	r2, [pc, #64]	; (80043c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d10c      	bne.n	80043a4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004390:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	68ba      	ldr	r2, [r7, #8]
 8004398:	4313      	orrs	r3, r2
 800439a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3714      	adds	r7, #20
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bc80      	pop	{r7}
 80043be:	4770      	bx	lr
 80043c0:	40012c00 	.word	0x40012c00
 80043c4:	40000400 	.word	0x40000400
 80043c8:	40000800 	.word	0x40000800

080043cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80043d6:	2300      	movs	r3, #0
 80043d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d101      	bne.n	80043e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80043e4:	2302      	movs	r3, #2
 80043e6:	e03d      	b.n	8004464 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	4313      	orrs	r3, r2
 800440a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	4313      	orrs	r3, r2
 8004418:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4313      	orrs	r3, r2
 8004426:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	4313      	orrs	r3, r2
 8004434:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	4313      	orrs	r3, r2
 8004442:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	4313      	orrs	r3, r2
 8004450:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3714      	adds	r7, #20
 8004468:	46bd      	mov	sp, r7
 800446a:	bc80      	pop	{r7}
 800446c:	4770      	bx	lr

0800446e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b082      	sub	sp, #8
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d101      	bne.n	8004480 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e042      	b.n	8004506 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004486:	b2db      	uxtb	r3, r3
 8004488:	2b00      	cmp	r3, #0
 800448a:	d106      	bne.n	800449a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f7fd f967 	bl	8001768 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2224      	movs	r2, #36	; 0x24
 800449e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68da      	ldr	r2, [r3, #12]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044b0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 ff6e 	bl	8005394 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	691a      	ldr	r2, [r3, #16]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044c6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	695a      	ldr	r2, [r3, #20]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044d6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68da      	ldr	r2, [r3, #12]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044e6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2220      	movs	r2, #32
 80044f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2220      	movs	r2, #32
 80044fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3708      	adds	r7, #8
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
	...

08004510 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b08c      	sub	sp, #48	; 0x30
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	4613      	mov	r3, r2
 800451c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004524:	b2db      	uxtb	r3, r3
 8004526:	2b20      	cmp	r3, #32
 8004528:	d156      	bne.n	80045d8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d002      	beq.n	8004536 <HAL_UART_Transmit_DMA+0x26>
 8004530:	88fb      	ldrh	r3, [r7, #6]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e04f      	b.n	80045da <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800453a:	68ba      	ldr	r2, [r7, #8]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	88fa      	ldrh	r2, [r7, #6]
 8004544:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	88fa      	ldrh	r2, [r7, #6]
 800454a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2221      	movs	r2, #33	; 0x21
 8004556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455e:	4a21      	ldr	r2, [pc, #132]	; (80045e4 <HAL_UART_Transmit_DMA+0xd4>)
 8004560:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004566:	4a20      	ldr	r2, [pc, #128]	; (80045e8 <HAL_UART_Transmit_DMA+0xd8>)
 8004568:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456e:	4a1f      	ldr	r2, [pc, #124]	; (80045ec <HAL_UART_Transmit_DMA+0xdc>)
 8004570:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004576:	2200      	movs	r2, #0
 8004578:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 800457a:	f107 0308 	add.w	r3, r7, #8
 800457e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004586:	6819      	ldr	r1, [r3, #0]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	3304      	adds	r3, #4
 800458e:	461a      	mov	r2, r3
 8004590:	88fb      	ldrh	r3, [r7, #6]
 8004592:	f7fe f8b3 	bl	80026fc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800459e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	3314      	adds	r3, #20
 80045a6:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	e853 3f00 	ldrex	r3, [r3]
 80045ae:	617b      	str	r3, [r7, #20]
   return(result);
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	3314      	adds	r3, #20
 80045be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045c0:	627a      	str	r2, [r7, #36]	; 0x24
 80045c2:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c4:	6a39      	ldr	r1, [r7, #32]
 80045c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045c8:	e841 2300 	strex	r3, r2, [r1]
 80045cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1e5      	bne.n	80045a0 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80045d4:	2300      	movs	r3, #0
 80045d6:	e000      	b.n	80045da <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80045d8:	2302      	movs	r3, #2
  }
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3730      	adds	r7, #48	; 0x30
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	08004c2b 	.word	0x08004c2b
 80045e8:	08004cc5 	.word	0x08004cc5
 80045ec:	08004e49 	.word	0x08004e49

080045f0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b08c      	sub	sp, #48	; 0x30
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	4613      	mov	r3, r2
 80045fc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b20      	cmp	r3, #32
 8004608:	d14a      	bne.n	80046a0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d002      	beq.n	8004616 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004610:	88fb      	ldrh	r3, [r7, #6]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e043      	b.n	80046a2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2201      	movs	r2, #1
 800461e:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004626:	88fb      	ldrh	r3, [r7, #6]
 8004628:	461a      	mov	r2, r3
 800462a:	68b9      	ldr	r1, [r7, #8]
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f000 fc55 	bl	8004edc <UART_Start_Receive_DMA>
 8004632:	4603      	mov	r3, r0
 8004634:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004638:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800463c:	2b00      	cmp	r3, #0
 800463e:	d12c      	bne.n	800469a <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004644:	2b01      	cmp	r3, #1
 8004646:	d125      	bne.n	8004694 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004648:	2300      	movs	r3, #0
 800464a:	613b      	str	r3, [r7, #16]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	613b      	str	r3, [r7, #16]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	613b      	str	r3, [r7, #16]
 800465c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	330c      	adds	r3, #12
 8004664:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	e853 3f00 	ldrex	r3, [r3]
 800466c:	617b      	str	r3, [r7, #20]
   return(result);
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	f043 0310 	orr.w	r3, r3, #16
 8004674:	62bb      	str	r3, [r7, #40]	; 0x28
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	330c      	adds	r3, #12
 800467c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800467e:	627a      	str	r2, [r7, #36]	; 0x24
 8004680:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004682:	6a39      	ldr	r1, [r7, #32]
 8004684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004686:	e841 2300 	strex	r3, r2, [r1]
 800468a:	61fb      	str	r3, [r7, #28]
   return(result);
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1e5      	bne.n	800465e <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8004692:	e002      	b.n	800469a <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800469a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800469e:	e000      	b.n	80046a2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80046a0:	2302      	movs	r3, #2
  }
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3730      	adds	r7, #48	; 0x30
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
	...

080046ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b0ba      	sub	sp, #232	; 0xe8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80046d2:	2300      	movs	r3, #0
 80046d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80046d8:	2300      	movs	r3, #0
 80046da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80046de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046e2:	f003 030f 	and.w	r3, r3, #15
 80046e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80046ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10f      	bne.n	8004712 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046f6:	f003 0320 	and.w	r3, r3, #32
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d009      	beq.n	8004712 <HAL_UART_IRQHandler+0x66>
 80046fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004702:	f003 0320 	and.w	r3, r3, #32
 8004706:	2b00      	cmp	r3, #0
 8004708:	d003      	beq.n	8004712 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 fd84 	bl	8005218 <UART_Receive_IT>
      return;
 8004710:	e25b      	b.n	8004bca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004712:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004716:	2b00      	cmp	r3, #0
 8004718:	f000 80de 	beq.w	80048d8 <HAL_UART_IRQHandler+0x22c>
 800471c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	2b00      	cmp	r3, #0
 8004726:	d106      	bne.n	8004736 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800472c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004730:	2b00      	cmp	r3, #0
 8004732:	f000 80d1 	beq.w	80048d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00b      	beq.n	800475a <HAL_UART_IRQHandler+0xae>
 8004742:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800474a:	2b00      	cmp	r3, #0
 800474c:	d005      	beq.n	800475a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004752:	f043 0201 	orr.w	r2, r3, #1
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800475a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800475e:	f003 0304 	and.w	r3, r3, #4
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00b      	beq.n	800477e <HAL_UART_IRQHandler+0xd2>
 8004766:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800476a:	f003 0301 	and.w	r3, r3, #1
 800476e:	2b00      	cmp	r3, #0
 8004770:	d005      	beq.n	800477e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004776:	f043 0202 	orr.w	r2, r3, #2
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800477e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00b      	beq.n	80047a2 <HAL_UART_IRQHandler+0xf6>
 800478a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d005      	beq.n	80047a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800479a:	f043 0204 	orr.w	r2, r3, #4
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80047a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047a6:	f003 0308 	and.w	r3, r3, #8
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d011      	beq.n	80047d2 <HAL_UART_IRQHandler+0x126>
 80047ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047b2:	f003 0320 	and.w	r3, r3, #32
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d105      	bne.n	80047c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80047ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d005      	beq.n	80047d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ca:	f043 0208 	orr.w	r2, r3, #8
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f000 81f2 	beq.w	8004bc0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047e0:	f003 0320 	and.w	r3, r3, #32
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d008      	beq.n	80047fa <HAL_UART_IRQHandler+0x14e>
 80047e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047ec:	f003 0320 	and.w	r3, r3, #32
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d002      	beq.n	80047fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 fd0f 	bl	8005218 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	695b      	ldr	r3, [r3, #20]
 8004800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004804:	2b00      	cmp	r3, #0
 8004806:	bf14      	ite	ne
 8004808:	2301      	movne	r3, #1
 800480a:	2300      	moveq	r3, #0
 800480c:	b2db      	uxtb	r3, r3
 800480e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004816:	f003 0308 	and.w	r3, r3, #8
 800481a:	2b00      	cmp	r3, #0
 800481c:	d103      	bne.n	8004826 <HAL_UART_IRQHandler+0x17a>
 800481e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004822:	2b00      	cmp	r3, #0
 8004824:	d04f      	beq.n	80048c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 fc19 	bl	800505e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004836:	2b00      	cmp	r3, #0
 8004838:	d041      	beq.n	80048be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	3314      	adds	r3, #20
 8004840:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004844:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004848:	e853 3f00 	ldrex	r3, [r3]
 800484c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004850:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004854:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004858:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	3314      	adds	r3, #20
 8004862:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004866:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800486a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004872:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004876:	e841 2300 	strex	r3, r2, [r1]
 800487a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800487e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1d9      	bne.n	800483a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800488a:	2b00      	cmp	r3, #0
 800488c:	d013      	beq.n	80048b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004892:	4a7e      	ldr	r2, [pc, #504]	; (8004a8c <HAL_UART_IRQHandler+0x3e0>)
 8004894:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800489a:	4618      	mov	r0, r3
 800489c:	f7fd ffca 	bl	8002834 <HAL_DMA_Abort_IT>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d016      	beq.n	80048d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80048b0:	4610      	mov	r0, r2
 80048b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048b4:	e00e      	b.n	80048d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f9ae 	bl	8004c18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048bc:	e00a      	b.n	80048d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f9aa 	bl	8004c18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048c4:	e006      	b.n	80048d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f9a6 	bl	8004c18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80048d2:	e175      	b.n	8004bc0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048d4:	bf00      	nop
    return;
 80048d6:	e173      	b.n	8004bc0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048dc:	2b01      	cmp	r3, #1
 80048de:	f040 814f 	bne.w	8004b80 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80048e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048e6:	f003 0310 	and.w	r3, r3, #16
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f000 8148 	beq.w	8004b80 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80048f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048f4:	f003 0310 	and.w	r3, r3, #16
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f000 8141 	beq.w	8004b80 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048fe:	2300      	movs	r3, #0
 8004900:	60bb      	str	r3, [r7, #8]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	60bb      	str	r3, [r7, #8]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	60bb      	str	r3, [r7, #8]
 8004912:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800491e:	2b00      	cmp	r3, #0
 8004920:	f000 80b6 	beq.w	8004a90 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004930:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004934:	2b00      	cmp	r3, #0
 8004936:	f000 8145 	beq.w	8004bc4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800493e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004942:	429a      	cmp	r2, r3
 8004944:	f080 813e 	bcs.w	8004bc4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800494e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	2b20      	cmp	r3, #32
 8004958:	f000 8088 	beq.w	8004a6c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	330c      	adds	r3, #12
 8004962:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004966:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800496a:	e853 3f00 	ldrex	r3, [r3]
 800496e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004972:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004976:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800497a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	330c      	adds	r3, #12
 8004984:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004988:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800498c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004990:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004994:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004998:	e841 2300 	strex	r3, r2, [r1]
 800499c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80049a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1d9      	bne.n	800495c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	3314      	adds	r3, #20
 80049ae:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049b2:	e853 3f00 	ldrex	r3, [r3]
 80049b6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80049b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049ba:	f023 0301 	bic.w	r3, r3, #1
 80049be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	3314      	adds	r3, #20
 80049c8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80049cc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80049d0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80049d4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80049d8:	e841 2300 	strex	r3, r2, [r1]
 80049dc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80049de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1e1      	bne.n	80049a8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	3314      	adds	r3, #20
 80049ea:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049ee:	e853 3f00 	ldrex	r3, [r3]
 80049f2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80049f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	3314      	adds	r3, #20
 8004a04:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004a08:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a0a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004a0e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004a10:	e841 2300 	strex	r3, r2, [r1]
 8004a14:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004a16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1e3      	bne.n	80049e4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2220      	movs	r2, #32
 8004a20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	330c      	adds	r3, #12
 8004a30:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a34:	e853 3f00 	ldrex	r3, [r3]
 8004a38:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a3c:	f023 0310 	bic.w	r3, r3, #16
 8004a40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	330c      	adds	r3, #12
 8004a4a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004a4e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004a50:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a52:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a56:	e841 2300 	strex	r3, r2, [r1]
 8004a5a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1e3      	bne.n	8004a2a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7fd fea8 	bl	80027bc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2202      	movs	r2, #2
 8004a70:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	4619      	mov	r1, r3
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7fc fb2c 	bl	80010e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a88:	e09c      	b.n	8004bc4 <HAL_UART_IRQHandler+0x518>
 8004a8a:	bf00      	nop
 8004a8c:	08005123 	.word	0x08005123
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f000 808e 	beq.w	8004bc8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004aac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f000 8089 	beq.w	8004bc8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	330c      	adds	r3, #12
 8004abc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac0:	e853 3f00 	ldrex	r3, [r3]
 8004ac4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ac8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004acc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	330c      	adds	r3, #12
 8004ad6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004ada:	647a      	str	r2, [r7, #68]	; 0x44
 8004adc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ade:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ae0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ae2:	e841 2300 	strex	r3, r2, [r1]
 8004ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1e3      	bne.n	8004ab6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	3314      	adds	r3, #20
 8004af4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af8:	e853 3f00 	ldrex	r3, [r3]
 8004afc:	623b      	str	r3, [r7, #32]
   return(result);
 8004afe:	6a3b      	ldr	r3, [r7, #32]
 8004b00:	f023 0301 	bic.w	r3, r3, #1
 8004b04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	3314      	adds	r3, #20
 8004b0e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004b12:	633a      	str	r2, [r7, #48]	; 0x30
 8004b14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b1a:	e841 2300 	strex	r3, r2, [r1]
 8004b1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1e3      	bne.n	8004aee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2220      	movs	r2, #32
 8004b2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	330c      	adds	r3, #12
 8004b3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	e853 3f00 	ldrex	r3, [r3]
 8004b42:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f023 0310 	bic.w	r3, r3, #16
 8004b4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	330c      	adds	r3, #12
 8004b54:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004b58:	61fa      	str	r2, [r7, #28]
 8004b5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5c:	69b9      	ldr	r1, [r7, #24]
 8004b5e:	69fa      	ldr	r2, [r7, #28]
 8004b60:	e841 2300 	strex	r3, r2, [r1]
 8004b64:	617b      	str	r3, [r7, #20]
   return(result);
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1e3      	bne.n	8004b34 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2202      	movs	r2, #2
 8004b70:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b72:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b76:	4619      	mov	r1, r3
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f7fc fab1 	bl	80010e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b7e:	e023      	b.n	8004bc8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d009      	beq.n	8004ba0 <HAL_UART_IRQHandler+0x4f4>
 8004b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d003      	beq.n	8004ba0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 fad6 	bl	800514a <UART_Transmit_IT>
    return;
 8004b9e:	e014      	b.n	8004bca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00e      	beq.n	8004bca <HAL_UART_IRQHandler+0x51e>
 8004bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d008      	beq.n	8004bca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 fb15 	bl	80051e8 <UART_EndTransmit_IT>
    return;
 8004bbe:	e004      	b.n	8004bca <HAL_UART_IRQHandler+0x51e>
    return;
 8004bc0:	bf00      	nop
 8004bc2:	e002      	b.n	8004bca <HAL_UART_IRQHandler+0x51e>
      return;
 8004bc4:	bf00      	nop
 8004bc6:	e000      	b.n	8004bca <HAL_UART_IRQHandler+0x51e>
      return;
 8004bc8:	bf00      	nop
  }
}
 8004bca:	37e8      	adds	r7, #232	; 0xe8
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bc80      	pop	{r7}
 8004be0:	4770      	bx	lr

08004be2 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004be2:	b480      	push	{r7}
 8004be4:	b083      	sub	sp, #12
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004bea:	bf00      	nop
 8004bec:	370c      	adds	r7, #12
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bc80      	pop	{r7}
 8004bf2:	4770      	bx	lr

08004bf4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004bfc:	bf00      	nop
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bc80      	pop	{r7}
 8004c04:	4770      	bx	lr

08004c06 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004c06:	b480      	push	{r7}
 8004c08:	b083      	sub	sp, #12
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004c0e:	bf00      	nop
 8004c10:	370c      	adds	r7, #12
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bc80      	pop	{r7}
 8004c16:	4770      	bx	lr

08004c18 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bc80      	pop	{r7}
 8004c28:	4770      	bx	lr

08004c2a <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b090      	sub	sp, #64	; 0x40
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c36:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0320 	and.w	r3, r3, #32
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d137      	bne.n	8004cb6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c48:	2200      	movs	r2, #0
 8004c4a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	3314      	adds	r3, #20
 8004c52:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c56:	e853 3f00 	ldrex	r3, [r3]
 8004c5a:	623b      	str	r3, [r7, #32]
   return(result);
 8004c5c:	6a3b      	ldr	r3, [r7, #32]
 8004c5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c62:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	3314      	adds	r3, #20
 8004c6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c6c:	633a      	str	r2, [r7, #48]	; 0x30
 8004c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c74:	e841 2300 	strex	r3, r2, [r1]
 8004c78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1e5      	bne.n	8004c4c <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	330c      	adds	r3, #12
 8004c86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	e853 3f00 	ldrex	r3, [r3]
 8004c8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c96:	637b      	str	r3, [r7, #52]	; 0x34
 8004c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	330c      	adds	r3, #12
 8004c9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ca0:	61fa      	str	r2, [r7, #28]
 8004ca2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca4:	69b9      	ldr	r1, [r7, #24]
 8004ca6:	69fa      	ldr	r2, [r7, #28]
 8004ca8:	e841 2300 	strex	r3, r2, [r1]
 8004cac:	617b      	str	r3, [r7, #20]
   return(result);
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d1e5      	bne.n	8004c80 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004cb4:	e002      	b.n	8004cbc <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004cb6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004cb8:	f7ff ff8a 	bl	8004bd0 <HAL_UART_TxCpltCallback>
}
 8004cbc:	bf00      	nop
 8004cbe:	3740      	adds	r7, #64	; 0x40
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f7ff ff85 	bl	8004be2 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cd8:	bf00      	nop
 8004cda:	3710      	adds	r7, #16
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b09c      	sub	sp, #112	; 0x70
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cec:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0320 	and.w	r3, r3, #32
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d172      	bne.n	8004de2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004cfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cfe:	2200      	movs	r2, #0
 8004d00:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	330c      	adds	r3, #12
 8004d08:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d0c:	e853 3f00 	ldrex	r3, [r3]
 8004d10:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d18:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	330c      	adds	r3, #12
 8004d20:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004d22:	65ba      	str	r2, [r7, #88]	; 0x58
 8004d24:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d26:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d2a:	e841 2300 	strex	r3, r2, [r1]
 8004d2e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1e5      	bne.n	8004d02 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	3314      	adds	r3, #20
 8004d3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d40:	e853 3f00 	ldrex	r3, [r3]
 8004d44:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d48:	f023 0301 	bic.w	r3, r3, #1
 8004d4c:	667b      	str	r3, [r7, #100]	; 0x64
 8004d4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	3314      	adds	r3, #20
 8004d54:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004d56:	647a      	str	r2, [r7, #68]	; 0x44
 8004d58:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d5e:	e841 2300 	strex	r3, r2, [r1]
 8004d62:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1e5      	bne.n	8004d36 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	3314      	adds	r3, #20
 8004d70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d74:	e853 3f00 	ldrex	r3, [r3]
 8004d78:	623b      	str	r3, [r7, #32]
   return(result);
 8004d7a:	6a3b      	ldr	r3, [r7, #32]
 8004d7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d80:	663b      	str	r3, [r7, #96]	; 0x60
 8004d82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	3314      	adds	r3, #20
 8004d88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d8a:	633a      	str	r2, [r7, #48]	; 0x30
 8004d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d92:	e841 2300 	strex	r3, r2, [r1]
 8004d96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1e5      	bne.n	8004d6a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004d9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004da0:	2220      	movs	r2, #32
 8004da2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d119      	bne.n	8004de2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	330c      	adds	r3, #12
 8004db4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	e853 3f00 	ldrex	r3, [r3]
 8004dbc:	60fb      	str	r3, [r7, #12]
   return(result);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f023 0310 	bic.w	r3, r3, #16
 8004dc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	330c      	adds	r3, #12
 8004dcc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004dce:	61fa      	str	r2, [r7, #28]
 8004dd0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd2:	69b9      	ldr	r1, [r7, #24]
 8004dd4:	69fa      	ldr	r2, [r7, #28]
 8004dd6:	e841 2300 	strex	r3, r2, [r1]
 8004dda:	617b      	str	r3, [r7, #20]
   return(result);
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1e5      	bne.n	8004dae <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004de4:	2200      	movs	r2, #0
 8004de6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004de8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d106      	bne.n	8004dfe <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004df0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004df2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004df4:	4619      	mov	r1, r3
 8004df6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004df8:	f7fc f972 	bl	80010e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004dfc:	e002      	b.n	8004e04 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004dfe:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004e00:	f7ff fef8 	bl	8004bf4 <HAL_UART_RxCpltCallback>
}
 8004e04:	bf00      	nop
 8004e06:	3770      	adds	r7, #112	; 0x70
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e18:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d108      	bne.n	8004e3a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e2c:	085b      	lsrs	r3, r3, #1
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	4619      	mov	r1, r3
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	f7fc f954 	bl	80010e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004e38:	e002      	b.n	8004e40 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f7ff fee3 	bl	8004c06 <HAL_UART_RxHalfCpltCallback>
}
 8004e40:	bf00      	nop
 8004e42:	3710      	adds	r7, #16
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004e50:	2300      	movs	r3, #0
 8004e52:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e58:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	bf14      	ite	ne
 8004e68:	2301      	movne	r3, #1
 8004e6a:	2300      	moveq	r3, #0
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	2b21      	cmp	r3, #33	; 0x21
 8004e7a:	d108      	bne.n	8004e8e <UART_DMAError+0x46>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d005      	beq.n	8004e8e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	2200      	movs	r2, #0
 8004e86:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004e88:	68b8      	ldr	r0, [r7, #8]
 8004e8a:	f000 f8c1 	bl	8005010 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	695b      	ldr	r3, [r3, #20]
 8004e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	bf14      	ite	ne
 8004e9c:	2301      	movne	r3, #1
 8004e9e:	2300      	moveq	r3, #0
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	2b22      	cmp	r3, #34	; 0x22
 8004eae:	d108      	bne.n	8004ec2 <UART_DMAError+0x7a>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d005      	beq.n	8004ec2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004ebc:	68b8      	ldr	r0, [r7, #8]
 8004ebe:	f000 f8ce 	bl	800505e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec6:	f043 0210 	orr.w	r2, r3, #16
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ece:	68b8      	ldr	r0, [r7, #8]
 8004ed0:	f7ff fea2 	bl	8004c18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ed4:	bf00      	nop
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b098      	sub	sp, #96	; 0x60
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004eea:	68ba      	ldr	r2, [r7, #8]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	88fa      	ldrh	r2, [r7, #6]
 8004ef4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2222      	movs	r2, #34	; 0x22
 8004f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f08:	4a3e      	ldr	r2, [pc, #248]	; (8005004 <UART_Start_Receive_DMA+0x128>)
 8004f0a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f10:	4a3d      	ldr	r2, [pc, #244]	; (8005008 <UART_Start_Receive_DMA+0x12c>)
 8004f12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f18:	4a3c      	ldr	r2, [pc, #240]	; (800500c <UART_Start_Receive_DMA+0x130>)
 8004f1a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f20:	2200      	movs	r2, #0
 8004f22:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004f24:	f107 0308 	add.w	r3, r7, #8
 8004f28:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	3304      	adds	r3, #4
 8004f34:	4619      	mov	r1, r3
 8004f36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	88fb      	ldrh	r3, [r7, #6]
 8004f3c:	f7fd fbde 	bl	80026fc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004f40:	2300      	movs	r3, #0
 8004f42:	613b      	str	r3, [r7, #16]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	613b      	str	r3, [r7, #16]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	613b      	str	r3, [r7, #16]
 8004f54:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d019      	beq.n	8004f92 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	330c      	adds	r3, #12
 8004f64:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f68:	e853 3f00 	ldrex	r3, [r3]
 8004f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f74:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	330c      	adds	r3, #12
 8004f7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f7e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004f80:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f82:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004f84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f86:	e841 2300 	strex	r3, r2, [r1]
 8004f8a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004f8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1e5      	bne.n	8004f5e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	3314      	adds	r3, #20
 8004f98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f9c:	e853 3f00 	ldrex	r3, [r3]
 8004fa0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa4:	f043 0301 	orr.w	r3, r3, #1
 8004fa8:	657b      	str	r3, [r7, #84]	; 0x54
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	3314      	adds	r3, #20
 8004fb0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004fb2:	63ba      	str	r2, [r7, #56]	; 0x38
 8004fb4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004fb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fba:	e841 2300 	strex	r3, r2, [r1]
 8004fbe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1e5      	bne.n	8004f92 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	3314      	adds	r3, #20
 8004fcc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	e853 3f00 	ldrex	r3, [r3]
 8004fd4:	617b      	str	r3, [r7, #20]
   return(result);
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fdc:	653b      	str	r3, [r7, #80]	; 0x50
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	3314      	adds	r3, #20
 8004fe4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004fe6:	627a      	str	r2, [r7, #36]	; 0x24
 8004fe8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fea:	6a39      	ldr	r1, [r7, #32]
 8004fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fee:	e841 2300 	strex	r3, r2, [r1]
 8004ff2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1e5      	bne.n	8004fc6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3760      	adds	r7, #96	; 0x60
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	08004ce1 	.word	0x08004ce1
 8005008:	08004e0d 	.word	0x08004e0d
 800500c:	08004e49 	.word	0x08004e49

08005010 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005010:	b480      	push	{r7}
 8005012:	b089      	sub	sp, #36	; 0x24
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	330c      	adds	r3, #12
 800501e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	e853 3f00 	ldrex	r3, [r3]
 8005026:	60bb      	str	r3, [r7, #8]
   return(result);
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800502e:	61fb      	str	r3, [r7, #28]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	330c      	adds	r3, #12
 8005036:	69fa      	ldr	r2, [r7, #28]
 8005038:	61ba      	str	r2, [r7, #24]
 800503a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503c:	6979      	ldr	r1, [r7, #20]
 800503e:	69ba      	ldr	r2, [r7, #24]
 8005040:	e841 2300 	strex	r3, r2, [r1]
 8005044:	613b      	str	r3, [r7, #16]
   return(result);
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1e5      	bne.n	8005018 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2220      	movs	r2, #32
 8005050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8005054:	bf00      	nop
 8005056:	3724      	adds	r7, #36	; 0x24
 8005058:	46bd      	mov	sp, r7
 800505a:	bc80      	pop	{r7}
 800505c:	4770      	bx	lr

0800505e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800505e:	b480      	push	{r7}
 8005060:	b095      	sub	sp, #84	; 0x54
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	330c      	adds	r3, #12
 800506c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005070:	e853 3f00 	ldrex	r3, [r3]
 8005074:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005078:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800507c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	330c      	adds	r3, #12
 8005084:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005086:	643a      	str	r2, [r7, #64]	; 0x40
 8005088:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800508c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800508e:	e841 2300 	strex	r3, r2, [r1]
 8005092:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1e5      	bne.n	8005066 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	3314      	adds	r3, #20
 80050a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a2:	6a3b      	ldr	r3, [r7, #32]
 80050a4:	e853 3f00 	ldrex	r3, [r3]
 80050a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	f023 0301 	bic.w	r3, r3, #1
 80050b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	3314      	adds	r3, #20
 80050b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050c2:	e841 2300 	strex	r3, r2, [r1]
 80050c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1e5      	bne.n	800509a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d119      	bne.n	800510a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	330c      	adds	r3, #12
 80050dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	e853 3f00 	ldrex	r3, [r3]
 80050e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	f023 0310 	bic.w	r3, r3, #16
 80050ec:	647b      	str	r3, [r7, #68]	; 0x44
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	330c      	adds	r3, #12
 80050f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050f6:	61ba      	str	r2, [r7, #24]
 80050f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fa:	6979      	ldr	r1, [r7, #20]
 80050fc:	69ba      	ldr	r2, [r7, #24]
 80050fe:	e841 2300 	strex	r3, r2, [r1]
 8005102:	613b      	str	r3, [r7, #16]
   return(result);
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1e5      	bne.n	80050d6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2220      	movs	r2, #32
 800510e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005118:	bf00      	nop
 800511a:	3754      	adds	r7, #84	; 0x54
 800511c:	46bd      	mov	sp, r7
 800511e:	bc80      	pop	{r7}
 8005120:	4770      	bx	lr

08005122 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005122:	b580      	push	{r7, lr}
 8005124:	b084      	sub	sp, #16
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	f7ff fd6b 	bl	8004c18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005142:	bf00      	nop
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800514a:	b480      	push	{r7}
 800514c:	b085      	sub	sp, #20
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b21      	cmp	r3, #33	; 0x21
 800515c:	d13e      	bne.n	80051dc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005166:	d114      	bne.n	8005192 <UART_Transmit_IT+0x48>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d110      	bne.n	8005192 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a1b      	ldr	r3, [r3, #32]
 8005174:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	881b      	ldrh	r3, [r3, #0]
 800517a:	461a      	mov	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005184:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a1b      	ldr	r3, [r3, #32]
 800518a:	1c9a      	adds	r2, r3, #2
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	621a      	str	r2, [r3, #32]
 8005190:	e008      	b.n	80051a4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	1c59      	adds	r1, r3, #1
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	6211      	str	r1, [r2, #32]
 800519c:	781a      	ldrb	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	3b01      	subs	r3, #1
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	4619      	mov	r1, r3
 80051b2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d10f      	bne.n	80051d8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68da      	ldr	r2, [r3, #12]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68da      	ldr	r2, [r3, #12]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80051d8:	2300      	movs	r3, #0
 80051da:	e000      	b.n	80051de <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80051dc:	2302      	movs	r3, #2
  }
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3714      	adds	r7, #20
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bc80      	pop	{r7}
 80051e6:	4770      	bx	lr

080051e8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68da      	ldr	r2, [r3, #12]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051fe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2220      	movs	r2, #32
 8005204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f7ff fce1 	bl	8004bd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	4618      	mov	r0, r3
 8005212:	3708      	adds	r7, #8
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b08c      	sub	sp, #48	; 0x30
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005226:	b2db      	uxtb	r3, r3
 8005228:	2b22      	cmp	r3, #34	; 0x22
 800522a:	f040 80ae 	bne.w	800538a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005236:	d117      	bne.n	8005268 <UART_Receive_IT+0x50>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d113      	bne.n	8005268 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005240:	2300      	movs	r3, #0
 8005242:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005248:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	b29b      	uxth	r3, r3
 8005252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005256:	b29a      	uxth	r2, r3
 8005258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005260:	1c9a      	adds	r2, r3, #2
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	629a      	str	r2, [r3, #40]	; 0x28
 8005266:	e026      	b.n	80052b6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800526c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800526e:	2300      	movs	r3, #0
 8005270:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800527a:	d007      	beq.n	800528c <UART_Receive_IT+0x74>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10a      	bne.n	800529a <UART_Receive_IT+0x82>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d106      	bne.n	800529a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	b2da      	uxtb	r2, r3
 8005294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005296:	701a      	strb	r2, [r3, #0]
 8005298:	e008      	b.n	80052ac <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052a6:	b2da      	uxtb	r2, r3
 80052a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052aa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b0:	1c5a      	adds	r2, r3, #1
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	3b01      	subs	r3, #1
 80052be:	b29b      	uxth	r3, r3
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	4619      	mov	r1, r3
 80052c4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d15d      	bne.n	8005386 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68da      	ldr	r2, [r3, #12]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f022 0220 	bic.w	r2, r2, #32
 80052d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68da      	ldr	r2, [r3, #12]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	695a      	ldr	r2, [r3, #20]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f022 0201 	bic.w	r2, r2, #1
 80052f8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2220      	movs	r2, #32
 80052fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530c:	2b01      	cmp	r3, #1
 800530e:	d135      	bne.n	800537c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	330c      	adds	r3, #12
 800531c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	e853 3f00 	ldrex	r3, [r3]
 8005324:	613b      	str	r3, [r7, #16]
   return(result);
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	f023 0310 	bic.w	r3, r3, #16
 800532c:	627b      	str	r3, [r7, #36]	; 0x24
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	330c      	adds	r3, #12
 8005334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005336:	623a      	str	r2, [r7, #32]
 8005338:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533a:	69f9      	ldr	r1, [r7, #28]
 800533c:	6a3a      	ldr	r2, [r7, #32]
 800533e:	e841 2300 	strex	r3, r2, [r1]
 8005342:	61bb      	str	r3, [r7, #24]
   return(result);
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1e5      	bne.n	8005316 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0310 	and.w	r3, r3, #16
 8005354:	2b10      	cmp	r3, #16
 8005356:	d10a      	bne.n	800536e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005358:	2300      	movs	r3, #0
 800535a:	60fb      	str	r3, [r7, #12]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	60fb      	str	r3, [r7, #12]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	60fb      	str	r3, [r7, #12]
 800536c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005372:	4619      	mov	r1, r3
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f7fb feb3 	bl	80010e0 <HAL_UARTEx_RxEventCallback>
 800537a:	e002      	b.n	8005382 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f7ff fc39 	bl	8004bf4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005382:	2300      	movs	r3, #0
 8005384:	e002      	b.n	800538c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005386:	2300      	movs	r3, #0
 8005388:	e000      	b.n	800538c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800538a:	2302      	movs	r3, #2
  }
}
 800538c:	4618      	mov	r0, r3
 800538e:	3730      	adds	r7, #48	; 0x30
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68da      	ldr	r2, [r3, #12]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	430a      	orrs	r2, r1
 80053b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	689a      	ldr	r2, [r3, #8]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	431a      	orrs	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80053ce:	f023 030c 	bic.w	r3, r3, #12
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	6812      	ldr	r2, [r2, #0]
 80053d6:	68b9      	ldr	r1, [r7, #8]
 80053d8:	430b      	orrs	r3, r1
 80053da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	699a      	ldr	r2, [r3, #24]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	430a      	orrs	r2, r1
 80053f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a2c      	ldr	r2, [pc, #176]	; (80054a8 <UART_SetConfig+0x114>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d103      	bne.n	8005404 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80053fc:	f7fe f928 	bl	8003650 <HAL_RCC_GetPCLK2Freq>
 8005400:	60f8      	str	r0, [r7, #12]
 8005402:	e002      	b.n	800540a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005404:	f7fe f910 	bl	8003628 <HAL_RCC_GetPCLK1Freq>
 8005408:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	4613      	mov	r3, r2
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	4413      	add	r3, r2
 8005412:	009a      	lsls	r2, r3, #2
 8005414:	441a      	add	r2, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005420:	4a22      	ldr	r2, [pc, #136]	; (80054ac <UART_SetConfig+0x118>)
 8005422:	fba2 2303 	umull	r2, r3, r2, r3
 8005426:	095b      	lsrs	r3, r3, #5
 8005428:	0119      	lsls	r1, r3, #4
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	4613      	mov	r3, r2
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	4413      	add	r3, r2
 8005432:	009a      	lsls	r2, r3, #2
 8005434:	441a      	add	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005440:	4b1a      	ldr	r3, [pc, #104]	; (80054ac <UART_SetConfig+0x118>)
 8005442:	fba3 0302 	umull	r0, r3, r3, r2
 8005446:	095b      	lsrs	r3, r3, #5
 8005448:	2064      	movs	r0, #100	; 0x64
 800544a:	fb00 f303 	mul.w	r3, r0, r3
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	011b      	lsls	r3, r3, #4
 8005452:	3332      	adds	r3, #50	; 0x32
 8005454:	4a15      	ldr	r2, [pc, #84]	; (80054ac <UART_SetConfig+0x118>)
 8005456:	fba2 2303 	umull	r2, r3, r2, r3
 800545a:	095b      	lsrs	r3, r3, #5
 800545c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005460:	4419      	add	r1, r3
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	4613      	mov	r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4413      	add	r3, r2
 800546a:	009a      	lsls	r2, r3, #2
 800546c:	441a      	add	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	fbb2 f2f3 	udiv	r2, r2, r3
 8005478:	4b0c      	ldr	r3, [pc, #48]	; (80054ac <UART_SetConfig+0x118>)
 800547a:	fba3 0302 	umull	r0, r3, r3, r2
 800547e:	095b      	lsrs	r3, r3, #5
 8005480:	2064      	movs	r0, #100	; 0x64
 8005482:	fb00 f303 	mul.w	r3, r0, r3
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	011b      	lsls	r3, r3, #4
 800548a:	3332      	adds	r3, #50	; 0x32
 800548c:	4a07      	ldr	r2, [pc, #28]	; (80054ac <UART_SetConfig+0x118>)
 800548e:	fba2 2303 	umull	r2, r3, r2, r3
 8005492:	095b      	lsrs	r3, r3, #5
 8005494:	f003 020f 	and.w	r2, r3, #15
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	440a      	add	r2, r1
 800549e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80054a0:	bf00      	nop
 80054a2:	3710      	adds	r7, #16
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	40013800 	.word	0x40013800
 80054ac:	51eb851f 	.word	0x51eb851f

080054b0 <atoi>:
 80054b0:	220a      	movs	r2, #10
 80054b2:	2100      	movs	r1, #0
 80054b4:	f000 b87e 	b.w	80055b4 <strtol>

080054b8 <_strtol_l.constprop.0>:
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054be:	4686      	mov	lr, r0
 80054c0:	4690      	mov	r8, r2
 80054c2:	d001      	beq.n	80054c8 <_strtol_l.constprop.0+0x10>
 80054c4:	2b24      	cmp	r3, #36	; 0x24
 80054c6:	d906      	bls.n	80054d6 <_strtol_l.constprop.0+0x1e>
 80054c8:	f000 fe54 	bl	8006174 <__errno>
 80054cc:	2316      	movs	r3, #22
 80054ce:	6003      	str	r3, [r0, #0]
 80054d0:	2000      	movs	r0, #0
 80054d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054d6:	460d      	mov	r5, r1
 80054d8:	4835      	ldr	r0, [pc, #212]	; (80055b0 <_strtol_l.constprop.0+0xf8>)
 80054da:	462a      	mov	r2, r5
 80054dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80054e0:	5d06      	ldrb	r6, [r0, r4]
 80054e2:	f016 0608 	ands.w	r6, r6, #8
 80054e6:	d1f8      	bne.n	80054da <_strtol_l.constprop.0+0x22>
 80054e8:	2c2d      	cmp	r4, #45	; 0x2d
 80054ea:	d12e      	bne.n	800554a <_strtol_l.constprop.0+0x92>
 80054ec:	2601      	movs	r6, #1
 80054ee:	782c      	ldrb	r4, [r5, #0]
 80054f0:	1c95      	adds	r5, r2, #2
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d057      	beq.n	80055a6 <_strtol_l.constprop.0+0xee>
 80054f6:	2b10      	cmp	r3, #16
 80054f8:	d109      	bne.n	800550e <_strtol_l.constprop.0+0x56>
 80054fa:	2c30      	cmp	r4, #48	; 0x30
 80054fc:	d107      	bne.n	800550e <_strtol_l.constprop.0+0x56>
 80054fe:	782a      	ldrb	r2, [r5, #0]
 8005500:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8005504:	2a58      	cmp	r2, #88	; 0x58
 8005506:	d149      	bne.n	800559c <_strtol_l.constprop.0+0xe4>
 8005508:	2310      	movs	r3, #16
 800550a:	786c      	ldrb	r4, [r5, #1]
 800550c:	3502      	adds	r5, #2
 800550e:	2200      	movs	r2, #0
 8005510:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8005514:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005518:	fbbc f9f3 	udiv	r9, ip, r3
 800551c:	4610      	mov	r0, r2
 800551e:	fb03 ca19 	mls	sl, r3, r9, ip
 8005522:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8005526:	2f09      	cmp	r7, #9
 8005528:	d814      	bhi.n	8005554 <_strtol_l.constprop.0+0x9c>
 800552a:	463c      	mov	r4, r7
 800552c:	42a3      	cmp	r3, r4
 800552e:	dd20      	ble.n	8005572 <_strtol_l.constprop.0+0xba>
 8005530:	1c57      	adds	r7, r2, #1
 8005532:	d007      	beq.n	8005544 <_strtol_l.constprop.0+0x8c>
 8005534:	4581      	cmp	r9, r0
 8005536:	d319      	bcc.n	800556c <_strtol_l.constprop.0+0xb4>
 8005538:	d101      	bne.n	800553e <_strtol_l.constprop.0+0x86>
 800553a:	45a2      	cmp	sl, r4
 800553c:	db16      	blt.n	800556c <_strtol_l.constprop.0+0xb4>
 800553e:	2201      	movs	r2, #1
 8005540:	fb00 4003 	mla	r0, r0, r3, r4
 8005544:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005548:	e7eb      	b.n	8005522 <_strtol_l.constprop.0+0x6a>
 800554a:	2c2b      	cmp	r4, #43	; 0x2b
 800554c:	bf04      	itt	eq
 800554e:	782c      	ldrbeq	r4, [r5, #0]
 8005550:	1c95      	addeq	r5, r2, #2
 8005552:	e7ce      	b.n	80054f2 <_strtol_l.constprop.0+0x3a>
 8005554:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005558:	2f19      	cmp	r7, #25
 800555a:	d801      	bhi.n	8005560 <_strtol_l.constprop.0+0xa8>
 800555c:	3c37      	subs	r4, #55	; 0x37
 800555e:	e7e5      	b.n	800552c <_strtol_l.constprop.0+0x74>
 8005560:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8005564:	2f19      	cmp	r7, #25
 8005566:	d804      	bhi.n	8005572 <_strtol_l.constprop.0+0xba>
 8005568:	3c57      	subs	r4, #87	; 0x57
 800556a:	e7df      	b.n	800552c <_strtol_l.constprop.0+0x74>
 800556c:	f04f 32ff 	mov.w	r2, #4294967295
 8005570:	e7e8      	b.n	8005544 <_strtol_l.constprop.0+0x8c>
 8005572:	1c53      	adds	r3, r2, #1
 8005574:	d108      	bne.n	8005588 <_strtol_l.constprop.0+0xd0>
 8005576:	2322      	movs	r3, #34	; 0x22
 8005578:	4660      	mov	r0, ip
 800557a:	f8ce 3000 	str.w	r3, [lr]
 800557e:	f1b8 0f00 	cmp.w	r8, #0
 8005582:	d0a6      	beq.n	80054d2 <_strtol_l.constprop.0+0x1a>
 8005584:	1e69      	subs	r1, r5, #1
 8005586:	e006      	b.n	8005596 <_strtol_l.constprop.0+0xde>
 8005588:	b106      	cbz	r6, 800558c <_strtol_l.constprop.0+0xd4>
 800558a:	4240      	negs	r0, r0
 800558c:	f1b8 0f00 	cmp.w	r8, #0
 8005590:	d09f      	beq.n	80054d2 <_strtol_l.constprop.0+0x1a>
 8005592:	2a00      	cmp	r2, #0
 8005594:	d1f6      	bne.n	8005584 <_strtol_l.constprop.0+0xcc>
 8005596:	f8c8 1000 	str.w	r1, [r8]
 800559a:	e79a      	b.n	80054d2 <_strtol_l.constprop.0+0x1a>
 800559c:	2430      	movs	r4, #48	; 0x30
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1b5      	bne.n	800550e <_strtol_l.constprop.0+0x56>
 80055a2:	2308      	movs	r3, #8
 80055a4:	e7b3      	b.n	800550e <_strtol_l.constprop.0+0x56>
 80055a6:	2c30      	cmp	r4, #48	; 0x30
 80055a8:	d0a9      	beq.n	80054fe <_strtol_l.constprop.0+0x46>
 80055aa:	230a      	movs	r3, #10
 80055ac:	e7af      	b.n	800550e <_strtol_l.constprop.0+0x56>
 80055ae:	bf00      	nop
 80055b0:	08008307 	.word	0x08008307

080055b4 <strtol>:
 80055b4:	4613      	mov	r3, r2
 80055b6:	460a      	mov	r2, r1
 80055b8:	4601      	mov	r1, r0
 80055ba:	4802      	ldr	r0, [pc, #8]	; (80055c4 <strtol+0x10>)
 80055bc:	6800      	ldr	r0, [r0, #0]
 80055be:	f7ff bf7b 	b.w	80054b8 <_strtol_l.constprop.0>
 80055c2:	bf00      	nop
 80055c4:	20000064 	.word	0x20000064

080055c8 <__cvt>:
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055ce:	461f      	mov	r7, r3
 80055d0:	bfbb      	ittet	lt
 80055d2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80055d6:	461f      	movlt	r7, r3
 80055d8:	2300      	movge	r3, #0
 80055da:	232d      	movlt	r3, #45	; 0x2d
 80055dc:	b088      	sub	sp, #32
 80055de:	4614      	mov	r4, r2
 80055e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80055e2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80055e4:	7013      	strb	r3, [r2, #0]
 80055e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80055e8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80055ec:	f023 0820 	bic.w	r8, r3, #32
 80055f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80055f4:	d005      	beq.n	8005602 <__cvt+0x3a>
 80055f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80055fa:	d100      	bne.n	80055fe <__cvt+0x36>
 80055fc:	3501      	adds	r5, #1
 80055fe:	2302      	movs	r3, #2
 8005600:	e000      	b.n	8005604 <__cvt+0x3c>
 8005602:	2303      	movs	r3, #3
 8005604:	aa07      	add	r2, sp, #28
 8005606:	9204      	str	r2, [sp, #16]
 8005608:	aa06      	add	r2, sp, #24
 800560a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800560e:	e9cd 3500 	strd	r3, r5, [sp]
 8005612:	4622      	mov	r2, r4
 8005614:	463b      	mov	r3, r7
 8005616:	f000 fe73 	bl	8006300 <_dtoa_r>
 800561a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800561e:	4606      	mov	r6, r0
 8005620:	d102      	bne.n	8005628 <__cvt+0x60>
 8005622:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005624:	07db      	lsls	r3, r3, #31
 8005626:	d522      	bpl.n	800566e <__cvt+0xa6>
 8005628:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800562c:	eb06 0905 	add.w	r9, r6, r5
 8005630:	d110      	bne.n	8005654 <__cvt+0x8c>
 8005632:	7833      	ldrb	r3, [r6, #0]
 8005634:	2b30      	cmp	r3, #48	; 0x30
 8005636:	d10a      	bne.n	800564e <__cvt+0x86>
 8005638:	2200      	movs	r2, #0
 800563a:	2300      	movs	r3, #0
 800563c:	4620      	mov	r0, r4
 800563e:	4639      	mov	r1, r7
 8005640:	f7fb f9b2 	bl	80009a8 <__aeabi_dcmpeq>
 8005644:	b918      	cbnz	r0, 800564e <__cvt+0x86>
 8005646:	f1c5 0501 	rsb	r5, r5, #1
 800564a:	f8ca 5000 	str.w	r5, [sl]
 800564e:	f8da 3000 	ldr.w	r3, [sl]
 8005652:	4499      	add	r9, r3
 8005654:	2200      	movs	r2, #0
 8005656:	2300      	movs	r3, #0
 8005658:	4620      	mov	r0, r4
 800565a:	4639      	mov	r1, r7
 800565c:	f7fb f9a4 	bl	80009a8 <__aeabi_dcmpeq>
 8005660:	b108      	cbz	r0, 8005666 <__cvt+0x9e>
 8005662:	f8cd 901c 	str.w	r9, [sp, #28]
 8005666:	2230      	movs	r2, #48	; 0x30
 8005668:	9b07      	ldr	r3, [sp, #28]
 800566a:	454b      	cmp	r3, r9
 800566c:	d307      	bcc.n	800567e <__cvt+0xb6>
 800566e:	4630      	mov	r0, r6
 8005670:	9b07      	ldr	r3, [sp, #28]
 8005672:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005674:	1b9b      	subs	r3, r3, r6
 8005676:	6013      	str	r3, [r2, #0]
 8005678:	b008      	add	sp, #32
 800567a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800567e:	1c59      	adds	r1, r3, #1
 8005680:	9107      	str	r1, [sp, #28]
 8005682:	701a      	strb	r2, [r3, #0]
 8005684:	e7f0      	b.n	8005668 <__cvt+0xa0>

08005686 <__exponent>:
 8005686:	4603      	mov	r3, r0
 8005688:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800568a:	2900      	cmp	r1, #0
 800568c:	f803 2b02 	strb.w	r2, [r3], #2
 8005690:	bfb6      	itet	lt
 8005692:	222d      	movlt	r2, #45	; 0x2d
 8005694:	222b      	movge	r2, #43	; 0x2b
 8005696:	4249      	neglt	r1, r1
 8005698:	2909      	cmp	r1, #9
 800569a:	7042      	strb	r2, [r0, #1]
 800569c:	dd2a      	ble.n	80056f4 <__exponent+0x6e>
 800569e:	f10d 0207 	add.w	r2, sp, #7
 80056a2:	4617      	mov	r7, r2
 80056a4:	260a      	movs	r6, #10
 80056a6:	fb91 f5f6 	sdiv	r5, r1, r6
 80056aa:	4694      	mov	ip, r2
 80056ac:	fb06 1415 	mls	r4, r6, r5, r1
 80056b0:	3430      	adds	r4, #48	; 0x30
 80056b2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80056b6:	460c      	mov	r4, r1
 80056b8:	2c63      	cmp	r4, #99	; 0x63
 80056ba:	4629      	mov	r1, r5
 80056bc:	f102 32ff 	add.w	r2, r2, #4294967295
 80056c0:	dcf1      	bgt.n	80056a6 <__exponent+0x20>
 80056c2:	3130      	adds	r1, #48	; 0x30
 80056c4:	f1ac 0402 	sub.w	r4, ip, #2
 80056c8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80056cc:	4622      	mov	r2, r4
 80056ce:	1c41      	adds	r1, r0, #1
 80056d0:	42ba      	cmp	r2, r7
 80056d2:	d30a      	bcc.n	80056ea <__exponent+0x64>
 80056d4:	f10d 0209 	add.w	r2, sp, #9
 80056d8:	eba2 020c 	sub.w	r2, r2, ip
 80056dc:	42bc      	cmp	r4, r7
 80056de:	bf88      	it	hi
 80056e0:	2200      	movhi	r2, #0
 80056e2:	4413      	add	r3, r2
 80056e4:	1a18      	subs	r0, r3, r0
 80056e6:	b003      	add	sp, #12
 80056e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056ea:	f812 5b01 	ldrb.w	r5, [r2], #1
 80056ee:	f801 5f01 	strb.w	r5, [r1, #1]!
 80056f2:	e7ed      	b.n	80056d0 <__exponent+0x4a>
 80056f4:	2330      	movs	r3, #48	; 0x30
 80056f6:	3130      	adds	r1, #48	; 0x30
 80056f8:	7083      	strb	r3, [r0, #2]
 80056fa:	70c1      	strb	r1, [r0, #3]
 80056fc:	1d03      	adds	r3, r0, #4
 80056fe:	e7f1      	b.n	80056e4 <__exponent+0x5e>

08005700 <_printf_float>:
 8005700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005704:	b091      	sub	sp, #68	; 0x44
 8005706:	460c      	mov	r4, r1
 8005708:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800570c:	4616      	mov	r6, r2
 800570e:	461f      	mov	r7, r3
 8005710:	4605      	mov	r5, r0
 8005712:	f000 fce5 	bl	80060e0 <_localeconv_r>
 8005716:	6803      	ldr	r3, [r0, #0]
 8005718:	4618      	mov	r0, r3
 800571a:	9309      	str	r3, [sp, #36]	; 0x24
 800571c:	f7fa fd18 	bl	8000150 <strlen>
 8005720:	2300      	movs	r3, #0
 8005722:	930e      	str	r3, [sp, #56]	; 0x38
 8005724:	f8d8 3000 	ldr.w	r3, [r8]
 8005728:	900a      	str	r0, [sp, #40]	; 0x28
 800572a:	3307      	adds	r3, #7
 800572c:	f023 0307 	bic.w	r3, r3, #7
 8005730:	f103 0208 	add.w	r2, r3, #8
 8005734:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005738:	f8d4 b000 	ldr.w	fp, [r4]
 800573c:	f8c8 2000 	str.w	r2, [r8]
 8005740:	e9d3 a800 	ldrd	sl, r8, [r3]
 8005744:	4652      	mov	r2, sl
 8005746:	4643      	mov	r3, r8
 8005748:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800574c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8005750:	930b      	str	r3, [sp, #44]	; 0x2c
 8005752:	f04f 32ff 	mov.w	r2, #4294967295
 8005756:	4650      	mov	r0, sl
 8005758:	4b9c      	ldr	r3, [pc, #624]	; (80059cc <_printf_float+0x2cc>)
 800575a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800575c:	f7fb f956 	bl	8000a0c <__aeabi_dcmpun>
 8005760:	bb70      	cbnz	r0, 80057c0 <_printf_float+0xc0>
 8005762:	f04f 32ff 	mov.w	r2, #4294967295
 8005766:	4650      	mov	r0, sl
 8005768:	4b98      	ldr	r3, [pc, #608]	; (80059cc <_printf_float+0x2cc>)
 800576a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800576c:	f7fb f930 	bl	80009d0 <__aeabi_dcmple>
 8005770:	bb30      	cbnz	r0, 80057c0 <_printf_float+0xc0>
 8005772:	2200      	movs	r2, #0
 8005774:	2300      	movs	r3, #0
 8005776:	4650      	mov	r0, sl
 8005778:	4641      	mov	r1, r8
 800577a:	f7fb f91f 	bl	80009bc <__aeabi_dcmplt>
 800577e:	b110      	cbz	r0, 8005786 <_printf_float+0x86>
 8005780:	232d      	movs	r3, #45	; 0x2d
 8005782:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005786:	4a92      	ldr	r2, [pc, #584]	; (80059d0 <_printf_float+0x2d0>)
 8005788:	4b92      	ldr	r3, [pc, #584]	; (80059d4 <_printf_float+0x2d4>)
 800578a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800578e:	bf94      	ite	ls
 8005790:	4690      	movls	r8, r2
 8005792:	4698      	movhi	r8, r3
 8005794:	2303      	movs	r3, #3
 8005796:	f04f 0a00 	mov.w	sl, #0
 800579a:	6123      	str	r3, [r4, #16]
 800579c:	f02b 0304 	bic.w	r3, fp, #4
 80057a0:	6023      	str	r3, [r4, #0]
 80057a2:	4633      	mov	r3, r6
 80057a4:	4621      	mov	r1, r4
 80057a6:	4628      	mov	r0, r5
 80057a8:	9700      	str	r7, [sp, #0]
 80057aa:	aa0f      	add	r2, sp, #60	; 0x3c
 80057ac:	f000 f9d6 	bl	8005b5c <_printf_common>
 80057b0:	3001      	adds	r0, #1
 80057b2:	f040 8090 	bne.w	80058d6 <_printf_float+0x1d6>
 80057b6:	f04f 30ff 	mov.w	r0, #4294967295
 80057ba:	b011      	add	sp, #68	; 0x44
 80057bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057c0:	4652      	mov	r2, sl
 80057c2:	4643      	mov	r3, r8
 80057c4:	4650      	mov	r0, sl
 80057c6:	4641      	mov	r1, r8
 80057c8:	f7fb f920 	bl	8000a0c <__aeabi_dcmpun>
 80057cc:	b148      	cbz	r0, 80057e2 <_printf_float+0xe2>
 80057ce:	f1b8 0f00 	cmp.w	r8, #0
 80057d2:	bfb8      	it	lt
 80057d4:	232d      	movlt	r3, #45	; 0x2d
 80057d6:	4a80      	ldr	r2, [pc, #512]	; (80059d8 <_printf_float+0x2d8>)
 80057d8:	bfb8      	it	lt
 80057da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80057de:	4b7f      	ldr	r3, [pc, #508]	; (80059dc <_printf_float+0x2dc>)
 80057e0:	e7d3      	b.n	800578a <_printf_float+0x8a>
 80057e2:	6863      	ldr	r3, [r4, #4]
 80057e4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80057e8:	1c5a      	adds	r2, r3, #1
 80057ea:	d142      	bne.n	8005872 <_printf_float+0x172>
 80057ec:	2306      	movs	r3, #6
 80057ee:	6063      	str	r3, [r4, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	9206      	str	r2, [sp, #24]
 80057f4:	aa0e      	add	r2, sp, #56	; 0x38
 80057f6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80057fa:	aa0d      	add	r2, sp, #52	; 0x34
 80057fc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005800:	9203      	str	r2, [sp, #12]
 8005802:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005806:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800580a:	6023      	str	r3, [r4, #0]
 800580c:	6863      	ldr	r3, [r4, #4]
 800580e:	4652      	mov	r2, sl
 8005810:	9300      	str	r3, [sp, #0]
 8005812:	4628      	mov	r0, r5
 8005814:	4643      	mov	r3, r8
 8005816:	910b      	str	r1, [sp, #44]	; 0x2c
 8005818:	f7ff fed6 	bl	80055c8 <__cvt>
 800581c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800581e:	4680      	mov	r8, r0
 8005820:	2947      	cmp	r1, #71	; 0x47
 8005822:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005824:	d108      	bne.n	8005838 <_printf_float+0x138>
 8005826:	1cc8      	adds	r0, r1, #3
 8005828:	db02      	blt.n	8005830 <_printf_float+0x130>
 800582a:	6863      	ldr	r3, [r4, #4]
 800582c:	4299      	cmp	r1, r3
 800582e:	dd40      	ble.n	80058b2 <_printf_float+0x1b2>
 8005830:	f1a9 0902 	sub.w	r9, r9, #2
 8005834:	fa5f f989 	uxtb.w	r9, r9
 8005838:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800583c:	d81f      	bhi.n	800587e <_printf_float+0x17e>
 800583e:	464a      	mov	r2, r9
 8005840:	3901      	subs	r1, #1
 8005842:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005846:	910d      	str	r1, [sp, #52]	; 0x34
 8005848:	f7ff ff1d 	bl	8005686 <__exponent>
 800584c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800584e:	4682      	mov	sl, r0
 8005850:	1813      	adds	r3, r2, r0
 8005852:	2a01      	cmp	r2, #1
 8005854:	6123      	str	r3, [r4, #16]
 8005856:	dc02      	bgt.n	800585e <_printf_float+0x15e>
 8005858:	6822      	ldr	r2, [r4, #0]
 800585a:	07d2      	lsls	r2, r2, #31
 800585c:	d501      	bpl.n	8005862 <_printf_float+0x162>
 800585e:	3301      	adds	r3, #1
 8005860:	6123      	str	r3, [r4, #16]
 8005862:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005866:	2b00      	cmp	r3, #0
 8005868:	d09b      	beq.n	80057a2 <_printf_float+0xa2>
 800586a:	232d      	movs	r3, #45	; 0x2d
 800586c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005870:	e797      	b.n	80057a2 <_printf_float+0xa2>
 8005872:	2947      	cmp	r1, #71	; 0x47
 8005874:	d1bc      	bne.n	80057f0 <_printf_float+0xf0>
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1ba      	bne.n	80057f0 <_printf_float+0xf0>
 800587a:	2301      	movs	r3, #1
 800587c:	e7b7      	b.n	80057ee <_printf_float+0xee>
 800587e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005882:	d118      	bne.n	80058b6 <_printf_float+0x1b6>
 8005884:	2900      	cmp	r1, #0
 8005886:	6863      	ldr	r3, [r4, #4]
 8005888:	dd0b      	ble.n	80058a2 <_printf_float+0x1a2>
 800588a:	6121      	str	r1, [r4, #16]
 800588c:	b913      	cbnz	r3, 8005894 <_printf_float+0x194>
 800588e:	6822      	ldr	r2, [r4, #0]
 8005890:	07d0      	lsls	r0, r2, #31
 8005892:	d502      	bpl.n	800589a <_printf_float+0x19a>
 8005894:	3301      	adds	r3, #1
 8005896:	440b      	add	r3, r1
 8005898:	6123      	str	r3, [r4, #16]
 800589a:	f04f 0a00 	mov.w	sl, #0
 800589e:	65a1      	str	r1, [r4, #88]	; 0x58
 80058a0:	e7df      	b.n	8005862 <_printf_float+0x162>
 80058a2:	b913      	cbnz	r3, 80058aa <_printf_float+0x1aa>
 80058a4:	6822      	ldr	r2, [r4, #0]
 80058a6:	07d2      	lsls	r2, r2, #31
 80058a8:	d501      	bpl.n	80058ae <_printf_float+0x1ae>
 80058aa:	3302      	adds	r3, #2
 80058ac:	e7f4      	b.n	8005898 <_printf_float+0x198>
 80058ae:	2301      	movs	r3, #1
 80058b0:	e7f2      	b.n	8005898 <_printf_float+0x198>
 80058b2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80058b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058b8:	4299      	cmp	r1, r3
 80058ba:	db05      	blt.n	80058c8 <_printf_float+0x1c8>
 80058bc:	6823      	ldr	r3, [r4, #0]
 80058be:	6121      	str	r1, [r4, #16]
 80058c0:	07d8      	lsls	r0, r3, #31
 80058c2:	d5ea      	bpl.n	800589a <_printf_float+0x19a>
 80058c4:	1c4b      	adds	r3, r1, #1
 80058c6:	e7e7      	b.n	8005898 <_printf_float+0x198>
 80058c8:	2900      	cmp	r1, #0
 80058ca:	bfcc      	ite	gt
 80058cc:	2201      	movgt	r2, #1
 80058ce:	f1c1 0202 	rsble	r2, r1, #2
 80058d2:	4413      	add	r3, r2
 80058d4:	e7e0      	b.n	8005898 <_printf_float+0x198>
 80058d6:	6823      	ldr	r3, [r4, #0]
 80058d8:	055a      	lsls	r2, r3, #21
 80058da:	d407      	bmi.n	80058ec <_printf_float+0x1ec>
 80058dc:	6923      	ldr	r3, [r4, #16]
 80058de:	4642      	mov	r2, r8
 80058e0:	4631      	mov	r1, r6
 80058e2:	4628      	mov	r0, r5
 80058e4:	47b8      	blx	r7
 80058e6:	3001      	adds	r0, #1
 80058e8:	d12b      	bne.n	8005942 <_printf_float+0x242>
 80058ea:	e764      	b.n	80057b6 <_printf_float+0xb6>
 80058ec:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80058f0:	f240 80dd 	bls.w	8005aae <_printf_float+0x3ae>
 80058f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80058f8:	2200      	movs	r2, #0
 80058fa:	2300      	movs	r3, #0
 80058fc:	f7fb f854 	bl	80009a8 <__aeabi_dcmpeq>
 8005900:	2800      	cmp	r0, #0
 8005902:	d033      	beq.n	800596c <_printf_float+0x26c>
 8005904:	2301      	movs	r3, #1
 8005906:	4631      	mov	r1, r6
 8005908:	4628      	mov	r0, r5
 800590a:	4a35      	ldr	r2, [pc, #212]	; (80059e0 <_printf_float+0x2e0>)
 800590c:	47b8      	blx	r7
 800590e:	3001      	adds	r0, #1
 8005910:	f43f af51 	beq.w	80057b6 <_printf_float+0xb6>
 8005914:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005918:	429a      	cmp	r2, r3
 800591a:	db02      	blt.n	8005922 <_printf_float+0x222>
 800591c:	6823      	ldr	r3, [r4, #0]
 800591e:	07d8      	lsls	r0, r3, #31
 8005920:	d50f      	bpl.n	8005942 <_printf_float+0x242>
 8005922:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005926:	4631      	mov	r1, r6
 8005928:	4628      	mov	r0, r5
 800592a:	47b8      	blx	r7
 800592c:	3001      	adds	r0, #1
 800592e:	f43f af42 	beq.w	80057b6 <_printf_float+0xb6>
 8005932:	f04f 0800 	mov.w	r8, #0
 8005936:	f104 091a 	add.w	r9, r4, #26
 800593a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800593c:	3b01      	subs	r3, #1
 800593e:	4543      	cmp	r3, r8
 8005940:	dc09      	bgt.n	8005956 <_printf_float+0x256>
 8005942:	6823      	ldr	r3, [r4, #0]
 8005944:	079b      	lsls	r3, r3, #30
 8005946:	f100 8104 	bmi.w	8005b52 <_printf_float+0x452>
 800594a:	68e0      	ldr	r0, [r4, #12]
 800594c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800594e:	4298      	cmp	r0, r3
 8005950:	bfb8      	it	lt
 8005952:	4618      	movlt	r0, r3
 8005954:	e731      	b.n	80057ba <_printf_float+0xba>
 8005956:	2301      	movs	r3, #1
 8005958:	464a      	mov	r2, r9
 800595a:	4631      	mov	r1, r6
 800595c:	4628      	mov	r0, r5
 800595e:	47b8      	blx	r7
 8005960:	3001      	adds	r0, #1
 8005962:	f43f af28 	beq.w	80057b6 <_printf_float+0xb6>
 8005966:	f108 0801 	add.w	r8, r8, #1
 800596a:	e7e6      	b.n	800593a <_printf_float+0x23a>
 800596c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800596e:	2b00      	cmp	r3, #0
 8005970:	dc38      	bgt.n	80059e4 <_printf_float+0x2e4>
 8005972:	2301      	movs	r3, #1
 8005974:	4631      	mov	r1, r6
 8005976:	4628      	mov	r0, r5
 8005978:	4a19      	ldr	r2, [pc, #100]	; (80059e0 <_printf_float+0x2e0>)
 800597a:	47b8      	blx	r7
 800597c:	3001      	adds	r0, #1
 800597e:	f43f af1a 	beq.w	80057b6 <_printf_float+0xb6>
 8005982:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005986:	4313      	orrs	r3, r2
 8005988:	d102      	bne.n	8005990 <_printf_float+0x290>
 800598a:	6823      	ldr	r3, [r4, #0]
 800598c:	07d9      	lsls	r1, r3, #31
 800598e:	d5d8      	bpl.n	8005942 <_printf_float+0x242>
 8005990:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005994:	4631      	mov	r1, r6
 8005996:	4628      	mov	r0, r5
 8005998:	47b8      	blx	r7
 800599a:	3001      	adds	r0, #1
 800599c:	f43f af0b 	beq.w	80057b6 <_printf_float+0xb6>
 80059a0:	f04f 0900 	mov.w	r9, #0
 80059a4:	f104 0a1a 	add.w	sl, r4, #26
 80059a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059aa:	425b      	negs	r3, r3
 80059ac:	454b      	cmp	r3, r9
 80059ae:	dc01      	bgt.n	80059b4 <_printf_float+0x2b4>
 80059b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059b2:	e794      	b.n	80058de <_printf_float+0x1de>
 80059b4:	2301      	movs	r3, #1
 80059b6:	4652      	mov	r2, sl
 80059b8:	4631      	mov	r1, r6
 80059ba:	4628      	mov	r0, r5
 80059bc:	47b8      	blx	r7
 80059be:	3001      	adds	r0, #1
 80059c0:	f43f aef9 	beq.w	80057b6 <_printf_float+0xb6>
 80059c4:	f109 0901 	add.w	r9, r9, #1
 80059c8:	e7ee      	b.n	80059a8 <_printf_float+0x2a8>
 80059ca:	bf00      	nop
 80059cc:	7fefffff 	.word	0x7fefffff
 80059d0:	08008407 	.word	0x08008407
 80059d4:	0800840b 	.word	0x0800840b
 80059d8:	0800840f 	.word	0x0800840f
 80059dc:	08008413 	.word	0x08008413
 80059e0:	08008417 	.word	0x08008417
 80059e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80059e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80059e8:	429a      	cmp	r2, r3
 80059ea:	bfa8      	it	ge
 80059ec:	461a      	movge	r2, r3
 80059ee:	2a00      	cmp	r2, #0
 80059f0:	4691      	mov	r9, r2
 80059f2:	dc37      	bgt.n	8005a64 <_printf_float+0x364>
 80059f4:	f04f 0b00 	mov.w	fp, #0
 80059f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80059fc:	f104 021a 	add.w	r2, r4, #26
 8005a00:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005a04:	ebaa 0309 	sub.w	r3, sl, r9
 8005a08:	455b      	cmp	r3, fp
 8005a0a:	dc33      	bgt.n	8005a74 <_printf_float+0x374>
 8005a0c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005a10:	429a      	cmp	r2, r3
 8005a12:	db3b      	blt.n	8005a8c <_printf_float+0x38c>
 8005a14:	6823      	ldr	r3, [r4, #0]
 8005a16:	07da      	lsls	r2, r3, #31
 8005a18:	d438      	bmi.n	8005a8c <_printf_float+0x38c>
 8005a1a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005a1e:	eba2 0903 	sub.w	r9, r2, r3
 8005a22:	eba2 020a 	sub.w	r2, r2, sl
 8005a26:	4591      	cmp	r9, r2
 8005a28:	bfa8      	it	ge
 8005a2a:	4691      	movge	r9, r2
 8005a2c:	f1b9 0f00 	cmp.w	r9, #0
 8005a30:	dc34      	bgt.n	8005a9c <_printf_float+0x39c>
 8005a32:	f04f 0800 	mov.w	r8, #0
 8005a36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a3a:	f104 0a1a 	add.w	sl, r4, #26
 8005a3e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005a42:	1a9b      	subs	r3, r3, r2
 8005a44:	eba3 0309 	sub.w	r3, r3, r9
 8005a48:	4543      	cmp	r3, r8
 8005a4a:	f77f af7a 	ble.w	8005942 <_printf_float+0x242>
 8005a4e:	2301      	movs	r3, #1
 8005a50:	4652      	mov	r2, sl
 8005a52:	4631      	mov	r1, r6
 8005a54:	4628      	mov	r0, r5
 8005a56:	47b8      	blx	r7
 8005a58:	3001      	adds	r0, #1
 8005a5a:	f43f aeac 	beq.w	80057b6 <_printf_float+0xb6>
 8005a5e:	f108 0801 	add.w	r8, r8, #1
 8005a62:	e7ec      	b.n	8005a3e <_printf_float+0x33e>
 8005a64:	4613      	mov	r3, r2
 8005a66:	4631      	mov	r1, r6
 8005a68:	4642      	mov	r2, r8
 8005a6a:	4628      	mov	r0, r5
 8005a6c:	47b8      	blx	r7
 8005a6e:	3001      	adds	r0, #1
 8005a70:	d1c0      	bne.n	80059f4 <_printf_float+0x2f4>
 8005a72:	e6a0      	b.n	80057b6 <_printf_float+0xb6>
 8005a74:	2301      	movs	r3, #1
 8005a76:	4631      	mov	r1, r6
 8005a78:	4628      	mov	r0, r5
 8005a7a:	920b      	str	r2, [sp, #44]	; 0x2c
 8005a7c:	47b8      	blx	r7
 8005a7e:	3001      	adds	r0, #1
 8005a80:	f43f ae99 	beq.w	80057b6 <_printf_float+0xb6>
 8005a84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005a86:	f10b 0b01 	add.w	fp, fp, #1
 8005a8a:	e7b9      	b.n	8005a00 <_printf_float+0x300>
 8005a8c:	4631      	mov	r1, r6
 8005a8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a92:	4628      	mov	r0, r5
 8005a94:	47b8      	blx	r7
 8005a96:	3001      	adds	r0, #1
 8005a98:	d1bf      	bne.n	8005a1a <_printf_float+0x31a>
 8005a9a:	e68c      	b.n	80057b6 <_printf_float+0xb6>
 8005a9c:	464b      	mov	r3, r9
 8005a9e:	4631      	mov	r1, r6
 8005aa0:	4628      	mov	r0, r5
 8005aa2:	eb08 020a 	add.w	r2, r8, sl
 8005aa6:	47b8      	blx	r7
 8005aa8:	3001      	adds	r0, #1
 8005aaa:	d1c2      	bne.n	8005a32 <_printf_float+0x332>
 8005aac:	e683      	b.n	80057b6 <_printf_float+0xb6>
 8005aae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ab0:	2a01      	cmp	r2, #1
 8005ab2:	dc01      	bgt.n	8005ab8 <_printf_float+0x3b8>
 8005ab4:	07db      	lsls	r3, r3, #31
 8005ab6:	d539      	bpl.n	8005b2c <_printf_float+0x42c>
 8005ab8:	2301      	movs	r3, #1
 8005aba:	4642      	mov	r2, r8
 8005abc:	4631      	mov	r1, r6
 8005abe:	4628      	mov	r0, r5
 8005ac0:	47b8      	blx	r7
 8005ac2:	3001      	adds	r0, #1
 8005ac4:	f43f ae77 	beq.w	80057b6 <_printf_float+0xb6>
 8005ac8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005acc:	4631      	mov	r1, r6
 8005ace:	4628      	mov	r0, r5
 8005ad0:	47b8      	blx	r7
 8005ad2:	3001      	adds	r0, #1
 8005ad4:	f43f ae6f 	beq.w	80057b6 <_printf_float+0xb6>
 8005ad8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005adc:	2200      	movs	r2, #0
 8005ade:	2300      	movs	r3, #0
 8005ae0:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8005ae4:	f7fa ff60 	bl	80009a8 <__aeabi_dcmpeq>
 8005ae8:	b9d8      	cbnz	r0, 8005b22 <_printf_float+0x422>
 8005aea:	f109 33ff 	add.w	r3, r9, #4294967295
 8005aee:	f108 0201 	add.w	r2, r8, #1
 8005af2:	4631      	mov	r1, r6
 8005af4:	4628      	mov	r0, r5
 8005af6:	47b8      	blx	r7
 8005af8:	3001      	adds	r0, #1
 8005afa:	d10e      	bne.n	8005b1a <_printf_float+0x41a>
 8005afc:	e65b      	b.n	80057b6 <_printf_float+0xb6>
 8005afe:	2301      	movs	r3, #1
 8005b00:	464a      	mov	r2, r9
 8005b02:	4631      	mov	r1, r6
 8005b04:	4628      	mov	r0, r5
 8005b06:	47b8      	blx	r7
 8005b08:	3001      	adds	r0, #1
 8005b0a:	f43f ae54 	beq.w	80057b6 <_printf_float+0xb6>
 8005b0e:	f108 0801 	add.w	r8, r8, #1
 8005b12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b14:	3b01      	subs	r3, #1
 8005b16:	4543      	cmp	r3, r8
 8005b18:	dcf1      	bgt.n	8005afe <_printf_float+0x3fe>
 8005b1a:	4653      	mov	r3, sl
 8005b1c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005b20:	e6de      	b.n	80058e0 <_printf_float+0x1e0>
 8005b22:	f04f 0800 	mov.w	r8, #0
 8005b26:	f104 091a 	add.w	r9, r4, #26
 8005b2a:	e7f2      	b.n	8005b12 <_printf_float+0x412>
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	4642      	mov	r2, r8
 8005b30:	e7df      	b.n	8005af2 <_printf_float+0x3f2>
 8005b32:	2301      	movs	r3, #1
 8005b34:	464a      	mov	r2, r9
 8005b36:	4631      	mov	r1, r6
 8005b38:	4628      	mov	r0, r5
 8005b3a:	47b8      	blx	r7
 8005b3c:	3001      	adds	r0, #1
 8005b3e:	f43f ae3a 	beq.w	80057b6 <_printf_float+0xb6>
 8005b42:	f108 0801 	add.w	r8, r8, #1
 8005b46:	68e3      	ldr	r3, [r4, #12]
 8005b48:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005b4a:	1a5b      	subs	r3, r3, r1
 8005b4c:	4543      	cmp	r3, r8
 8005b4e:	dcf0      	bgt.n	8005b32 <_printf_float+0x432>
 8005b50:	e6fb      	b.n	800594a <_printf_float+0x24a>
 8005b52:	f04f 0800 	mov.w	r8, #0
 8005b56:	f104 0919 	add.w	r9, r4, #25
 8005b5a:	e7f4      	b.n	8005b46 <_printf_float+0x446>

08005b5c <_printf_common>:
 8005b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b60:	4616      	mov	r6, r2
 8005b62:	4699      	mov	r9, r3
 8005b64:	688a      	ldr	r2, [r1, #8]
 8005b66:	690b      	ldr	r3, [r1, #16]
 8005b68:	4607      	mov	r7, r0
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	bfb8      	it	lt
 8005b6e:	4613      	movlt	r3, r2
 8005b70:	6033      	str	r3, [r6, #0]
 8005b72:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b76:	460c      	mov	r4, r1
 8005b78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b7c:	b10a      	cbz	r2, 8005b82 <_printf_common+0x26>
 8005b7e:	3301      	adds	r3, #1
 8005b80:	6033      	str	r3, [r6, #0]
 8005b82:	6823      	ldr	r3, [r4, #0]
 8005b84:	0699      	lsls	r1, r3, #26
 8005b86:	bf42      	ittt	mi
 8005b88:	6833      	ldrmi	r3, [r6, #0]
 8005b8a:	3302      	addmi	r3, #2
 8005b8c:	6033      	strmi	r3, [r6, #0]
 8005b8e:	6825      	ldr	r5, [r4, #0]
 8005b90:	f015 0506 	ands.w	r5, r5, #6
 8005b94:	d106      	bne.n	8005ba4 <_printf_common+0x48>
 8005b96:	f104 0a19 	add.w	sl, r4, #25
 8005b9a:	68e3      	ldr	r3, [r4, #12]
 8005b9c:	6832      	ldr	r2, [r6, #0]
 8005b9e:	1a9b      	subs	r3, r3, r2
 8005ba0:	42ab      	cmp	r3, r5
 8005ba2:	dc2b      	bgt.n	8005bfc <_printf_common+0xa0>
 8005ba4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ba8:	1e13      	subs	r3, r2, #0
 8005baa:	6822      	ldr	r2, [r4, #0]
 8005bac:	bf18      	it	ne
 8005bae:	2301      	movne	r3, #1
 8005bb0:	0692      	lsls	r2, r2, #26
 8005bb2:	d430      	bmi.n	8005c16 <_printf_common+0xba>
 8005bb4:	4649      	mov	r1, r9
 8005bb6:	4638      	mov	r0, r7
 8005bb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bbc:	47c0      	blx	r8
 8005bbe:	3001      	adds	r0, #1
 8005bc0:	d023      	beq.n	8005c0a <_printf_common+0xae>
 8005bc2:	6823      	ldr	r3, [r4, #0]
 8005bc4:	6922      	ldr	r2, [r4, #16]
 8005bc6:	f003 0306 	and.w	r3, r3, #6
 8005bca:	2b04      	cmp	r3, #4
 8005bcc:	bf14      	ite	ne
 8005bce:	2500      	movne	r5, #0
 8005bd0:	6833      	ldreq	r3, [r6, #0]
 8005bd2:	f04f 0600 	mov.w	r6, #0
 8005bd6:	bf08      	it	eq
 8005bd8:	68e5      	ldreq	r5, [r4, #12]
 8005bda:	f104 041a 	add.w	r4, r4, #26
 8005bde:	bf08      	it	eq
 8005be0:	1aed      	subeq	r5, r5, r3
 8005be2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005be6:	bf08      	it	eq
 8005be8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bec:	4293      	cmp	r3, r2
 8005bee:	bfc4      	itt	gt
 8005bf0:	1a9b      	subgt	r3, r3, r2
 8005bf2:	18ed      	addgt	r5, r5, r3
 8005bf4:	42b5      	cmp	r5, r6
 8005bf6:	d11a      	bne.n	8005c2e <_printf_common+0xd2>
 8005bf8:	2000      	movs	r0, #0
 8005bfa:	e008      	b.n	8005c0e <_printf_common+0xb2>
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	4652      	mov	r2, sl
 8005c00:	4649      	mov	r1, r9
 8005c02:	4638      	mov	r0, r7
 8005c04:	47c0      	blx	r8
 8005c06:	3001      	adds	r0, #1
 8005c08:	d103      	bne.n	8005c12 <_printf_common+0xb6>
 8005c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c12:	3501      	adds	r5, #1
 8005c14:	e7c1      	b.n	8005b9a <_printf_common+0x3e>
 8005c16:	2030      	movs	r0, #48	; 0x30
 8005c18:	18e1      	adds	r1, r4, r3
 8005c1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c1e:	1c5a      	adds	r2, r3, #1
 8005c20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c24:	4422      	add	r2, r4
 8005c26:	3302      	adds	r3, #2
 8005c28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c2c:	e7c2      	b.n	8005bb4 <_printf_common+0x58>
 8005c2e:	2301      	movs	r3, #1
 8005c30:	4622      	mov	r2, r4
 8005c32:	4649      	mov	r1, r9
 8005c34:	4638      	mov	r0, r7
 8005c36:	47c0      	blx	r8
 8005c38:	3001      	adds	r0, #1
 8005c3a:	d0e6      	beq.n	8005c0a <_printf_common+0xae>
 8005c3c:	3601      	adds	r6, #1
 8005c3e:	e7d9      	b.n	8005bf4 <_printf_common+0x98>

08005c40 <_printf_i>:
 8005c40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c44:	7e0f      	ldrb	r7, [r1, #24]
 8005c46:	4691      	mov	r9, r2
 8005c48:	2f78      	cmp	r7, #120	; 0x78
 8005c4a:	4680      	mov	r8, r0
 8005c4c:	460c      	mov	r4, r1
 8005c4e:	469a      	mov	sl, r3
 8005c50:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c56:	d807      	bhi.n	8005c68 <_printf_i+0x28>
 8005c58:	2f62      	cmp	r7, #98	; 0x62
 8005c5a:	d80a      	bhi.n	8005c72 <_printf_i+0x32>
 8005c5c:	2f00      	cmp	r7, #0
 8005c5e:	f000 80d5 	beq.w	8005e0c <_printf_i+0x1cc>
 8005c62:	2f58      	cmp	r7, #88	; 0x58
 8005c64:	f000 80c1 	beq.w	8005dea <_printf_i+0x1aa>
 8005c68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c70:	e03a      	b.n	8005ce8 <_printf_i+0xa8>
 8005c72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c76:	2b15      	cmp	r3, #21
 8005c78:	d8f6      	bhi.n	8005c68 <_printf_i+0x28>
 8005c7a:	a101      	add	r1, pc, #4	; (adr r1, 8005c80 <_printf_i+0x40>)
 8005c7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c80:	08005cd9 	.word	0x08005cd9
 8005c84:	08005ced 	.word	0x08005ced
 8005c88:	08005c69 	.word	0x08005c69
 8005c8c:	08005c69 	.word	0x08005c69
 8005c90:	08005c69 	.word	0x08005c69
 8005c94:	08005c69 	.word	0x08005c69
 8005c98:	08005ced 	.word	0x08005ced
 8005c9c:	08005c69 	.word	0x08005c69
 8005ca0:	08005c69 	.word	0x08005c69
 8005ca4:	08005c69 	.word	0x08005c69
 8005ca8:	08005c69 	.word	0x08005c69
 8005cac:	08005df3 	.word	0x08005df3
 8005cb0:	08005d19 	.word	0x08005d19
 8005cb4:	08005dad 	.word	0x08005dad
 8005cb8:	08005c69 	.word	0x08005c69
 8005cbc:	08005c69 	.word	0x08005c69
 8005cc0:	08005e15 	.word	0x08005e15
 8005cc4:	08005c69 	.word	0x08005c69
 8005cc8:	08005d19 	.word	0x08005d19
 8005ccc:	08005c69 	.word	0x08005c69
 8005cd0:	08005c69 	.word	0x08005c69
 8005cd4:	08005db5 	.word	0x08005db5
 8005cd8:	682b      	ldr	r3, [r5, #0]
 8005cda:	1d1a      	adds	r2, r3, #4
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	602a      	str	r2, [r5, #0]
 8005ce0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ce4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e0a0      	b.n	8005e2e <_printf_i+0x1ee>
 8005cec:	6820      	ldr	r0, [r4, #0]
 8005cee:	682b      	ldr	r3, [r5, #0]
 8005cf0:	0607      	lsls	r7, r0, #24
 8005cf2:	f103 0104 	add.w	r1, r3, #4
 8005cf6:	6029      	str	r1, [r5, #0]
 8005cf8:	d501      	bpl.n	8005cfe <_printf_i+0xbe>
 8005cfa:	681e      	ldr	r6, [r3, #0]
 8005cfc:	e003      	b.n	8005d06 <_printf_i+0xc6>
 8005cfe:	0646      	lsls	r6, r0, #25
 8005d00:	d5fb      	bpl.n	8005cfa <_printf_i+0xba>
 8005d02:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005d06:	2e00      	cmp	r6, #0
 8005d08:	da03      	bge.n	8005d12 <_printf_i+0xd2>
 8005d0a:	232d      	movs	r3, #45	; 0x2d
 8005d0c:	4276      	negs	r6, r6
 8005d0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d12:	230a      	movs	r3, #10
 8005d14:	4859      	ldr	r0, [pc, #356]	; (8005e7c <_printf_i+0x23c>)
 8005d16:	e012      	b.n	8005d3e <_printf_i+0xfe>
 8005d18:	682b      	ldr	r3, [r5, #0]
 8005d1a:	6820      	ldr	r0, [r4, #0]
 8005d1c:	1d19      	adds	r1, r3, #4
 8005d1e:	6029      	str	r1, [r5, #0]
 8005d20:	0605      	lsls	r5, r0, #24
 8005d22:	d501      	bpl.n	8005d28 <_printf_i+0xe8>
 8005d24:	681e      	ldr	r6, [r3, #0]
 8005d26:	e002      	b.n	8005d2e <_printf_i+0xee>
 8005d28:	0641      	lsls	r1, r0, #25
 8005d2a:	d5fb      	bpl.n	8005d24 <_printf_i+0xe4>
 8005d2c:	881e      	ldrh	r6, [r3, #0]
 8005d2e:	2f6f      	cmp	r7, #111	; 0x6f
 8005d30:	bf0c      	ite	eq
 8005d32:	2308      	moveq	r3, #8
 8005d34:	230a      	movne	r3, #10
 8005d36:	4851      	ldr	r0, [pc, #324]	; (8005e7c <_printf_i+0x23c>)
 8005d38:	2100      	movs	r1, #0
 8005d3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d3e:	6865      	ldr	r5, [r4, #4]
 8005d40:	2d00      	cmp	r5, #0
 8005d42:	bfa8      	it	ge
 8005d44:	6821      	ldrge	r1, [r4, #0]
 8005d46:	60a5      	str	r5, [r4, #8]
 8005d48:	bfa4      	itt	ge
 8005d4a:	f021 0104 	bicge.w	r1, r1, #4
 8005d4e:	6021      	strge	r1, [r4, #0]
 8005d50:	b90e      	cbnz	r6, 8005d56 <_printf_i+0x116>
 8005d52:	2d00      	cmp	r5, #0
 8005d54:	d04b      	beq.n	8005dee <_printf_i+0x1ae>
 8005d56:	4615      	mov	r5, r2
 8005d58:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d5c:	fb03 6711 	mls	r7, r3, r1, r6
 8005d60:	5dc7      	ldrb	r7, [r0, r7]
 8005d62:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d66:	4637      	mov	r7, r6
 8005d68:	42bb      	cmp	r3, r7
 8005d6a:	460e      	mov	r6, r1
 8005d6c:	d9f4      	bls.n	8005d58 <_printf_i+0x118>
 8005d6e:	2b08      	cmp	r3, #8
 8005d70:	d10b      	bne.n	8005d8a <_printf_i+0x14a>
 8005d72:	6823      	ldr	r3, [r4, #0]
 8005d74:	07de      	lsls	r6, r3, #31
 8005d76:	d508      	bpl.n	8005d8a <_printf_i+0x14a>
 8005d78:	6923      	ldr	r3, [r4, #16]
 8005d7a:	6861      	ldr	r1, [r4, #4]
 8005d7c:	4299      	cmp	r1, r3
 8005d7e:	bfde      	ittt	le
 8005d80:	2330      	movle	r3, #48	; 0x30
 8005d82:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d86:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d8a:	1b52      	subs	r2, r2, r5
 8005d8c:	6122      	str	r2, [r4, #16]
 8005d8e:	464b      	mov	r3, r9
 8005d90:	4621      	mov	r1, r4
 8005d92:	4640      	mov	r0, r8
 8005d94:	f8cd a000 	str.w	sl, [sp]
 8005d98:	aa03      	add	r2, sp, #12
 8005d9a:	f7ff fedf 	bl	8005b5c <_printf_common>
 8005d9e:	3001      	adds	r0, #1
 8005da0:	d14a      	bne.n	8005e38 <_printf_i+0x1f8>
 8005da2:	f04f 30ff 	mov.w	r0, #4294967295
 8005da6:	b004      	add	sp, #16
 8005da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dac:	6823      	ldr	r3, [r4, #0]
 8005dae:	f043 0320 	orr.w	r3, r3, #32
 8005db2:	6023      	str	r3, [r4, #0]
 8005db4:	2778      	movs	r7, #120	; 0x78
 8005db6:	4832      	ldr	r0, [pc, #200]	; (8005e80 <_printf_i+0x240>)
 8005db8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005dbc:	6823      	ldr	r3, [r4, #0]
 8005dbe:	6829      	ldr	r1, [r5, #0]
 8005dc0:	061f      	lsls	r7, r3, #24
 8005dc2:	f851 6b04 	ldr.w	r6, [r1], #4
 8005dc6:	d402      	bmi.n	8005dce <_printf_i+0x18e>
 8005dc8:	065f      	lsls	r7, r3, #25
 8005dca:	bf48      	it	mi
 8005dcc:	b2b6      	uxthmi	r6, r6
 8005dce:	07df      	lsls	r7, r3, #31
 8005dd0:	bf48      	it	mi
 8005dd2:	f043 0320 	orrmi.w	r3, r3, #32
 8005dd6:	6029      	str	r1, [r5, #0]
 8005dd8:	bf48      	it	mi
 8005dda:	6023      	strmi	r3, [r4, #0]
 8005ddc:	b91e      	cbnz	r6, 8005de6 <_printf_i+0x1a6>
 8005dde:	6823      	ldr	r3, [r4, #0]
 8005de0:	f023 0320 	bic.w	r3, r3, #32
 8005de4:	6023      	str	r3, [r4, #0]
 8005de6:	2310      	movs	r3, #16
 8005de8:	e7a6      	b.n	8005d38 <_printf_i+0xf8>
 8005dea:	4824      	ldr	r0, [pc, #144]	; (8005e7c <_printf_i+0x23c>)
 8005dec:	e7e4      	b.n	8005db8 <_printf_i+0x178>
 8005dee:	4615      	mov	r5, r2
 8005df0:	e7bd      	b.n	8005d6e <_printf_i+0x12e>
 8005df2:	682b      	ldr	r3, [r5, #0]
 8005df4:	6826      	ldr	r6, [r4, #0]
 8005df6:	1d18      	adds	r0, r3, #4
 8005df8:	6961      	ldr	r1, [r4, #20]
 8005dfa:	6028      	str	r0, [r5, #0]
 8005dfc:	0635      	lsls	r5, r6, #24
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	d501      	bpl.n	8005e06 <_printf_i+0x1c6>
 8005e02:	6019      	str	r1, [r3, #0]
 8005e04:	e002      	b.n	8005e0c <_printf_i+0x1cc>
 8005e06:	0670      	lsls	r0, r6, #25
 8005e08:	d5fb      	bpl.n	8005e02 <_printf_i+0x1c2>
 8005e0a:	8019      	strh	r1, [r3, #0]
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	4615      	mov	r5, r2
 8005e10:	6123      	str	r3, [r4, #16]
 8005e12:	e7bc      	b.n	8005d8e <_printf_i+0x14e>
 8005e14:	682b      	ldr	r3, [r5, #0]
 8005e16:	2100      	movs	r1, #0
 8005e18:	1d1a      	adds	r2, r3, #4
 8005e1a:	602a      	str	r2, [r5, #0]
 8005e1c:	681d      	ldr	r5, [r3, #0]
 8005e1e:	6862      	ldr	r2, [r4, #4]
 8005e20:	4628      	mov	r0, r5
 8005e22:	f000 f9d4 	bl	80061ce <memchr>
 8005e26:	b108      	cbz	r0, 8005e2c <_printf_i+0x1ec>
 8005e28:	1b40      	subs	r0, r0, r5
 8005e2a:	6060      	str	r0, [r4, #4]
 8005e2c:	6863      	ldr	r3, [r4, #4]
 8005e2e:	6123      	str	r3, [r4, #16]
 8005e30:	2300      	movs	r3, #0
 8005e32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e36:	e7aa      	b.n	8005d8e <_printf_i+0x14e>
 8005e38:	462a      	mov	r2, r5
 8005e3a:	4649      	mov	r1, r9
 8005e3c:	4640      	mov	r0, r8
 8005e3e:	6923      	ldr	r3, [r4, #16]
 8005e40:	47d0      	blx	sl
 8005e42:	3001      	adds	r0, #1
 8005e44:	d0ad      	beq.n	8005da2 <_printf_i+0x162>
 8005e46:	6823      	ldr	r3, [r4, #0]
 8005e48:	079b      	lsls	r3, r3, #30
 8005e4a:	d413      	bmi.n	8005e74 <_printf_i+0x234>
 8005e4c:	68e0      	ldr	r0, [r4, #12]
 8005e4e:	9b03      	ldr	r3, [sp, #12]
 8005e50:	4298      	cmp	r0, r3
 8005e52:	bfb8      	it	lt
 8005e54:	4618      	movlt	r0, r3
 8005e56:	e7a6      	b.n	8005da6 <_printf_i+0x166>
 8005e58:	2301      	movs	r3, #1
 8005e5a:	4632      	mov	r2, r6
 8005e5c:	4649      	mov	r1, r9
 8005e5e:	4640      	mov	r0, r8
 8005e60:	47d0      	blx	sl
 8005e62:	3001      	adds	r0, #1
 8005e64:	d09d      	beq.n	8005da2 <_printf_i+0x162>
 8005e66:	3501      	adds	r5, #1
 8005e68:	68e3      	ldr	r3, [r4, #12]
 8005e6a:	9903      	ldr	r1, [sp, #12]
 8005e6c:	1a5b      	subs	r3, r3, r1
 8005e6e:	42ab      	cmp	r3, r5
 8005e70:	dcf2      	bgt.n	8005e58 <_printf_i+0x218>
 8005e72:	e7eb      	b.n	8005e4c <_printf_i+0x20c>
 8005e74:	2500      	movs	r5, #0
 8005e76:	f104 0619 	add.w	r6, r4, #25
 8005e7a:	e7f5      	b.n	8005e68 <_printf_i+0x228>
 8005e7c:	08008419 	.word	0x08008419
 8005e80:	0800842a 	.word	0x0800842a

08005e84 <std>:
 8005e84:	2300      	movs	r3, #0
 8005e86:	b510      	push	{r4, lr}
 8005e88:	4604      	mov	r4, r0
 8005e8a:	e9c0 3300 	strd	r3, r3, [r0]
 8005e8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e92:	6083      	str	r3, [r0, #8]
 8005e94:	8181      	strh	r1, [r0, #12]
 8005e96:	6643      	str	r3, [r0, #100]	; 0x64
 8005e98:	81c2      	strh	r2, [r0, #14]
 8005e9a:	6183      	str	r3, [r0, #24]
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	2208      	movs	r2, #8
 8005ea0:	305c      	adds	r0, #92	; 0x5c
 8005ea2:	f000 f914 	bl	80060ce <memset>
 8005ea6:	4b0d      	ldr	r3, [pc, #52]	; (8005edc <std+0x58>)
 8005ea8:	6224      	str	r4, [r4, #32]
 8005eaa:	6263      	str	r3, [r4, #36]	; 0x24
 8005eac:	4b0c      	ldr	r3, [pc, #48]	; (8005ee0 <std+0x5c>)
 8005eae:	62a3      	str	r3, [r4, #40]	; 0x28
 8005eb0:	4b0c      	ldr	r3, [pc, #48]	; (8005ee4 <std+0x60>)
 8005eb2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005eb4:	4b0c      	ldr	r3, [pc, #48]	; (8005ee8 <std+0x64>)
 8005eb6:	6323      	str	r3, [r4, #48]	; 0x30
 8005eb8:	4b0c      	ldr	r3, [pc, #48]	; (8005eec <std+0x68>)
 8005eba:	429c      	cmp	r4, r3
 8005ebc:	d006      	beq.n	8005ecc <std+0x48>
 8005ebe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005ec2:	4294      	cmp	r4, r2
 8005ec4:	d002      	beq.n	8005ecc <std+0x48>
 8005ec6:	33d0      	adds	r3, #208	; 0xd0
 8005ec8:	429c      	cmp	r4, r3
 8005eca:	d105      	bne.n	8005ed8 <std+0x54>
 8005ecc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ed4:	f000 b978 	b.w	80061c8 <__retarget_lock_init_recursive>
 8005ed8:	bd10      	pop	{r4, pc}
 8005eda:	bf00      	nop
 8005edc:	08006049 	.word	0x08006049
 8005ee0:	0800606b 	.word	0x0800606b
 8005ee4:	080060a3 	.word	0x080060a3
 8005ee8:	080060c7 	.word	0x080060c7
 8005eec:	200003b4 	.word	0x200003b4

08005ef0 <stdio_exit_handler>:
 8005ef0:	4a02      	ldr	r2, [pc, #8]	; (8005efc <stdio_exit_handler+0xc>)
 8005ef2:	4903      	ldr	r1, [pc, #12]	; (8005f00 <stdio_exit_handler+0x10>)
 8005ef4:	4803      	ldr	r0, [pc, #12]	; (8005f04 <stdio_exit_handler+0x14>)
 8005ef6:	f000 b869 	b.w	8005fcc <_fwalk_sglue>
 8005efa:	bf00      	nop
 8005efc:	2000000c 	.word	0x2000000c
 8005f00:	08007b65 	.word	0x08007b65
 8005f04:	20000018 	.word	0x20000018

08005f08 <cleanup_stdio>:
 8005f08:	6841      	ldr	r1, [r0, #4]
 8005f0a:	4b0c      	ldr	r3, [pc, #48]	; (8005f3c <cleanup_stdio+0x34>)
 8005f0c:	b510      	push	{r4, lr}
 8005f0e:	4299      	cmp	r1, r3
 8005f10:	4604      	mov	r4, r0
 8005f12:	d001      	beq.n	8005f18 <cleanup_stdio+0x10>
 8005f14:	f001 fe26 	bl	8007b64 <_fflush_r>
 8005f18:	68a1      	ldr	r1, [r4, #8]
 8005f1a:	4b09      	ldr	r3, [pc, #36]	; (8005f40 <cleanup_stdio+0x38>)
 8005f1c:	4299      	cmp	r1, r3
 8005f1e:	d002      	beq.n	8005f26 <cleanup_stdio+0x1e>
 8005f20:	4620      	mov	r0, r4
 8005f22:	f001 fe1f 	bl	8007b64 <_fflush_r>
 8005f26:	68e1      	ldr	r1, [r4, #12]
 8005f28:	4b06      	ldr	r3, [pc, #24]	; (8005f44 <cleanup_stdio+0x3c>)
 8005f2a:	4299      	cmp	r1, r3
 8005f2c:	d004      	beq.n	8005f38 <cleanup_stdio+0x30>
 8005f2e:	4620      	mov	r0, r4
 8005f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f34:	f001 be16 	b.w	8007b64 <_fflush_r>
 8005f38:	bd10      	pop	{r4, pc}
 8005f3a:	bf00      	nop
 8005f3c:	200003b4 	.word	0x200003b4
 8005f40:	2000041c 	.word	0x2000041c
 8005f44:	20000484 	.word	0x20000484

08005f48 <global_stdio_init.part.0>:
 8005f48:	b510      	push	{r4, lr}
 8005f4a:	4b0b      	ldr	r3, [pc, #44]	; (8005f78 <global_stdio_init.part.0+0x30>)
 8005f4c:	4c0b      	ldr	r4, [pc, #44]	; (8005f7c <global_stdio_init.part.0+0x34>)
 8005f4e:	4a0c      	ldr	r2, [pc, #48]	; (8005f80 <global_stdio_init.part.0+0x38>)
 8005f50:	4620      	mov	r0, r4
 8005f52:	601a      	str	r2, [r3, #0]
 8005f54:	2104      	movs	r1, #4
 8005f56:	2200      	movs	r2, #0
 8005f58:	f7ff ff94 	bl	8005e84 <std>
 8005f5c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005f60:	2201      	movs	r2, #1
 8005f62:	2109      	movs	r1, #9
 8005f64:	f7ff ff8e 	bl	8005e84 <std>
 8005f68:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005f6c:	2202      	movs	r2, #2
 8005f6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f72:	2112      	movs	r1, #18
 8005f74:	f7ff bf86 	b.w	8005e84 <std>
 8005f78:	200004ec 	.word	0x200004ec
 8005f7c:	200003b4 	.word	0x200003b4
 8005f80:	08005ef1 	.word	0x08005ef1

08005f84 <__sfp_lock_acquire>:
 8005f84:	4801      	ldr	r0, [pc, #4]	; (8005f8c <__sfp_lock_acquire+0x8>)
 8005f86:	f000 b920 	b.w	80061ca <__retarget_lock_acquire_recursive>
 8005f8a:	bf00      	nop
 8005f8c:	200004f5 	.word	0x200004f5

08005f90 <__sfp_lock_release>:
 8005f90:	4801      	ldr	r0, [pc, #4]	; (8005f98 <__sfp_lock_release+0x8>)
 8005f92:	f000 b91b 	b.w	80061cc <__retarget_lock_release_recursive>
 8005f96:	bf00      	nop
 8005f98:	200004f5 	.word	0x200004f5

08005f9c <__sinit>:
 8005f9c:	b510      	push	{r4, lr}
 8005f9e:	4604      	mov	r4, r0
 8005fa0:	f7ff fff0 	bl	8005f84 <__sfp_lock_acquire>
 8005fa4:	6a23      	ldr	r3, [r4, #32]
 8005fa6:	b11b      	cbz	r3, 8005fb0 <__sinit+0x14>
 8005fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fac:	f7ff bff0 	b.w	8005f90 <__sfp_lock_release>
 8005fb0:	4b04      	ldr	r3, [pc, #16]	; (8005fc4 <__sinit+0x28>)
 8005fb2:	6223      	str	r3, [r4, #32]
 8005fb4:	4b04      	ldr	r3, [pc, #16]	; (8005fc8 <__sinit+0x2c>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d1f5      	bne.n	8005fa8 <__sinit+0xc>
 8005fbc:	f7ff ffc4 	bl	8005f48 <global_stdio_init.part.0>
 8005fc0:	e7f2      	b.n	8005fa8 <__sinit+0xc>
 8005fc2:	bf00      	nop
 8005fc4:	08005f09 	.word	0x08005f09
 8005fc8:	200004ec 	.word	0x200004ec

08005fcc <_fwalk_sglue>:
 8005fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fd0:	4607      	mov	r7, r0
 8005fd2:	4688      	mov	r8, r1
 8005fd4:	4614      	mov	r4, r2
 8005fd6:	2600      	movs	r6, #0
 8005fd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005fdc:	f1b9 0901 	subs.w	r9, r9, #1
 8005fe0:	d505      	bpl.n	8005fee <_fwalk_sglue+0x22>
 8005fe2:	6824      	ldr	r4, [r4, #0]
 8005fe4:	2c00      	cmp	r4, #0
 8005fe6:	d1f7      	bne.n	8005fd8 <_fwalk_sglue+0xc>
 8005fe8:	4630      	mov	r0, r6
 8005fea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fee:	89ab      	ldrh	r3, [r5, #12]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d907      	bls.n	8006004 <_fwalk_sglue+0x38>
 8005ff4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	d003      	beq.n	8006004 <_fwalk_sglue+0x38>
 8005ffc:	4629      	mov	r1, r5
 8005ffe:	4638      	mov	r0, r7
 8006000:	47c0      	blx	r8
 8006002:	4306      	orrs	r6, r0
 8006004:	3568      	adds	r5, #104	; 0x68
 8006006:	e7e9      	b.n	8005fdc <_fwalk_sglue+0x10>

08006008 <siprintf>:
 8006008:	b40e      	push	{r1, r2, r3}
 800600a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800600e:	b500      	push	{lr}
 8006010:	b09c      	sub	sp, #112	; 0x70
 8006012:	ab1d      	add	r3, sp, #116	; 0x74
 8006014:	9002      	str	r0, [sp, #8]
 8006016:	9006      	str	r0, [sp, #24]
 8006018:	9107      	str	r1, [sp, #28]
 800601a:	9104      	str	r1, [sp, #16]
 800601c:	4808      	ldr	r0, [pc, #32]	; (8006040 <siprintf+0x38>)
 800601e:	4909      	ldr	r1, [pc, #36]	; (8006044 <siprintf+0x3c>)
 8006020:	f853 2b04 	ldr.w	r2, [r3], #4
 8006024:	9105      	str	r1, [sp, #20]
 8006026:	6800      	ldr	r0, [r0, #0]
 8006028:	a902      	add	r1, sp, #8
 800602a:	9301      	str	r3, [sp, #4]
 800602c:	f001 fc1a 	bl	8007864 <_svfiprintf_r>
 8006030:	2200      	movs	r2, #0
 8006032:	9b02      	ldr	r3, [sp, #8]
 8006034:	701a      	strb	r2, [r3, #0]
 8006036:	b01c      	add	sp, #112	; 0x70
 8006038:	f85d eb04 	ldr.w	lr, [sp], #4
 800603c:	b003      	add	sp, #12
 800603e:	4770      	bx	lr
 8006040:	20000064 	.word	0x20000064
 8006044:	ffff0208 	.word	0xffff0208

08006048 <__sread>:
 8006048:	b510      	push	{r4, lr}
 800604a:	460c      	mov	r4, r1
 800604c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006050:	f000 f86c 	bl	800612c <_read_r>
 8006054:	2800      	cmp	r0, #0
 8006056:	bfab      	itete	ge
 8006058:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800605a:	89a3      	ldrhlt	r3, [r4, #12]
 800605c:	181b      	addge	r3, r3, r0
 800605e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006062:	bfac      	ite	ge
 8006064:	6563      	strge	r3, [r4, #84]	; 0x54
 8006066:	81a3      	strhlt	r3, [r4, #12]
 8006068:	bd10      	pop	{r4, pc}

0800606a <__swrite>:
 800606a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800606e:	461f      	mov	r7, r3
 8006070:	898b      	ldrh	r3, [r1, #12]
 8006072:	4605      	mov	r5, r0
 8006074:	05db      	lsls	r3, r3, #23
 8006076:	460c      	mov	r4, r1
 8006078:	4616      	mov	r6, r2
 800607a:	d505      	bpl.n	8006088 <__swrite+0x1e>
 800607c:	2302      	movs	r3, #2
 800607e:	2200      	movs	r2, #0
 8006080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006084:	f000 f840 	bl	8006108 <_lseek_r>
 8006088:	89a3      	ldrh	r3, [r4, #12]
 800608a:	4632      	mov	r2, r6
 800608c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006090:	81a3      	strh	r3, [r4, #12]
 8006092:	4628      	mov	r0, r5
 8006094:	463b      	mov	r3, r7
 8006096:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800609a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800609e:	f000 b857 	b.w	8006150 <_write_r>

080060a2 <__sseek>:
 80060a2:	b510      	push	{r4, lr}
 80060a4:	460c      	mov	r4, r1
 80060a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060aa:	f000 f82d 	bl	8006108 <_lseek_r>
 80060ae:	1c43      	adds	r3, r0, #1
 80060b0:	89a3      	ldrh	r3, [r4, #12]
 80060b2:	bf15      	itete	ne
 80060b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80060b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80060ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80060be:	81a3      	strheq	r3, [r4, #12]
 80060c0:	bf18      	it	ne
 80060c2:	81a3      	strhne	r3, [r4, #12]
 80060c4:	bd10      	pop	{r4, pc}

080060c6 <__sclose>:
 80060c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060ca:	f000 b80d 	b.w	80060e8 <_close_r>

080060ce <memset>:
 80060ce:	4603      	mov	r3, r0
 80060d0:	4402      	add	r2, r0
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d100      	bne.n	80060d8 <memset+0xa>
 80060d6:	4770      	bx	lr
 80060d8:	f803 1b01 	strb.w	r1, [r3], #1
 80060dc:	e7f9      	b.n	80060d2 <memset+0x4>
	...

080060e0 <_localeconv_r>:
 80060e0:	4800      	ldr	r0, [pc, #0]	; (80060e4 <_localeconv_r+0x4>)
 80060e2:	4770      	bx	lr
 80060e4:	20000158 	.word	0x20000158

080060e8 <_close_r>:
 80060e8:	b538      	push	{r3, r4, r5, lr}
 80060ea:	2300      	movs	r3, #0
 80060ec:	4d05      	ldr	r5, [pc, #20]	; (8006104 <_close_r+0x1c>)
 80060ee:	4604      	mov	r4, r0
 80060f0:	4608      	mov	r0, r1
 80060f2:	602b      	str	r3, [r5, #0]
 80060f4:	f7fb fc9e 	bl	8001a34 <_close>
 80060f8:	1c43      	adds	r3, r0, #1
 80060fa:	d102      	bne.n	8006102 <_close_r+0x1a>
 80060fc:	682b      	ldr	r3, [r5, #0]
 80060fe:	b103      	cbz	r3, 8006102 <_close_r+0x1a>
 8006100:	6023      	str	r3, [r4, #0]
 8006102:	bd38      	pop	{r3, r4, r5, pc}
 8006104:	200004f0 	.word	0x200004f0

08006108 <_lseek_r>:
 8006108:	b538      	push	{r3, r4, r5, lr}
 800610a:	4604      	mov	r4, r0
 800610c:	4608      	mov	r0, r1
 800610e:	4611      	mov	r1, r2
 8006110:	2200      	movs	r2, #0
 8006112:	4d05      	ldr	r5, [pc, #20]	; (8006128 <_lseek_r+0x20>)
 8006114:	602a      	str	r2, [r5, #0]
 8006116:	461a      	mov	r2, r3
 8006118:	f7fb fcb0 	bl	8001a7c <_lseek>
 800611c:	1c43      	adds	r3, r0, #1
 800611e:	d102      	bne.n	8006126 <_lseek_r+0x1e>
 8006120:	682b      	ldr	r3, [r5, #0]
 8006122:	b103      	cbz	r3, 8006126 <_lseek_r+0x1e>
 8006124:	6023      	str	r3, [r4, #0]
 8006126:	bd38      	pop	{r3, r4, r5, pc}
 8006128:	200004f0 	.word	0x200004f0

0800612c <_read_r>:
 800612c:	b538      	push	{r3, r4, r5, lr}
 800612e:	4604      	mov	r4, r0
 8006130:	4608      	mov	r0, r1
 8006132:	4611      	mov	r1, r2
 8006134:	2200      	movs	r2, #0
 8006136:	4d05      	ldr	r5, [pc, #20]	; (800614c <_read_r+0x20>)
 8006138:	602a      	str	r2, [r5, #0]
 800613a:	461a      	mov	r2, r3
 800613c:	f7fb fc41 	bl	80019c2 <_read>
 8006140:	1c43      	adds	r3, r0, #1
 8006142:	d102      	bne.n	800614a <_read_r+0x1e>
 8006144:	682b      	ldr	r3, [r5, #0]
 8006146:	b103      	cbz	r3, 800614a <_read_r+0x1e>
 8006148:	6023      	str	r3, [r4, #0]
 800614a:	bd38      	pop	{r3, r4, r5, pc}
 800614c:	200004f0 	.word	0x200004f0

08006150 <_write_r>:
 8006150:	b538      	push	{r3, r4, r5, lr}
 8006152:	4604      	mov	r4, r0
 8006154:	4608      	mov	r0, r1
 8006156:	4611      	mov	r1, r2
 8006158:	2200      	movs	r2, #0
 800615a:	4d05      	ldr	r5, [pc, #20]	; (8006170 <_write_r+0x20>)
 800615c:	602a      	str	r2, [r5, #0]
 800615e:	461a      	mov	r2, r3
 8006160:	f7fb fc4c 	bl	80019fc <_write>
 8006164:	1c43      	adds	r3, r0, #1
 8006166:	d102      	bne.n	800616e <_write_r+0x1e>
 8006168:	682b      	ldr	r3, [r5, #0]
 800616a:	b103      	cbz	r3, 800616e <_write_r+0x1e>
 800616c:	6023      	str	r3, [r4, #0]
 800616e:	bd38      	pop	{r3, r4, r5, pc}
 8006170:	200004f0 	.word	0x200004f0

08006174 <__errno>:
 8006174:	4b01      	ldr	r3, [pc, #4]	; (800617c <__errno+0x8>)
 8006176:	6818      	ldr	r0, [r3, #0]
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	20000064 	.word	0x20000064

08006180 <__libc_init_array>:
 8006180:	b570      	push	{r4, r5, r6, lr}
 8006182:	2600      	movs	r6, #0
 8006184:	4d0c      	ldr	r5, [pc, #48]	; (80061b8 <__libc_init_array+0x38>)
 8006186:	4c0d      	ldr	r4, [pc, #52]	; (80061bc <__libc_init_array+0x3c>)
 8006188:	1b64      	subs	r4, r4, r5
 800618a:	10a4      	asrs	r4, r4, #2
 800618c:	42a6      	cmp	r6, r4
 800618e:	d109      	bne.n	80061a4 <__libc_init_array+0x24>
 8006190:	f002 f888 	bl	80082a4 <_init>
 8006194:	2600      	movs	r6, #0
 8006196:	4d0a      	ldr	r5, [pc, #40]	; (80061c0 <__libc_init_array+0x40>)
 8006198:	4c0a      	ldr	r4, [pc, #40]	; (80061c4 <__libc_init_array+0x44>)
 800619a:	1b64      	subs	r4, r4, r5
 800619c:	10a4      	asrs	r4, r4, #2
 800619e:	42a6      	cmp	r6, r4
 80061a0:	d105      	bne.n	80061ae <__libc_init_array+0x2e>
 80061a2:	bd70      	pop	{r4, r5, r6, pc}
 80061a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80061a8:	4798      	blx	r3
 80061aa:	3601      	adds	r6, #1
 80061ac:	e7ee      	b.n	800618c <__libc_init_array+0xc>
 80061ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80061b2:	4798      	blx	r3
 80061b4:	3601      	adds	r6, #1
 80061b6:	e7f2      	b.n	800619e <__libc_init_array+0x1e>
 80061b8:	0800867c 	.word	0x0800867c
 80061bc:	0800867c 	.word	0x0800867c
 80061c0:	0800867c 	.word	0x0800867c
 80061c4:	08008680 	.word	0x08008680

080061c8 <__retarget_lock_init_recursive>:
 80061c8:	4770      	bx	lr

080061ca <__retarget_lock_acquire_recursive>:
 80061ca:	4770      	bx	lr

080061cc <__retarget_lock_release_recursive>:
 80061cc:	4770      	bx	lr

080061ce <memchr>:
 80061ce:	4603      	mov	r3, r0
 80061d0:	b510      	push	{r4, lr}
 80061d2:	b2c9      	uxtb	r1, r1
 80061d4:	4402      	add	r2, r0
 80061d6:	4293      	cmp	r3, r2
 80061d8:	4618      	mov	r0, r3
 80061da:	d101      	bne.n	80061e0 <memchr+0x12>
 80061dc:	2000      	movs	r0, #0
 80061de:	e003      	b.n	80061e8 <memchr+0x1a>
 80061e0:	7804      	ldrb	r4, [r0, #0]
 80061e2:	3301      	adds	r3, #1
 80061e4:	428c      	cmp	r4, r1
 80061e6:	d1f6      	bne.n	80061d6 <memchr+0x8>
 80061e8:	bd10      	pop	{r4, pc}

080061ea <quorem>:
 80061ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ee:	6903      	ldr	r3, [r0, #16]
 80061f0:	690c      	ldr	r4, [r1, #16]
 80061f2:	4607      	mov	r7, r0
 80061f4:	42a3      	cmp	r3, r4
 80061f6:	db7f      	blt.n	80062f8 <quorem+0x10e>
 80061f8:	3c01      	subs	r4, #1
 80061fa:	f100 0514 	add.w	r5, r0, #20
 80061fe:	f101 0814 	add.w	r8, r1, #20
 8006202:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006206:	9301      	str	r3, [sp, #4]
 8006208:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800620c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006210:	3301      	adds	r3, #1
 8006212:	429a      	cmp	r2, r3
 8006214:	fbb2 f6f3 	udiv	r6, r2, r3
 8006218:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800621c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006220:	d331      	bcc.n	8006286 <quorem+0x9c>
 8006222:	f04f 0e00 	mov.w	lr, #0
 8006226:	4640      	mov	r0, r8
 8006228:	46ac      	mov	ip, r5
 800622a:	46f2      	mov	sl, lr
 800622c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006230:	b293      	uxth	r3, r2
 8006232:	fb06 e303 	mla	r3, r6, r3, lr
 8006236:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800623a:	0c1a      	lsrs	r2, r3, #16
 800623c:	b29b      	uxth	r3, r3
 800623e:	fb06 220e 	mla	r2, r6, lr, r2
 8006242:	ebaa 0303 	sub.w	r3, sl, r3
 8006246:	f8dc a000 	ldr.w	sl, [ip]
 800624a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800624e:	fa1f fa8a 	uxth.w	sl, sl
 8006252:	4453      	add	r3, sl
 8006254:	f8dc a000 	ldr.w	sl, [ip]
 8006258:	b292      	uxth	r2, r2
 800625a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800625e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006262:	b29b      	uxth	r3, r3
 8006264:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006268:	4581      	cmp	r9, r0
 800626a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800626e:	f84c 3b04 	str.w	r3, [ip], #4
 8006272:	d2db      	bcs.n	800622c <quorem+0x42>
 8006274:	f855 300b 	ldr.w	r3, [r5, fp]
 8006278:	b92b      	cbnz	r3, 8006286 <quorem+0x9c>
 800627a:	9b01      	ldr	r3, [sp, #4]
 800627c:	3b04      	subs	r3, #4
 800627e:	429d      	cmp	r5, r3
 8006280:	461a      	mov	r2, r3
 8006282:	d32d      	bcc.n	80062e0 <quorem+0xf6>
 8006284:	613c      	str	r4, [r7, #16]
 8006286:	4638      	mov	r0, r7
 8006288:	f001 f994 	bl	80075b4 <__mcmp>
 800628c:	2800      	cmp	r0, #0
 800628e:	db23      	blt.n	80062d8 <quorem+0xee>
 8006290:	4629      	mov	r1, r5
 8006292:	2000      	movs	r0, #0
 8006294:	3601      	adds	r6, #1
 8006296:	f858 2b04 	ldr.w	r2, [r8], #4
 800629a:	f8d1 c000 	ldr.w	ip, [r1]
 800629e:	b293      	uxth	r3, r2
 80062a0:	1ac3      	subs	r3, r0, r3
 80062a2:	0c12      	lsrs	r2, r2, #16
 80062a4:	fa1f f08c 	uxth.w	r0, ip
 80062a8:	4403      	add	r3, r0
 80062aa:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80062ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80062b8:	45c1      	cmp	r9, r8
 80062ba:	ea4f 4022 	mov.w	r0, r2, asr #16
 80062be:	f841 3b04 	str.w	r3, [r1], #4
 80062c2:	d2e8      	bcs.n	8006296 <quorem+0xac>
 80062c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80062c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80062cc:	b922      	cbnz	r2, 80062d8 <quorem+0xee>
 80062ce:	3b04      	subs	r3, #4
 80062d0:	429d      	cmp	r5, r3
 80062d2:	461a      	mov	r2, r3
 80062d4:	d30a      	bcc.n	80062ec <quorem+0x102>
 80062d6:	613c      	str	r4, [r7, #16]
 80062d8:	4630      	mov	r0, r6
 80062da:	b003      	add	sp, #12
 80062dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062e0:	6812      	ldr	r2, [r2, #0]
 80062e2:	3b04      	subs	r3, #4
 80062e4:	2a00      	cmp	r2, #0
 80062e6:	d1cd      	bne.n	8006284 <quorem+0x9a>
 80062e8:	3c01      	subs	r4, #1
 80062ea:	e7c8      	b.n	800627e <quorem+0x94>
 80062ec:	6812      	ldr	r2, [r2, #0]
 80062ee:	3b04      	subs	r3, #4
 80062f0:	2a00      	cmp	r2, #0
 80062f2:	d1f0      	bne.n	80062d6 <quorem+0xec>
 80062f4:	3c01      	subs	r4, #1
 80062f6:	e7eb      	b.n	80062d0 <quorem+0xe6>
 80062f8:	2000      	movs	r0, #0
 80062fa:	e7ee      	b.n	80062da <quorem+0xf0>
 80062fc:	0000      	movs	r0, r0
	...

08006300 <_dtoa_r>:
 8006300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006304:	4616      	mov	r6, r2
 8006306:	461f      	mov	r7, r3
 8006308:	69c4      	ldr	r4, [r0, #28]
 800630a:	b099      	sub	sp, #100	; 0x64
 800630c:	4605      	mov	r5, r0
 800630e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006312:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006316:	b974      	cbnz	r4, 8006336 <_dtoa_r+0x36>
 8006318:	2010      	movs	r0, #16
 800631a:	f000 fe1d 	bl	8006f58 <malloc>
 800631e:	4602      	mov	r2, r0
 8006320:	61e8      	str	r0, [r5, #28]
 8006322:	b920      	cbnz	r0, 800632e <_dtoa_r+0x2e>
 8006324:	21ef      	movs	r1, #239	; 0xef
 8006326:	4bac      	ldr	r3, [pc, #688]	; (80065d8 <_dtoa_r+0x2d8>)
 8006328:	48ac      	ldr	r0, [pc, #688]	; (80065dc <_dtoa_r+0x2dc>)
 800632a:	f001 fc7b 	bl	8007c24 <__assert_func>
 800632e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006332:	6004      	str	r4, [r0, #0]
 8006334:	60c4      	str	r4, [r0, #12]
 8006336:	69eb      	ldr	r3, [r5, #28]
 8006338:	6819      	ldr	r1, [r3, #0]
 800633a:	b151      	cbz	r1, 8006352 <_dtoa_r+0x52>
 800633c:	685a      	ldr	r2, [r3, #4]
 800633e:	2301      	movs	r3, #1
 8006340:	4093      	lsls	r3, r2
 8006342:	604a      	str	r2, [r1, #4]
 8006344:	608b      	str	r3, [r1, #8]
 8006346:	4628      	mov	r0, r5
 8006348:	f000 fefa 	bl	8007140 <_Bfree>
 800634c:	2200      	movs	r2, #0
 800634e:	69eb      	ldr	r3, [r5, #28]
 8006350:	601a      	str	r2, [r3, #0]
 8006352:	1e3b      	subs	r3, r7, #0
 8006354:	bfaf      	iteee	ge
 8006356:	2300      	movge	r3, #0
 8006358:	2201      	movlt	r2, #1
 800635a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800635e:	9305      	strlt	r3, [sp, #20]
 8006360:	bfa8      	it	ge
 8006362:	f8c8 3000 	strge.w	r3, [r8]
 8006366:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800636a:	4b9d      	ldr	r3, [pc, #628]	; (80065e0 <_dtoa_r+0x2e0>)
 800636c:	bfb8      	it	lt
 800636e:	f8c8 2000 	strlt.w	r2, [r8]
 8006372:	ea33 0309 	bics.w	r3, r3, r9
 8006376:	d119      	bne.n	80063ac <_dtoa_r+0xac>
 8006378:	f242 730f 	movw	r3, #9999	; 0x270f
 800637c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800637e:	6013      	str	r3, [r2, #0]
 8006380:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006384:	4333      	orrs	r3, r6
 8006386:	f000 8589 	beq.w	8006e9c <_dtoa_r+0xb9c>
 800638a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800638c:	b953      	cbnz	r3, 80063a4 <_dtoa_r+0xa4>
 800638e:	4b95      	ldr	r3, [pc, #596]	; (80065e4 <_dtoa_r+0x2e4>)
 8006390:	e023      	b.n	80063da <_dtoa_r+0xda>
 8006392:	4b95      	ldr	r3, [pc, #596]	; (80065e8 <_dtoa_r+0x2e8>)
 8006394:	9303      	str	r3, [sp, #12]
 8006396:	3308      	adds	r3, #8
 8006398:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800639a:	6013      	str	r3, [r2, #0]
 800639c:	9803      	ldr	r0, [sp, #12]
 800639e:	b019      	add	sp, #100	; 0x64
 80063a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063a4:	4b8f      	ldr	r3, [pc, #572]	; (80065e4 <_dtoa_r+0x2e4>)
 80063a6:	9303      	str	r3, [sp, #12]
 80063a8:	3303      	adds	r3, #3
 80063aa:	e7f5      	b.n	8006398 <_dtoa_r+0x98>
 80063ac:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80063b0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80063b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80063b8:	2200      	movs	r2, #0
 80063ba:	2300      	movs	r3, #0
 80063bc:	f7fa faf4 	bl	80009a8 <__aeabi_dcmpeq>
 80063c0:	4680      	mov	r8, r0
 80063c2:	b160      	cbz	r0, 80063de <_dtoa_r+0xde>
 80063c4:	2301      	movs	r3, #1
 80063c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80063c8:	6013      	str	r3, [r2, #0]
 80063ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	f000 8562 	beq.w	8006e96 <_dtoa_r+0xb96>
 80063d2:	4b86      	ldr	r3, [pc, #536]	; (80065ec <_dtoa_r+0x2ec>)
 80063d4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80063d6:	6013      	str	r3, [r2, #0]
 80063d8:	3b01      	subs	r3, #1
 80063da:	9303      	str	r3, [sp, #12]
 80063dc:	e7de      	b.n	800639c <_dtoa_r+0x9c>
 80063de:	ab16      	add	r3, sp, #88	; 0x58
 80063e0:	9301      	str	r3, [sp, #4]
 80063e2:	ab17      	add	r3, sp, #92	; 0x5c
 80063e4:	9300      	str	r3, [sp, #0]
 80063e6:	4628      	mov	r0, r5
 80063e8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80063ec:	f001 f98a 	bl	8007704 <__d2b>
 80063f0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80063f4:	4682      	mov	sl, r0
 80063f6:	2c00      	cmp	r4, #0
 80063f8:	d07e      	beq.n	80064f8 <_dtoa_r+0x1f8>
 80063fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80063fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006400:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006404:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006408:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800640c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006410:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006414:	4619      	mov	r1, r3
 8006416:	2200      	movs	r2, #0
 8006418:	4b75      	ldr	r3, [pc, #468]	; (80065f0 <_dtoa_r+0x2f0>)
 800641a:	f7f9 fea5 	bl	8000168 <__aeabi_dsub>
 800641e:	a368      	add	r3, pc, #416	; (adr r3, 80065c0 <_dtoa_r+0x2c0>)
 8006420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006424:	f7fa f858 	bl	80004d8 <__aeabi_dmul>
 8006428:	a367      	add	r3, pc, #412	; (adr r3, 80065c8 <_dtoa_r+0x2c8>)
 800642a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642e:	f7f9 fe9d 	bl	800016c <__adddf3>
 8006432:	4606      	mov	r6, r0
 8006434:	4620      	mov	r0, r4
 8006436:	460f      	mov	r7, r1
 8006438:	f7f9 ffe4 	bl	8000404 <__aeabi_i2d>
 800643c:	a364      	add	r3, pc, #400	; (adr r3, 80065d0 <_dtoa_r+0x2d0>)
 800643e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006442:	f7fa f849 	bl	80004d8 <__aeabi_dmul>
 8006446:	4602      	mov	r2, r0
 8006448:	460b      	mov	r3, r1
 800644a:	4630      	mov	r0, r6
 800644c:	4639      	mov	r1, r7
 800644e:	f7f9 fe8d 	bl	800016c <__adddf3>
 8006452:	4606      	mov	r6, r0
 8006454:	460f      	mov	r7, r1
 8006456:	f7fa faef 	bl	8000a38 <__aeabi_d2iz>
 800645a:	2200      	movs	r2, #0
 800645c:	4683      	mov	fp, r0
 800645e:	2300      	movs	r3, #0
 8006460:	4630      	mov	r0, r6
 8006462:	4639      	mov	r1, r7
 8006464:	f7fa faaa 	bl	80009bc <__aeabi_dcmplt>
 8006468:	b148      	cbz	r0, 800647e <_dtoa_r+0x17e>
 800646a:	4658      	mov	r0, fp
 800646c:	f7f9 ffca 	bl	8000404 <__aeabi_i2d>
 8006470:	4632      	mov	r2, r6
 8006472:	463b      	mov	r3, r7
 8006474:	f7fa fa98 	bl	80009a8 <__aeabi_dcmpeq>
 8006478:	b908      	cbnz	r0, 800647e <_dtoa_r+0x17e>
 800647a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800647e:	f1bb 0f16 	cmp.w	fp, #22
 8006482:	d857      	bhi.n	8006534 <_dtoa_r+0x234>
 8006484:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006488:	4b5a      	ldr	r3, [pc, #360]	; (80065f4 <_dtoa_r+0x2f4>)
 800648a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800648e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006492:	f7fa fa93 	bl	80009bc <__aeabi_dcmplt>
 8006496:	2800      	cmp	r0, #0
 8006498:	d04e      	beq.n	8006538 <_dtoa_r+0x238>
 800649a:	2300      	movs	r3, #0
 800649c:	f10b 3bff 	add.w	fp, fp, #4294967295
 80064a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80064a2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80064a4:	1b1b      	subs	r3, r3, r4
 80064a6:	1e5a      	subs	r2, r3, #1
 80064a8:	bf46      	itte	mi
 80064aa:	f1c3 0901 	rsbmi	r9, r3, #1
 80064ae:	2300      	movmi	r3, #0
 80064b0:	f04f 0900 	movpl.w	r9, #0
 80064b4:	9209      	str	r2, [sp, #36]	; 0x24
 80064b6:	bf48      	it	mi
 80064b8:	9309      	strmi	r3, [sp, #36]	; 0x24
 80064ba:	f1bb 0f00 	cmp.w	fp, #0
 80064be:	db3d      	blt.n	800653c <_dtoa_r+0x23c>
 80064c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064c2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80064c6:	445b      	add	r3, fp
 80064c8:	9309      	str	r3, [sp, #36]	; 0x24
 80064ca:	2300      	movs	r3, #0
 80064cc:	930a      	str	r3, [sp, #40]	; 0x28
 80064ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064d0:	2b09      	cmp	r3, #9
 80064d2:	d867      	bhi.n	80065a4 <_dtoa_r+0x2a4>
 80064d4:	2b05      	cmp	r3, #5
 80064d6:	bfc4      	itt	gt
 80064d8:	3b04      	subgt	r3, #4
 80064da:	9322      	strgt	r3, [sp, #136]	; 0x88
 80064dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064de:	bfc8      	it	gt
 80064e0:	2400      	movgt	r4, #0
 80064e2:	f1a3 0302 	sub.w	r3, r3, #2
 80064e6:	bfd8      	it	le
 80064e8:	2401      	movle	r4, #1
 80064ea:	2b03      	cmp	r3, #3
 80064ec:	f200 8086 	bhi.w	80065fc <_dtoa_r+0x2fc>
 80064f0:	e8df f003 	tbb	[pc, r3]
 80064f4:	5637392c 	.word	0x5637392c
 80064f8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80064fc:	441c      	add	r4, r3
 80064fe:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006502:	2b20      	cmp	r3, #32
 8006504:	bfc1      	itttt	gt
 8006506:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800650a:	fa09 f903 	lslgt.w	r9, r9, r3
 800650e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8006512:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006516:	bfd6      	itet	le
 8006518:	f1c3 0320 	rsble	r3, r3, #32
 800651c:	ea49 0003 	orrgt.w	r0, r9, r3
 8006520:	fa06 f003 	lslle.w	r0, r6, r3
 8006524:	f7f9 ff5e 	bl	80003e4 <__aeabi_ui2d>
 8006528:	2201      	movs	r2, #1
 800652a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800652e:	3c01      	subs	r4, #1
 8006530:	9213      	str	r2, [sp, #76]	; 0x4c
 8006532:	e76f      	b.n	8006414 <_dtoa_r+0x114>
 8006534:	2301      	movs	r3, #1
 8006536:	e7b3      	b.n	80064a0 <_dtoa_r+0x1a0>
 8006538:	900f      	str	r0, [sp, #60]	; 0x3c
 800653a:	e7b2      	b.n	80064a2 <_dtoa_r+0x1a2>
 800653c:	f1cb 0300 	rsb	r3, fp, #0
 8006540:	930a      	str	r3, [sp, #40]	; 0x28
 8006542:	2300      	movs	r3, #0
 8006544:	eba9 090b 	sub.w	r9, r9, fp
 8006548:	930e      	str	r3, [sp, #56]	; 0x38
 800654a:	e7c0      	b.n	80064ce <_dtoa_r+0x1ce>
 800654c:	2300      	movs	r3, #0
 800654e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006550:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006552:	2b00      	cmp	r3, #0
 8006554:	dc55      	bgt.n	8006602 <_dtoa_r+0x302>
 8006556:	2301      	movs	r3, #1
 8006558:	461a      	mov	r2, r3
 800655a:	9306      	str	r3, [sp, #24]
 800655c:	9308      	str	r3, [sp, #32]
 800655e:	9223      	str	r2, [sp, #140]	; 0x8c
 8006560:	e00b      	b.n	800657a <_dtoa_r+0x27a>
 8006562:	2301      	movs	r3, #1
 8006564:	e7f3      	b.n	800654e <_dtoa_r+0x24e>
 8006566:	2300      	movs	r3, #0
 8006568:	930b      	str	r3, [sp, #44]	; 0x2c
 800656a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800656c:	445b      	add	r3, fp
 800656e:	9306      	str	r3, [sp, #24]
 8006570:	3301      	adds	r3, #1
 8006572:	2b01      	cmp	r3, #1
 8006574:	9308      	str	r3, [sp, #32]
 8006576:	bfb8      	it	lt
 8006578:	2301      	movlt	r3, #1
 800657a:	2100      	movs	r1, #0
 800657c:	2204      	movs	r2, #4
 800657e:	69e8      	ldr	r0, [r5, #28]
 8006580:	f102 0614 	add.w	r6, r2, #20
 8006584:	429e      	cmp	r6, r3
 8006586:	d940      	bls.n	800660a <_dtoa_r+0x30a>
 8006588:	6041      	str	r1, [r0, #4]
 800658a:	4628      	mov	r0, r5
 800658c:	f000 fd98 	bl	80070c0 <_Balloc>
 8006590:	9003      	str	r0, [sp, #12]
 8006592:	2800      	cmp	r0, #0
 8006594:	d13c      	bne.n	8006610 <_dtoa_r+0x310>
 8006596:	4602      	mov	r2, r0
 8006598:	f240 11af 	movw	r1, #431	; 0x1af
 800659c:	4b16      	ldr	r3, [pc, #88]	; (80065f8 <_dtoa_r+0x2f8>)
 800659e:	e6c3      	b.n	8006328 <_dtoa_r+0x28>
 80065a0:	2301      	movs	r3, #1
 80065a2:	e7e1      	b.n	8006568 <_dtoa_r+0x268>
 80065a4:	2401      	movs	r4, #1
 80065a6:	2300      	movs	r3, #0
 80065a8:	940b      	str	r4, [sp, #44]	; 0x2c
 80065aa:	9322      	str	r3, [sp, #136]	; 0x88
 80065ac:	f04f 33ff 	mov.w	r3, #4294967295
 80065b0:	2200      	movs	r2, #0
 80065b2:	9306      	str	r3, [sp, #24]
 80065b4:	9308      	str	r3, [sp, #32]
 80065b6:	2312      	movs	r3, #18
 80065b8:	e7d1      	b.n	800655e <_dtoa_r+0x25e>
 80065ba:	bf00      	nop
 80065bc:	f3af 8000 	nop.w
 80065c0:	636f4361 	.word	0x636f4361
 80065c4:	3fd287a7 	.word	0x3fd287a7
 80065c8:	8b60c8b3 	.word	0x8b60c8b3
 80065cc:	3fc68a28 	.word	0x3fc68a28
 80065d0:	509f79fb 	.word	0x509f79fb
 80065d4:	3fd34413 	.word	0x3fd34413
 80065d8:	08008448 	.word	0x08008448
 80065dc:	0800845f 	.word	0x0800845f
 80065e0:	7ff00000 	.word	0x7ff00000
 80065e4:	08008444 	.word	0x08008444
 80065e8:	0800843b 	.word	0x0800843b
 80065ec:	08008418 	.word	0x08008418
 80065f0:	3ff80000 	.word	0x3ff80000
 80065f4:	08008550 	.word	0x08008550
 80065f8:	080084b7 	.word	0x080084b7
 80065fc:	2301      	movs	r3, #1
 80065fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8006600:	e7d4      	b.n	80065ac <_dtoa_r+0x2ac>
 8006602:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006604:	9306      	str	r3, [sp, #24]
 8006606:	9308      	str	r3, [sp, #32]
 8006608:	e7b7      	b.n	800657a <_dtoa_r+0x27a>
 800660a:	3101      	adds	r1, #1
 800660c:	0052      	lsls	r2, r2, #1
 800660e:	e7b7      	b.n	8006580 <_dtoa_r+0x280>
 8006610:	69eb      	ldr	r3, [r5, #28]
 8006612:	9a03      	ldr	r2, [sp, #12]
 8006614:	601a      	str	r2, [r3, #0]
 8006616:	9b08      	ldr	r3, [sp, #32]
 8006618:	2b0e      	cmp	r3, #14
 800661a:	f200 80a8 	bhi.w	800676e <_dtoa_r+0x46e>
 800661e:	2c00      	cmp	r4, #0
 8006620:	f000 80a5 	beq.w	800676e <_dtoa_r+0x46e>
 8006624:	f1bb 0f00 	cmp.w	fp, #0
 8006628:	dd34      	ble.n	8006694 <_dtoa_r+0x394>
 800662a:	4b9a      	ldr	r3, [pc, #616]	; (8006894 <_dtoa_r+0x594>)
 800662c:	f00b 020f 	and.w	r2, fp, #15
 8006630:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006634:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006638:	e9d3 3400 	ldrd	r3, r4, [r3]
 800663c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006640:	ea4f 142b 	mov.w	r4, fp, asr #4
 8006644:	d016      	beq.n	8006674 <_dtoa_r+0x374>
 8006646:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800664a:	4b93      	ldr	r3, [pc, #588]	; (8006898 <_dtoa_r+0x598>)
 800664c:	2703      	movs	r7, #3
 800664e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006652:	f7fa f86b 	bl	800072c <__aeabi_ddiv>
 8006656:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800665a:	f004 040f 	and.w	r4, r4, #15
 800665e:	4e8e      	ldr	r6, [pc, #568]	; (8006898 <_dtoa_r+0x598>)
 8006660:	b954      	cbnz	r4, 8006678 <_dtoa_r+0x378>
 8006662:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006666:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800666a:	f7fa f85f 	bl	800072c <__aeabi_ddiv>
 800666e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006672:	e029      	b.n	80066c8 <_dtoa_r+0x3c8>
 8006674:	2702      	movs	r7, #2
 8006676:	e7f2      	b.n	800665e <_dtoa_r+0x35e>
 8006678:	07e1      	lsls	r1, r4, #31
 800667a:	d508      	bpl.n	800668e <_dtoa_r+0x38e>
 800667c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006680:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006684:	f7f9 ff28 	bl	80004d8 <__aeabi_dmul>
 8006688:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800668c:	3701      	adds	r7, #1
 800668e:	1064      	asrs	r4, r4, #1
 8006690:	3608      	adds	r6, #8
 8006692:	e7e5      	b.n	8006660 <_dtoa_r+0x360>
 8006694:	f000 80a5 	beq.w	80067e2 <_dtoa_r+0x4e2>
 8006698:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800669c:	f1cb 0400 	rsb	r4, fp, #0
 80066a0:	4b7c      	ldr	r3, [pc, #496]	; (8006894 <_dtoa_r+0x594>)
 80066a2:	f004 020f 	and.w	r2, r4, #15
 80066a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ae:	f7f9 ff13 	bl	80004d8 <__aeabi_dmul>
 80066b2:	2702      	movs	r7, #2
 80066b4:	2300      	movs	r3, #0
 80066b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066ba:	4e77      	ldr	r6, [pc, #476]	; (8006898 <_dtoa_r+0x598>)
 80066bc:	1124      	asrs	r4, r4, #4
 80066be:	2c00      	cmp	r4, #0
 80066c0:	f040 8084 	bne.w	80067cc <_dtoa_r+0x4cc>
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1d2      	bne.n	800666e <_dtoa_r+0x36e>
 80066c8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80066cc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80066d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	f000 8087 	beq.w	80067e6 <_dtoa_r+0x4e6>
 80066d8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80066dc:	2200      	movs	r2, #0
 80066de:	4b6f      	ldr	r3, [pc, #444]	; (800689c <_dtoa_r+0x59c>)
 80066e0:	f7fa f96c 	bl	80009bc <__aeabi_dcmplt>
 80066e4:	2800      	cmp	r0, #0
 80066e6:	d07e      	beq.n	80067e6 <_dtoa_r+0x4e6>
 80066e8:	9b08      	ldr	r3, [sp, #32]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d07b      	beq.n	80067e6 <_dtoa_r+0x4e6>
 80066ee:	9b06      	ldr	r3, [sp, #24]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	dd38      	ble.n	8006766 <_dtoa_r+0x466>
 80066f4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80066f8:	2200      	movs	r2, #0
 80066fa:	4b69      	ldr	r3, [pc, #420]	; (80068a0 <_dtoa_r+0x5a0>)
 80066fc:	f7f9 feec 	bl	80004d8 <__aeabi_dmul>
 8006700:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006704:	9c06      	ldr	r4, [sp, #24]
 8006706:	f10b 38ff 	add.w	r8, fp, #4294967295
 800670a:	3701      	adds	r7, #1
 800670c:	4638      	mov	r0, r7
 800670e:	f7f9 fe79 	bl	8000404 <__aeabi_i2d>
 8006712:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006716:	f7f9 fedf 	bl	80004d8 <__aeabi_dmul>
 800671a:	2200      	movs	r2, #0
 800671c:	4b61      	ldr	r3, [pc, #388]	; (80068a4 <_dtoa_r+0x5a4>)
 800671e:	f7f9 fd25 	bl	800016c <__adddf3>
 8006722:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006726:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800672a:	9611      	str	r6, [sp, #68]	; 0x44
 800672c:	2c00      	cmp	r4, #0
 800672e:	d15d      	bne.n	80067ec <_dtoa_r+0x4ec>
 8006730:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006734:	2200      	movs	r2, #0
 8006736:	4b5c      	ldr	r3, [pc, #368]	; (80068a8 <_dtoa_r+0x5a8>)
 8006738:	f7f9 fd16 	bl	8000168 <__aeabi_dsub>
 800673c:	4602      	mov	r2, r0
 800673e:	460b      	mov	r3, r1
 8006740:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006744:	4633      	mov	r3, r6
 8006746:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006748:	f7fa f956 	bl	80009f8 <__aeabi_dcmpgt>
 800674c:	2800      	cmp	r0, #0
 800674e:	f040 8295 	bne.w	8006c7c <_dtoa_r+0x97c>
 8006752:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006756:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006758:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800675c:	f7fa f92e 	bl	80009bc <__aeabi_dcmplt>
 8006760:	2800      	cmp	r0, #0
 8006762:	f040 8289 	bne.w	8006c78 <_dtoa_r+0x978>
 8006766:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800676a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800676e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006770:	2b00      	cmp	r3, #0
 8006772:	f2c0 8151 	blt.w	8006a18 <_dtoa_r+0x718>
 8006776:	f1bb 0f0e 	cmp.w	fp, #14
 800677a:	f300 814d 	bgt.w	8006a18 <_dtoa_r+0x718>
 800677e:	4b45      	ldr	r3, [pc, #276]	; (8006894 <_dtoa_r+0x594>)
 8006780:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006784:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006788:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800678c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800678e:	2b00      	cmp	r3, #0
 8006790:	f280 80da 	bge.w	8006948 <_dtoa_r+0x648>
 8006794:	9b08      	ldr	r3, [sp, #32]
 8006796:	2b00      	cmp	r3, #0
 8006798:	f300 80d6 	bgt.w	8006948 <_dtoa_r+0x648>
 800679c:	f040 826b 	bne.w	8006c76 <_dtoa_r+0x976>
 80067a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80067a4:	2200      	movs	r2, #0
 80067a6:	4b40      	ldr	r3, [pc, #256]	; (80068a8 <_dtoa_r+0x5a8>)
 80067a8:	f7f9 fe96 	bl	80004d8 <__aeabi_dmul>
 80067ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067b0:	f7fa f918 	bl	80009e4 <__aeabi_dcmpge>
 80067b4:	9c08      	ldr	r4, [sp, #32]
 80067b6:	4626      	mov	r6, r4
 80067b8:	2800      	cmp	r0, #0
 80067ba:	f040 8241 	bne.w	8006c40 <_dtoa_r+0x940>
 80067be:	2331      	movs	r3, #49	; 0x31
 80067c0:	9f03      	ldr	r7, [sp, #12]
 80067c2:	f10b 0b01 	add.w	fp, fp, #1
 80067c6:	f807 3b01 	strb.w	r3, [r7], #1
 80067ca:	e23d      	b.n	8006c48 <_dtoa_r+0x948>
 80067cc:	07e2      	lsls	r2, r4, #31
 80067ce:	d505      	bpl.n	80067dc <_dtoa_r+0x4dc>
 80067d0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80067d4:	f7f9 fe80 	bl	80004d8 <__aeabi_dmul>
 80067d8:	2301      	movs	r3, #1
 80067da:	3701      	adds	r7, #1
 80067dc:	1064      	asrs	r4, r4, #1
 80067de:	3608      	adds	r6, #8
 80067e0:	e76d      	b.n	80066be <_dtoa_r+0x3be>
 80067e2:	2702      	movs	r7, #2
 80067e4:	e770      	b.n	80066c8 <_dtoa_r+0x3c8>
 80067e6:	46d8      	mov	r8, fp
 80067e8:	9c08      	ldr	r4, [sp, #32]
 80067ea:	e78f      	b.n	800670c <_dtoa_r+0x40c>
 80067ec:	9903      	ldr	r1, [sp, #12]
 80067ee:	4b29      	ldr	r3, [pc, #164]	; (8006894 <_dtoa_r+0x594>)
 80067f0:	4421      	add	r1, r4
 80067f2:	9112      	str	r1, [sp, #72]	; 0x48
 80067f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80067f6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80067fa:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80067fe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006802:	2900      	cmp	r1, #0
 8006804:	d054      	beq.n	80068b0 <_dtoa_r+0x5b0>
 8006806:	2000      	movs	r0, #0
 8006808:	4928      	ldr	r1, [pc, #160]	; (80068ac <_dtoa_r+0x5ac>)
 800680a:	f7f9 ff8f 	bl	800072c <__aeabi_ddiv>
 800680e:	463b      	mov	r3, r7
 8006810:	4632      	mov	r2, r6
 8006812:	f7f9 fca9 	bl	8000168 <__aeabi_dsub>
 8006816:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800681a:	9f03      	ldr	r7, [sp, #12]
 800681c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006820:	f7fa f90a 	bl	8000a38 <__aeabi_d2iz>
 8006824:	4604      	mov	r4, r0
 8006826:	f7f9 fded 	bl	8000404 <__aeabi_i2d>
 800682a:	4602      	mov	r2, r0
 800682c:	460b      	mov	r3, r1
 800682e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006832:	f7f9 fc99 	bl	8000168 <__aeabi_dsub>
 8006836:	4602      	mov	r2, r0
 8006838:	460b      	mov	r3, r1
 800683a:	3430      	adds	r4, #48	; 0x30
 800683c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006840:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006844:	f807 4b01 	strb.w	r4, [r7], #1
 8006848:	f7fa f8b8 	bl	80009bc <__aeabi_dcmplt>
 800684c:	2800      	cmp	r0, #0
 800684e:	d173      	bne.n	8006938 <_dtoa_r+0x638>
 8006850:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006854:	2000      	movs	r0, #0
 8006856:	4911      	ldr	r1, [pc, #68]	; (800689c <_dtoa_r+0x59c>)
 8006858:	f7f9 fc86 	bl	8000168 <__aeabi_dsub>
 800685c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006860:	f7fa f8ac 	bl	80009bc <__aeabi_dcmplt>
 8006864:	2800      	cmp	r0, #0
 8006866:	f040 80b6 	bne.w	80069d6 <_dtoa_r+0x6d6>
 800686a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800686c:	429f      	cmp	r7, r3
 800686e:	f43f af7a 	beq.w	8006766 <_dtoa_r+0x466>
 8006872:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006876:	2200      	movs	r2, #0
 8006878:	4b09      	ldr	r3, [pc, #36]	; (80068a0 <_dtoa_r+0x5a0>)
 800687a:	f7f9 fe2d 	bl	80004d8 <__aeabi_dmul>
 800687e:	2200      	movs	r2, #0
 8006880:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006884:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006888:	4b05      	ldr	r3, [pc, #20]	; (80068a0 <_dtoa_r+0x5a0>)
 800688a:	f7f9 fe25 	bl	80004d8 <__aeabi_dmul>
 800688e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006892:	e7c3      	b.n	800681c <_dtoa_r+0x51c>
 8006894:	08008550 	.word	0x08008550
 8006898:	08008528 	.word	0x08008528
 800689c:	3ff00000 	.word	0x3ff00000
 80068a0:	40240000 	.word	0x40240000
 80068a4:	401c0000 	.word	0x401c0000
 80068a8:	40140000 	.word	0x40140000
 80068ac:	3fe00000 	.word	0x3fe00000
 80068b0:	4630      	mov	r0, r6
 80068b2:	4639      	mov	r1, r7
 80068b4:	f7f9 fe10 	bl	80004d8 <__aeabi_dmul>
 80068b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80068ba:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80068be:	9c03      	ldr	r4, [sp, #12]
 80068c0:	9314      	str	r3, [sp, #80]	; 0x50
 80068c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068c6:	f7fa f8b7 	bl	8000a38 <__aeabi_d2iz>
 80068ca:	9015      	str	r0, [sp, #84]	; 0x54
 80068cc:	f7f9 fd9a 	bl	8000404 <__aeabi_i2d>
 80068d0:	4602      	mov	r2, r0
 80068d2:	460b      	mov	r3, r1
 80068d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068d8:	f7f9 fc46 	bl	8000168 <__aeabi_dsub>
 80068dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80068de:	4606      	mov	r6, r0
 80068e0:	3330      	adds	r3, #48	; 0x30
 80068e2:	f804 3b01 	strb.w	r3, [r4], #1
 80068e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80068e8:	460f      	mov	r7, r1
 80068ea:	429c      	cmp	r4, r3
 80068ec:	f04f 0200 	mov.w	r2, #0
 80068f0:	d124      	bne.n	800693c <_dtoa_r+0x63c>
 80068f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80068f6:	4baf      	ldr	r3, [pc, #700]	; (8006bb4 <_dtoa_r+0x8b4>)
 80068f8:	f7f9 fc38 	bl	800016c <__adddf3>
 80068fc:	4602      	mov	r2, r0
 80068fe:	460b      	mov	r3, r1
 8006900:	4630      	mov	r0, r6
 8006902:	4639      	mov	r1, r7
 8006904:	f7fa f878 	bl	80009f8 <__aeabi_dcmpgt>
 8006908:	2800      	cmp	r0, #0
 800690a:	d163      	bne.n	80069d4 <_dtoa_r+0x6d4>
 800690c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006910:	2000      	movs	r0, #0
 8006912:	49a8      	ldr	r1, [pc, #672]	; (8006bb4 <_dtoa_r+0x8b4>)
 8006914:	f7f9 fc28 	bl	8000168 <__aeabi_dsub>
 8006918:	4602      	mov	r2, r0
 800691a:	460b      	mov	r3, r1
 800691c:	4630      	mov	r0, r6
 800691e:	4639      	mov	r1, r7
 8006920:	f7fa f84c 	bl	80009bc <__aeabi_dcmplt>
 8006924:	2800      	cmp	r0, #0
 8006926:	f43f af1e 	beq.w	8006766 <_dtoa_r+0x466>
 800692a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800692c:	1e7b      	subs	r3, r7, #1
 800692e:	9314      	str	r3, [sp, #80]	; 0x50
 8006930:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006934:	2b30      	cmp	r3, #48	; 0x30
 8006936:	d0f8      	beq.n	800692a <_dtoa_r+0x62a>
 8006938:	46c3      	mov	fp, r8
 800693a:	e03b      	b.n	80069b4 <_dtoa_r+0x6b4>
 800693c:	4b9e      	ldr	r3, [pc, #632]	; (8006bb8 <_dtoa_r+0x8b8>)
 800693e:	f7f9 fdcb 	bl	80004d8 <__aeabi_dmul>
 8006942:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006946:	e7bc      	b.n	80068c2 <_dtoa_r+0x5c2>
 8006948:	9f03      	ldr	r7, [sp, #12]
 800694a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800694e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006952:	4640      	mov	r0, r8
 8006954:	4649      	mov	r1, r9
 8006956:	f7f9 fee9 	bl	800072c <__aeabi_ddiv>
 800695a:	f7fa f86d 	bl	8000a38 <__aeabi_d2iz>
 800695e:	4604      	mov	r4, r0
 8006960:	f7f9 fd50 	bl	8000404 <__aeabi_i2d>
 8006964:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006968:	f7f9 fdb6 	bl	80004d8 <__aeabi_dmul>
 800696c:	4602      	mov	r2, r0
 800696e:	460b      	mov	r3, r1
 8006970:	4640      	mov	r0, r8
 8006972:	4649      	mov	r1, r9
 8006974:	f7f9 fbf8 	bl	8000168 <__aeabi_dsub>
 8006978:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800697c:	f807 6b01 	strb.w	r6, [r7], #1
 8006980:	9e03      	ldr	r6, [sp, #12]
 8006982:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006986:	1bbe      	subs	r6, r7, r6
 8006988:	45b4      	cmp	ip, r6
 800698a:	4602      	mov	r2, r0
 800698c:	460b      	mov	r3, r1
 800698e:	d136      	bne.n	80069fe <_dtoa_r+0x6fe>
 8006990:	f7f9 fbec 	bl	800016c <__adddf3>
 8006994:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006998:	4680      	mov	r8, r0
 800699a:	4689      	mov	r9, r1
 800699c:	f7fa f82c 	bl	80009f8 <__aeabi_dcmpgt>
 80069a0:	bb58      	cbnz	r0, 80069fa <_dtoa_r+0x6fa>
 80069a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80069a6:	4640      	mov	r0, r8
 80069a8:	4649      	mov	r1, r9
 80069aa:	f7f9 fffd 	bl	80009a8 <__aeabi_dcmpeq>
 80069ae:	b108      	cbz	r0, 80069b4 <_dtoa_r+0x6b4>
 80069b0:	07e3      	lsls	r3, r4, #31
 80069b2:	d422      	bmi.n	80069fa <_dtoa_r+0x6fa>
 80069b4:	4651      	mov	r1, sl
 80069b6:	4628      	mov	r0, r5
 80069b8:	f000 fbc2 	bl	8007140 <_Bfree>
 80069bc:	2300      	movs	r3, #0
 80069be:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80069c0:	703b      	strb	r3, [r7, #0]
 80069c2:	f10b 0301 	add.w	r3, fp, #1
 80069c6:	6013      	str	r3, [r2, #0]
 80069c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	f43f ace6 	beq.w	800639c <_dtoa_r+0x9c>
 80069d0:	601f      	str	r7, [r3, #0]
 80069d2:	e4e3      	b.n	800639c <_dtoa_r+0x9c>
 80069d4:	4627      	mov	r7, r4
 80069d6:	463b      	mov	r3, r7
 80069d8:	461f      	mov	r7, r3
 80069da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80069de:	2a39      	cmp	r2, #57	; 0x39
 80069e0:	d107      	bne.n	80069f2 <_dtoa_r+0x6f2>
 80069e2:	9a03      	ldr	r2, [sp, #12]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d1f7      	bne.n	80069d8 <_dtoa_r+0x6d8>
 80069e8:	2230      	movs	r2, #48	; 0x30
 80069ea:	9903      	ldr	r1, [sp, #12]
 80069ec:	f108 0801 	add.w	r8, r8, #1
 80069f0:	700a      	strb	r2, [r1, #0]
 80069f2:	781a      	ldrb	r2, [r3, #0]
 80069f4:	3201      	adds	r2, #1
 80069f6:	701a      	strb	r2, [r3, #0]
 80069f8:	e79e      	b.n	8006938 <_dtoa_r+0x638>
 80069fa:	46d8      	mov	r8, fp
 80069fc:	e7eb      	b.n	80069d6 <_dtoa_r+0x6d6>
 80069fe:	2200      	movs	r2, #0
 8006a00:	4b6d      	ldr	r3, [pc, #436]	; (8006bb8 <_dtoa_r+0x8b8>)
 8006a02:	f7f9 fd69 	bl	80004d8 <__aeabi_dmul>
 8006a06:	2200      	movs	r2, #0
 8006a08:	2300      	movs	r3, #0
 8006a0a:	4680      	mov	r8, r0
 8006a0c:	4689      	mov	r9, r1
 8006a0e:	f7f9 ffcb 	bl	80009a8 <__aeabi_dcmpeq>
 8006a12:	2800      	cmp	r0, #0
 8006a14:	d09b      	beq.n	800694e <_dtoa_r+0x64e>
 8006a16:	e7cd      	b.n	80069b4 <_dtoa_r+0x6b4>
 8006a18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a1a:	2a00      	cmp	r2, #0
 8006a1c:	f000 80c4 	beq.w	8006ba8 <_dtoa_r+0x8a8>
 8006a20:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006a22:	2a01      	cmp	r2, #1
 8006a24:	f300 80a8 	bgt.w	8006b78 <_dtoa_r+0x878>
 8006a28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006a2a:	2a00      	cmp	r2, #0
 8006a2c:	f000 80a0 	beq.w	8006b70 <_dtoa_r+0x870>
 8006a30:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006a34:	464f      	mov	r7, r9
 8006a36:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006a38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a3a:	2101      	movs	r1, #1
 8006a3c:	441a      	add	r2, r3
 8006a3e:	4628      	mov	r0, r5
 8006a40:	4499      	add	r9, r3
 8006a42:	9209      	str	r2, [sp, #36]	; 0x24
 8006a44:	f000 fc32 	bl	80072ac <__i2b>
 8006a48:	4606      	mov	r6, r0
 8006a4a:	b15f      	cbz	r7, 8006a64 <_dtoa_r+0x764>
 8006a4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	dd08      	ble.n	8006a64 <_dtoa_r+0x764>
 8006a52:	42bb      	cmp	r3, r7
 8006a54:	bfa8      	it	ge
 8006a56:	463b      	movge	r3, r7
 8006a58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a5a:	eba9 0903 	sub.w	r9, r9, r3
 8006a5e:	1aff      	subs	r7, r7, r3
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	9309      	str	r3, [sp, #36]	; 0x24
 8006a64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a66:	b1f3      	cbz	r3, 8006aa6 <_dtoa_r+0x7a6>
 8006a68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	f000 80a0 	beq.w	8006bb0 <_dtoa_r+0x8b0>
 8006a70:	2c00      	cmp	r4, #0
 8006a72:	dd10      	ble.n	8006a96 <_dtoa_r+0x796>
 8006a74:	4631      	mov	r1, r6
 8006a76:	4622      	mov	r2, r4
 8006a78:	4628      	mov	r0, r5
 8006a7a:	f000 fcd5 	bl	8007428 <__pow5mult>
 8006a7e:	4652      	mov	r2, sl
 8006a80:	4601      	mov	r1, r0
 8006a82:	4606      	mov	r6, r0
 8006a84:	4628      	mov	r0, r5
 8006a86:	f000 fc27 	bl	80072d8 <__multiply>
 8006a8a:	4680      	mov	r8, r0
 8006a8c:	4651      	mov	r1, sl
 8006a8e:	4628      	mov	r0, r5
 8006a90:	f000 fb56 	bl	8007140 <_Bfree>
 8006a94:	46c2      	mov	sl, r8
 8006a96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a98:	1b1a      	subs	r2, r3, r4
 8006a9a:	d004      	beq.n	8006aa6 <_dtoa_r+0x7a6>
 8006a9c:	4651      	mov	r1, sl
 8006a9e:	4628      	mov	r0, r5
 8006aa0:	f000 fcc2 	bl	8007428 <__pow5mult>
 8006aa4:	4682      	mov	sl, r0
 8006aa6:	2101      	movs	r1, #1
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	f000 fbff 	bl	80072ac <__i2b>
 8006aae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ab0:	4604      	mov	r4, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f340 8082 	ble.w	8006bbc <_dtoa_r+0x8bc>
 8006ab8:	461a      	mov	r2, r3
 8006aba:	4601      	mov	r1, r0
 8006abc:	4628      	mov	r0, r5
 8006abe:	f000 fcb3 	bl	8007428 <__pow5mult>
 8006ac2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ac4:	4604      	mov	r4, r0
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	dd7b      	ble.n	8006bc2 <_dtoa_r+0x8c2>
 8006aca:	f04f 0800 	mov.w	r8, #0
 8006ace:	6923      	ldr	r3, [r4, #16]
 8006ad0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006ad4:	6918      	ldr	r0, [r3, #16]
 8006ad6:	f000 fb9b 	bl	8007210 <__hi0bits>
 8006ada:	f1c0 0020 	rsb	r0, r0, #32
 8006ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ae0:	4418      	add	r0, r3
 8006ae2:	f010 001f 	ands.w	r0, r0, #31
 8006ae6:	f000 8092 	beq.w	8006c0e <_dtoa_r+0x90e>
 8006aea:	f1c0 0320 	rsb	r3, r0, #32
 8006aee:	2b04      	cmp	r3, #4
 8006af0:	f340 8085 	ble.w	8006bfe <_dtoa_r+0x8fe>
 8006af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006af6:	f1c0 001c 	rsb	r0, r0, #28
 8006afa:	4403      	add	r3, r0
 8006afc:	4481      	add	r9, r0
 8006afe:	4407      	add	r7, r0
 8006b00:	9309      	str	r3, [sp, #36]	; 0x24
 8006b02:	f1b9 0f00 	cmp.w	r9, #0
 8006b06:	dd05      	ble.n	8006b14 <_dtoa_r+0x814>
 8006b08:	4651      	mov	r1, sl
 8006b0a:	464a      	mov	r2, r9
 8006b0c:	4628      	mov	r0, r5
 8006b0e:	f000 fce5 	bl	80074dc <__lshift>
 8006b12:	4682      	mov	sl, r0
 8006b14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	dd05      	ble.n	8006b26 <_dtoa_r+0x826>
 8006b1a:	4621      	mov	r1, r4
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	4628      	mov	r0, r5
 8006b20:	f000 fcdc 	bl	80074dc <__lshift>
 8006b24:	4604      	mov	r4, r0
 8006b26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d072      	beq.n	8006c12 <_dtoa_r+0x912>
 8006b2c:	4621      	mov	r1, r4
 8006b2e:	4650      	mov	r0, sl
 8006b30:	f000 fd40 	bl	80075b4 <__mcmp>
 8006b34:	2800      	cmp	r0, #0
 8006b36:	da6c      	bge.n	8006c12 <_dtoa_r+0x912>
 8006b38:	2300      	movs	r3, #0
 8006b3a:	4651      	mov	r1, sl
 8006b3c:	220a      	movs	r2, #10
 8006b3e:	4628      	mov	r0, r5
 8006b40:	f000 fb20 	bl	8007184 <__multadd>
 8006b44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b46:	4682      	mov	sl, r0
 8006b48:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	f000 81ac 	beq.w	8006eaa <_dtoa_r+0xbaa>
 8006b52:	2300      	movs	r3, #0
 8006b54:	4631      	mov	r1, r6
 8006b56:	220a      	movs	r2, #10
 8006b58:	4628      	mov	r0, r5
 8006b5a:	f000 fb13 	bl	8007184 <__multadd>
 8006b5e:	9b06      	ldr	r3, [sp, #24]
 8006b60:	4606      	mov	r6, r0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	f300 8093 	bgt.w	8006c8e <_dtoa_r+0x98e>
 8006b68:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	dc59      	bgt.n	8006c22 <_dtoa_r+0x922>
 8006b6e:	e08e      	b.n	8006c8e <_dtoa_r+0x98e>
 8006b70:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006b72:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006b76:	e75d      	b.n	8006a34 <_dtoa_r+0x734>
 8006b78:	9b08      	ldr	r3, [sp, #32]
 8006b7a:	1e5c      	subs	r4, r3, #1
 8006b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b7e:	42a3      	cmp	r3, r4
 8006b80:	bfbf      	itttt	lt
 8006b82:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006b84:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8006b86:	1ae3      	sublt	r3, r4, r3
 8006b88:	18d2      	addlt	r2, r2, r3
 8006b8a:	bfa8      	it	ge
 8006b8c:	1b1c      	subge	r4, r3, r4
 8006b8e:	9b08      	ldr	r3, [sp, #32]
 8006b90:	bfbe      	ittt	lt
 8006b92:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006b94:	920e      	strlt	r2, [sp, #56]	; 0x38
 8006b96:	2400      	movlt	r4, #0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	bfb5      	itete	lt
 8006b9c:	eba9 0703 	sublt.w	r7, r9, r3
 8006ba0:	464f      	movge	r7, r9
 8006ba2:	2300      	movlt	r3, #0
 8006ba4:	9b08      	ldrge	r3, [sp, #32]
 8006ba6:	e747      	b.n	8006a38 <_dtoa_r+0x738>
 8006ba8:	464f      	mov	r7, r9
 8006baa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006bac:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006bae:	e74c      	b.n	8006a4a <_dtoa_r+0x74a>
 8006bb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bb2:	e773      	b.n	8006a9c <_dtoa_r+0x79c>
 8006bb4:	3fe00000 	.word	0x3fe00000
 8006bb8:	40240000 	.word	0x40240000
 8006bbc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	dc18      	bgt.n	8006bf4 <_dtoa_r+0x8f4>
 8006bc2:	9b04      	ldr	r3, [sp, #16]
 8006bc4:	b9b3      	cbnz	r3, 8006bf4 <_dtoa_r+0x8f4>
 8006bc6:	9b05      	ldr	r3, [sp, #20]
 8006bc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006bcc:	b993      	cbnz	r3, 8006bf4 <_dtoa_r+0x8f4>
 8006bce:	9b05      	ldr	r3, [sp, #20]
 8006bd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006bd4:	0d1b      	lsrs	r3, r3, #20
 8006bd6:	051b      	lsls	r3, r3, #20
 8006bd8:	b17b      	cbz	r3, 8006bfa <_dtoa_r+0x8fa>
 8006bda:	f04f 0801 	mov.w	r8, #1
 8006bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006be0:	f109 0901 	add.w	r9, r9, #1
 8006be4:	3301      	adds	r3, #1
 8006be6:	9309      	str	r3, [sp, #36]	; 0x24
 8006be8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	f47f af6f 	bne.w	8006ace <_dtoa_r+0x7ce>
 8006bf0:	2001      	movs	r0, #1
 8006bf2:	e774      	b.n	8006ade <_dtoa_r+0x7de>
 8006bf4:	f04f 0800 	mov.w	r8, #0
 8006bf8:	e7f6      	b.n	8006be8 <_dtoa_r+0x8e8>
 8006bfa:	4698      	mov	r8, r3
 8006bfc:	e7f4      	b.n	8006be8 <_dtoa_r+0x8e8>
 8006bfe:	d080      	beq.n	8006b02 <_dtoa_r+0x802>
 8006c00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c02:	331c      	adds	r3, #28
 8006c04:	441a      	add	r2, r3
 8006c06:	4499      	add	r9, r3
 8006c08:	441f      	add	r7, r3
 8006c0a:	9209      	str	r2, [sp, #36]	; 0x24
 8006c0c:	e779      	b.n	8006b02 <_dtoa_r+0x802>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	e7f6      	b.n	8006c00 <_dtoa_r+0x900>
 8006c12:	9b08      	ldr	r3, [sp, #32]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	dc34      	bgt.n	8006c82 <_dtoa_r+0x982>
 8006c18:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c1a:	2b02      	cmp	r3, #2
 8006c1c:	dd31      	ble.n	8006c82 <_dtoa_r+0x982>
 8006c1e:	9b08      	ldr	r3, [sp, #32]
 8006c20:	9306      	str	r3, [sp, #24]
 8006c22:	9b06      	ldr	r3, [sp, #24]
 8006c24:	b963      	cbnz	r3, 8006c40 <_dtoa_r+0x940>
 8006c26:	4621      	mov	r1, r4
 8006c28:	2205      	movs	r2, #5
 8006c2a:	4628      	mov	r0, r5
 8006c2c:	f000 faaa 	bl	8007184 <__multadd>
 8006c30:	4601      	mov	r1, r0
 8006c32:	4604      	mov	r4, r0
 8006c34:	4650      	mov	r0, sl
 8006c36:	f000 fcbd 	bl	80075b4 <__mcmp>
 8006c3a:	2800      	cmp	r0, #0
 8006c3c:	f73f adbf 	bgt.w	80067be <_dtoa_r+0x4be>
 8006c40:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006c42:	9f03      	ldr	r7, [sp, #12]
 8006c44:	ea6f 0b03 	mvn.w	fp, r3
 8006c48:	f04f 0800 	mov.w	r8, #0
 8006c4c:	4621      	mov	r1, r4
 8006c4e:	4628      	mov	r0, r5
 8006c50:	f000 fa76 	bl	8007140 <_Bfree>
 8006c54:	2e00      	cmp	r6, #0
 8006c56:	f43f aead 	beq.w	80069b4 <_dtoa_r+0x6b4>
 8006c5a:	f1b8 0f00 	cmp.w	r8, #0
 8006c5e:	d005      	beq.n	8006c6c <_dtoa_r+0x96c>
 8006c60:	45b0      	cmp	r8, r6
 8006c62:	d003      	beq.n	8006c6c <_dtoa_r+0x96c>
 8006c64:	4641      	mov	r1, r8
 8006c66:	4628      	mov	r0, r5
 8006c68:	f000 fa6a 	bl	8007140 <_Bfree>
 8006c6c:	4631      	mov	r1, r6
 8006c6e:	4628      	mov	r0, r5
 8006c70:	f000 fa66 	bl	8007140 <_Bfree>
 8006c74:	e69e      	b.n	80069b4 <_dtoa_r+0x6b4>
 8006c76:	2400      	movs	r4, #0
 8006c78:	4626      	mov	r6, r4
 8006c7a:	e7e1      	b.n	8006c40 <_dtoa_r+0x940>
 8006c7c:	46c3      	mov	fp, r8
 8006c7e:	4626      	mov	r6, r4
 8006c80:	e59d      	b.n	80067be <_dtoa_r+0x4be>
 8006c82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	f000 80c8 	beq.w	8006e1a <_dtoa_r+0xb1a>
 8006c8a:	9b08      	ldr	r3, [sp, #32]
 8006c8c:	9306      	str	r3, [sp, #24]
 8006c8e:	2f00      	cmp	r7, #0
 8006c90:	dd05      	ble.n	8006c9e <_dtoa_r+0x99e>
 8006c92:	4631      	mov	r1, r6
 8006c94:	463a      	mov	r2, r7
 8006c96:	4628      	mov	r0, r5
 8006c98:	f000 fc20 	bl	80074dc <__lshift>
 8006c9c:	4606      	mov	r6, r0
 8006c9e:	f1b8 0f00 	cmp.w	r8, #0
 8006ca2:	d05b      	beq.n	8006d5c <_dtoa_r+0xa5c>
 8006ca4:	4628      	mov	r0, r5
 8006ca6:	6871      	ldr	r1, [r6, #4]
 8006ca8:	f000 fa0a 	bl	80070c0 <_Balloc>
 8006cac:	4607      	mov	r7, r0
 8006cae:	b928      	cbnz	r0, 8006cbc <_dtoa_r+0x9bc>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006cb6:	4b81      	ldr	r3, [pc, #516]	; (8006ebc <_dtoa_r+0xbbc>)
 8006cb8:	f7ff bb36 	b.w	8006328 <_dtoa_r+0x28>
 8006cbc:	6932      	ldr	r2, [r6, #16]
 8006cbe:	f106 010c 	add.w	r1, r6, #12
 8006cc2:	3202      	adds	r2, #2
 8006cc4:	0092      	lsls	r2, r2, #2
 8006cc6:	300c      	adds	r0, #12
 8006cc8:	f000 ff9e 	bl	8007c08 <memcpy>
 8006ccc:	2201      	movs	r2, #1
 8006cce:	4639      	mov	r1, r7
 8006cd0:	4628      	mov	r0, r5
 8006cd2:	f000 fc03 	bl	80074dc <__lshift>
 8006cd6:	46b0      	mov	r8, r6
 8006cd8:	4606      	mov	r6, r0
 8006cda:	9b03      	ldr	r3, [sp, #12]
 8006cdc:	9a03      	ldr	r2, [sp, #12]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	9308      	str	r3, [sp, #32]
 8006ce2:	9b06      	ldr	r3, [sp, #24]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ce8:	9b04      	ldr	r3, [sp, #16]
 8006cea:	f003 0301 	and.w	r3, r3, #1
 8006cee:	930a      	str	r3, [sp, #40]	; 0x28
 8006cf0:	9b08      	ldr	r3, [sp, #32]
 8006cf2:	4621      	mov	r1, r4
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	4650      	mov	r0, sl
 8006cf8:	9304      	str	r3, [sp, #16]
 8006cfa:	f7ff fa76 	bl	80061ea <quorem>
 8006cfe:	4641      	mov	r1, r8
 8006d00:	9006      	str	r0, [sp, #24]
 8006d02:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006d06:	4650      	mov	r0, sl
 8006d08:	f000 fc54 	bl	80075b4 <__mcmp>
 8006d0c:	4632      	mov	r2, r6
 8006d0e:	9009      	str	r0, [sp, #36]	; 0x24
 8006d10:	4621      	mov	r1, r4
 8006d12:	4628      	mov	r0, r5
 8006d14:	f000 fc6a 	bl	80075ec <__mdiff>
 8006d18:	68c2      	ldr	r2, [r0, #12]
 8006d1a:	4607      	mov	r7, r0
 8006d1c:	bb02      	cbnz	r2, 8006d60 <_dtoa_r+0xa60>
 8006d1e:	4601      	mov	r1, r0
 8006d20:	4650      	mov	r0, sl
 8006d22:	f000 fc47 	bl	80075b4 <__mcmp>
 8006d26:	4602      	mov	r2, r0
 8006d28:	4639      	mov	r1, r7
 8006d2a:	4628      	mov	r0, r5
 8006d2c:	920c      	str	r2, [sp, #48]	; 0x30
 8006d2e:	f000 fa07 	bl	8007140 <_Bfree>
 8006d32:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d36:	9f08      	ldr	r7, [sp, #32]
 8006d38:	ea43 0102 	orr.w	r1, r3, r2
 8006d3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d3e:	4319      	orrs	r1, r3
 8006d40:	d110      	bne.n	8006d64 <_dtoa_r+0xa64>
 8006d42:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006d46:	d029      	beq.n	8006d9c <_dtoa_r+0xa9c>
 8006d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	dd02      	ble.n	8006d54 <_dtoa_r+0xa54>
 8006d4e:	9b06      	ldr	r3, [sp, #24]
 8006d50:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006d54:	9b04      	ldr	r3, [sp, #16]
 8006d56:	f883 9000 	strb.w	r9, [r3]
 8006d5a:	e777      	b.n	8006c4c <_dtoa_r+0x94c>
 8006d5c:	4630      	mov	r0, r6
 8006d5e:	e7ba      	b.n	8006cd6 <_dtoa_r+0x9d6>
 8006d60:	2201      	movs	r2, #1
 8006d62:	e7e1      	b.n	8006d28 <_dtoa_r+0xa28>
 8006d64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	db04      	blt.n	8006d74 <_dtoa_r+0xa74>
 8006d6a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006d6c:	430b      	orrs	r3, r1
 8006d6e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006d70:	430b      	orrs	r3, r1
 8006d72:	d120      	bne.n	8006db6 <_dtoa_r+0xab6>
 8006d74:	2a00      	cmp	r2, #0
 8006d76:	dded      	ble.n	8006d54 <_dtoa_r+0xa54>
 8006d78:	4651      	mov	r1, sl
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	4628      	mov	r0, r5
 8006d7e:	f000 fbad 	bl	80074dc <__lshift>
 8006d82:	4621      	mov	r1, r4
 8006d84:	4682      	mov	sl, r0
 8006d86:	f000 fc15 	bl	80075b4 <__mcmp>
 8006d8a:	2800      	cmp	r0, #0
 8006d8c:	dc03      	bgt.n	8006d96 <_dtoa_r+0xa96>
 8006d8e:	d1e1      	bne.n	8006d54 <_dtoa_r+0xa54>
 8006d90:	f019 0f01 	tst.w	r9, #1
 8006d94:	d0de      	beq.n	8006d54 <_dtoa_r+0xa54>
 8006d96:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006d9a:	d1d8      	bne.n	8006d4e <_dtoa_r+0xa4e>
 8006d9c:	2339      	movs	r3, #57	; 0x39
 8006d9e:	9a04      	ldr	r2, [sp, #16]
 8006da0:	7013      	strb	r3, [r2, #0]
 8006da2:	463b      	mov	r3, r7
 8006da4:	461f      	mov	r7, r3
 8006da6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006daa:	3b01      	subs	r3, #1
 8006dac:	2a39      	cmp	r2, #57	; 0x39
 8006dae:	d06b      	beq.n	8006e88 <_dtoa_r+0xb88>
 8006db0:	3201      	adds	r2, #1
 8006db2:	701a      	strb	r2, [r3, #0]
 8006db4:	e74a      	b.n	8006c4c <_dtoa_r+0x94c>
 8006db6:	2a00      	cmp	r2, #0
 8006db8:	dd07      	ble.n	8006dca <_dtoa_r+0xaca>
 8006dba:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006dbe:	d0ed      	beq.n	8006d9c <_dtoa_r+0xa9c>
 8006dc0:	9a04      	ldr	r2, [sp, #16]
 8006dc2:	f109 0301 	add.w	r3, r9, #1
 8006dc6:	7013      	strb	r3, [r2, #0]
 8006dc8:	e740      	b.n	8006c4c <_dtoa_r+0x94c>
 8006dca:	9b08      	ldr	r3, [sp, #32]
 8006dcc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006dce:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d042      	beq.n	8006e5c <_dtoa_r+0xb5c>
 8006dd6:	4651      	mov	r1, sl
 8006dd8:	2300      	movs	r3, #0
 8006dda:	220a      	movs	r2, #10
 8006ddc:	4628      	mov	r0, r5
 8006dde:	f000 f9d1 	bl	8007184 <__multadd>
 8006de2:	45b0      	cmp	r8, r6
 8006de4:	4682      	mov	sl, r0
 8006de6:	f04f 0300 	mov.w	r3, #0
 8006dea:	f04f 020a 	mov.w	r2, #10
 8006dee:	4641      	mov	r1, r8
 8006df0:	4628      	mov	r0, r5
 8006df2:	d107      	bne.n	8006e04 <_dtoa_r+0xb04>
 8006df4:	f000 f9c6 	bl	8007184 <__multadd>
 8006df8:	4680      	mov	r8, r0
 8006dfa:	4606      	mov	r6, r0
 8006dfc:	9b08      	ldr	r3, [sp, #32]
 8006dfe:	3301      	adds	r3, #1
 8006e00:	9308      	str	r3, [sp, #32]
 8006e02:	e775      	b.n	8006cf0 <_dtoa_r+0x9f0>
 8006e04:	f000 f9be 	bl	8007184 <__multadd>
 8006e08:	4631      	mov	r1, r6
 8006e0a:	4680      	mov	r8, r0
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	220a      	movs	r2, #10
 8006e10:	4628      	mov	r0, r5
 8006e12:	f000 f9b7 	bl	8007184 <__multadd>
 8006e16:	4606      	mov	r6, r0
 8006e18:	e7f0      	b.n	8006dfc <_dtoa_r+0xafc>
 8006e1a:	9b08      	ldr	r3, [sp, #32]
 8006e1c:	9306      	str	r3, [sp, #24]
 8006e1e:	9f03      	ldr	r7, [sp, #12]
 8006e20:	4621      	mov	r1, r4
 8006e22:	4650      	mov	r0, sl
 8006e24:	f7ff f9e1 	bl	80061ea <quorem>
 8006e28:	9b03      	ldr	r3, [sp, #12]
 8006e2a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006e2e:	f807 9b01 	strb.w	r9, [r7], #1
 8006e32:	1afa      	subs	r2, r7, r3
 8006e34:	9b06      	ldr	r3, [sp, #24]
 8006e36:	4293      	cmp	r3, r2
 8006e38:	dd07      	ble.n	8006e4a <_dtoa_r+0xb4a>
 8006e3a:	4651      	mov	r1, sl
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	220a      	movs	r2, #10
 8006e40:	4628      	mov	r0, r5
 8006e42:	f000 f99f 	bl	8007184 <__multadd>
 8006e46:	4682      	mov	sl, r0
 8006e48:	e7ea      	b.n	8006e20 <_dtoa_r+0xb20>
 8006e4a:	9b06      	ldr	r3, [sp, #24]
 8006e4c:	f04f 0800 	mov.w	r8, #0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	bfcc      	ite	gt
 8006e54:	461f      	movgt	r7, r3
 8006e56:	2701      	movle	r7, #1
 8006e58:	9b03      	ldr	r3, [sp, #12]
 8006e5a:	441f      	add	r7, r3
 8006e5c:	4651      	mov	r1, sl
 8006e5e:	2201      	movs	r2, #1
 8006e60:	4628      	mov	r0, r5
 8006e62:	f000 fb3b 	bl	80074dc <__lshift>
 8006e66:	4621      	mov	r1, r4
 8006e68:	4682      	mov	sl, r0
 8006e6a:	f000 fba3 	bl	80075b4 <__mcmp>
 8006e6e:	2800      	cmp	r0, #0
 8006e70:	dc97      	bgt.n	8006da2 <_dtoa_r+0xaa2>
 8006e72:	d102      	bne.n	8006e7a <_dtoa_r+0xb7a>
 8006e74:	f019 0f01 	tst.w	r9, #1
 8006e78:	d193      	bne.n	8006da2 <_dtoa_r+0xaa2>
 8006e7a:	463b      	mov	r3, r7
 8006e7c:	461f      	mov	r7, r3
 8006e7e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e82:	2a30      	cmp	r2, #48	; 0x30
 8006e84:	d0fa      	beq.n	8006e7c <_dtoa_r+0xb7c>
 8006e86:	e6e1      	b.n	8006c4c <_dtoa_r+0x94c>
 8006e88:	9a03      	ldr	r2, [sp, #12]
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d18a      	bne.n	8006da4 <_dtoa_r+0xaa4>
 8006e8e:	2331      	movs	r3, #49	; 0x31
 8006e90:	f10b 0b01 	add.w	fp, fp, #1
 8006e94:	e797      	b.n	8006dc6 <_dtoa_r+0xac6>
 8006e96:	4b0a      	ldr	r3, [pc, #40]	; (8006ec0 <_dtoa_r+0xbc0>)
 8006e98:	f7ff ba9f 	b.w	80063da <_dtoa_r+0xda>
 8006e9c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	f47f aa77 	bne.w	8006392 <_dtoa_r+0x92>
 8006ea4:	4b07      	ldr	r3, [pc, #28]	; (8006ec4 <_dtoa_r+0xbc4>)
 8006ea6:	f7ff ba98 	b.w	80063da <_dtoa_r+0xda>
 8006eaa:	9b06      	ldr	r3, [sp, #24]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	dcb6      	bgt.n	8006e1e <_dtoa_r+0xb1e>
 8006eb0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006eb2:	2b02      	cmp	r3, #2
 8006eb4:	f73f aeb5 	bgt.w	8006c22 <_dtoa_r+0x922>
 8006eb8:	e7b1      	b.n	8006e1e <_dtoa_r+0xb1e>
 8006eba:	bf00      	nop
 8006ebc:	080084b7 	.word	0x080084b7
 8006ec0:	08008417 	.word	0x08008417
 8006ec4:	0800843b 	.word	0x0800843b

08006ec8 <_free_r>:
 8006ec8:	b538      	push	{r3, r4, r5, lr}
 8006eca:	4605      	mov	r5, r0
 8006ecc:	2900      	cmp	r1, #0
 8006ece:	d040      	beq.n	8006f52 <_free_r+0x8a>
 8006ed0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ed4:	1f0c      	subs	r4, r1, #4
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	bfb8      	it	lt
 8006eda:	18e4      	addlt	r4, r4, r3
 8006edc:	f000 f8e4 	bl	80070a8 <__malloc_lock>
 8006ee0:	4a1c      	ldr	r2, [pc, #112]	; (8006f54 <_free_r+0x8c>)
 8006ee2:	6813      	ldr	r3, [r2, #0]
 8006ee4:	b933      	cbnz	r3, 8006ef4 <_free_r+0x2c>
 8006ee6:	6063      	str	r3, [r4, #4]
 8006ee8:	6014      	str	r4, [r2, #0]
 8006eea:	4628      	mov	r0, r5
 8006eec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ef0:	f000 b8e0 	b.w	80070b4 <__malloc_unlock>
 8006ef4:	42a3      	cmp	r3, r4
 8006ef6:	d908      	bls.n	8006f0a <_free_r+0x42>
 8006ef8:	6820      	ldr	r0, [r4, #0]
 8006efa:	1821      	adds	r1, r4, r0
 8006efc:	428b      	cmp	r3, r1
 8006efe:	bf01      	itttt	eq
 8006f00:	6819      	ldreq	r1, [r3, #0]
 8006f02:	685b      	ldreq	r3, [r3, #4]
 8006f04:	1809      	addeq	r1, r1, r0
 8006f06:	6021      	streq	r1, [r4, #0]
 8006f08:	e7ed      	b.n	8006ee6 <_free_r+0x1e>
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	b10b      	cbz	r3, 8006f14 <_free_r+0x4c>
 8006f10:	42a3      	cmp	r3, r4
 8006f12:	d9fa      	bls.n	8006f0a <_free_r+0x42>
 8006f14:	6811      	ldr	r1, [r2, #0]
 8006f16:	1850      	adds	r0, r2, r1
 8006f18:	42a0      	cmp	r0, r4
 8006f1a:	d10b      	bne.n	8006f34 <_free_r+0x6c>
 8006f1c:	6820      	ldr	r0, [r4, #0]
 8006f1e:	4401      	add	r1, r0
 8006f20:	1850      	adds	r0, r2, r1
 8006f22:	4283      	cmp	r3, r0
 8006f24:	6011      	str	r1, [r2, #0]
 8006f26:	d1e0      	bne.n	8006eea <_free_r+0x22>
 8006f28:	6818      	ldr	r0, [r3, #0]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	4408      	add	r0, r1
 8006f2e:	6010      	str	r0, [r2, #0]
 8006f30:	6053      	str	r3, [r2, #4]
 8006f32:	e7da      	b.n	8006eea <_free_r+0x22>
 8006f34:	d902      	bls.n	8006f3c <_free_r+0x74>
 8006f36:	230c      	movs	r3, #12
 8006f38:	602b      	str	r3, [r5, #0]
 8006f3a:	e7d6      	b.n	8006eea <_free_r+0x22>
 8006f3c:	6820      	ldr	r0, [r4, #0]
 8006f3e:	1821      	adds	r1, r4, r0
 8006f40:	428b      	cmp	r3, r1
 8006f42:	bf01      	itttt	eq
 8006f44:	6819      	ldreq	r1, [r3, #0]
 8006f46:	685b      	ldreq	r3, [r3, #4]
 8006f48:	1809      	addeq	r1, r1, r0
 8006f4a:	6021      	streq	r1, [r4, #0]
 8006f4c:	6063      	str	r3, [r4, #4]
 8006f4e:	6054      	str	r4, [r2, #4]
 8006f50:	e7cb      	b.n	8006eea <_free_r+0x22>
 8006f52:	bd38      	pop	{r3, r4, r5, pc}
 8006f54:	200004f8 	.word	0x200004f8

08006f58 <malloc>:
 8006f58:	4b02      	ldr	r3, [pc, #8]	; (8006f64 <malloc+0xc>)
 8006f5a:	4601      	mov	r1, r0
 8006f5c:	6818      	ldr	r0, [r3, #0]
 8006f5e:	f000 b823 	b.w	8006fa8 <_malloc_r>
 8006f62:	bf00      	nop
 8006f64:	20000064 	.word	0x20000064

08006f68 <sbrk_aligned>:
 8006f68:	b570      	push	{r4, r5, r6, lr}
 8006f6a:	4e0e      	ldr	r6, [pc, #56]	; (8006fa4 <sbrk_aligned+0x3c>)
 8006f6c:	460c      	mov	r4, r1
 8006f6e:	6831      	ldr	r1, [r6, #0]
 8006f70:	4605      	mov	r5, r0
 8006f72:	b911      	cbnz	r1, 8006f7a <sbrk_aligned+0x12>
 8006f74:	f000 fe38 	bl	8007be8 <_sbrk_r>
 8006f78:	6030      	str	r0, [r6, #0]
 8006f7a:	4621      	mov	r1, r4
 8006f7c:	4628      	mov	r0, r5
 8006f7e:	f000 fe33 	bl	8007be8 <_sbrk_r>
 8006f82:	1c43      	adds	r3, r0, #1
 8006f84:	d00a      	beq.n	8006f9c <sbrk_aligned+0x34>
 8006f86:	1cc4      	adds	r4, r0, #3
 8006f88:	f024 0403 	bic.w	r4, r4, #3
 8006f8c:	42a0      	cmp	r0, r4
 8006f8e:	d007      	beq.n	8006fa0 <sbrk_aligned+0x38>
 8006f90:	1a21      	subs	r1, r4, r0
 8006f92:	4628      	mov	r0, r5
 8006f94:	f000 fe28 	bl	8007be8 <_sbrk_r>
 8006f98:	3001      	adds	r0, #1
 8006f9a:	d101      	bne.n	8006fa0 <sbrk_aligned+0x38>
 8006f9c:	f04f 34ff 	mov.w	r4, #4294967295
 8006fa0:	4620      	mov	r0, r4
 8006fa2:	bd70      	pop	{r4, r5, r6, pc}
 8006fa4:	200004fc 	.word	0x200004fc

08006fa8 <_malloc_r>:
 8006fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fac:	1ccd      	adds	r5, r1, #3
 8006fae:	f025 0503 	bic.w	r5, r5, #3
 8006fb2:	3508      	adds	r5, #8
 8006fb4:	2d0c      	cmp	r5, #12
 8006fb6:	bf38      	it	cc
 8006fb8:	250c      	movcc	r5, #12
 8006fba:	2d00      	cmp	r5, #0
 8006fbc:	4607      	mov	r7, r0
 8006fbe:	db01      	blt.n	8006fc4 <_malloc_r+0x1c>
 8006fc0:	42a9      	cmp	r1, r5
 8006fc2:	d905      	bls.n	8006fd0 <_malloc_r+0x28>
 8006fc4:	230c      	movs	r3, #12
 8006fc6:	2600      	movs	r6, #0
 8006fc8:	603b      	str	r3, [r7, #0]
 8006fca:	4630      	mov	r0, r6
 8006fcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fd0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80070a4 <_malloc_r+0xfc>
 8006fd4:	f000 f868 	bl	80070a8 <__malloc_lock>
 8006fd8:	f8d8 3000 	ldr.w	r3, [r8]
 8006fdc:	461c      	mov	r4, r3
 8006fde:	bb5c      	cbnz	r4, 8007038 <_malloc_r+0x90>
 8006fe0:	4629      	mov	r1, r5
 8006fe2:	4638      	mov	r0, r7
 8006fe4:	f7ff ffc0 	bl	8006f68 <sbrk_aligned>
 8006fe8:	1c43      	adds	r3, r0, #1
 8006fea:	4604      	mov	r4, r0
 8006fec:	d155      	bne.n	800709a <_malloc_r+0xf2>
 8006fee:	f8d8 4000 	ldr.w	r4, [r8]
 8006ff2:	4626      	mov	r6, r4
 8006ff4:	2e00      	cmp	r6, #0
 8006ff6:	d145      	bne.n	8007084 <_malloc_r+0xdc>
 8006ff8:	2c00      	cmp	r4, #0
 8006ffa:	d048      	beq.n	800708e <_malloc_r+0xe6>
 8006ffc:	6823      	ldr	r3, [r4, #0]
 8006ffe:	4631      	mov	r1, r6
 8007000:	4638      	mov	r0, r7
 8007002:	eb04 0903 	add.w	r9, r4, r3
 8007006:	f000 fdef 	bl	8007be8 <_sbrk_r>
 800700a:	4581      	cmp	r9, r0
 800700c:	d13f      	bne.n	800708e <_malloc_r+0xe6>
 800700e:	6821      	ldr	r1, [r4, #0]
 8007010:	4638      	mov	r0, r7
 8007012:	1a6d      	subs	r5, r5, r1
 8007014:	4629      	mov	r1, r5
 8007016:	f7ff ffa7 	bl	8006f68 <sbrk_aligned>
 800701a:	3001      	adds	r0, #1
 800701c:	d037      	beq.n	800708e <_malloc_r+0xe6>
 800701e:	6823      	ldr	r3, [r4, #0]
 8007020:	442b      	add	r3, r5
 8007022:	6023      	str	r3, [r4, #0]
 8007024:	f8d8 3000 	ldr.w	r3, [r8]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d038      	beq.n	800709e <_malloc_r+0xf6>
 800702c:	685a      	ldr	r2, [r3, #4]
 800702e:	42a2      	cmp	r2, r4
 8007030:	d12b      	bne.n	800708a <_malloc_r+0xe2>
 8007032:	2200      	movs	r2, #0
 8007034:	605a      	str	r2, [r3, #4]
 8007036:	e00f      	b.n	8007058 <_malloc_r+0xb0>
 8007038:	6822      	ldr	r2, [r4, #0]
 800703a:	1b52      	subs	r2, r2, r5
 800703c:	d41f      	bmi.n	800707e <_malloc_r+0xd6>
 800703e:	2a0b      	cmp	r2, #11
 8007040:	d917      	bls.n	8007072 <_malloc_r+0xca>
 8007042:	1961      	adds	r1, r4, r5
 8007044:	42a3      	cmp	r3, r4
 8007046:	6025      	str	r5, [r4, #0]
 8007048:	bf18      	it	ne
 800704a:	6059      	strne	r1, [r3, #4]
 800704c:	6863      	ldr	r3, [r4, #4]
 800704e:	bf08      	it	eq
 8007050:	f8c8 1000 	streq.w	r1, [r8]
 8007054:	5162      	str	r2, [r4, r5]
 8007056:	604b      	str	r3, [r1, #4]
 8007058:	4638      	mov	r0, r7
 800705a:	f104 060b 	add.w	r6, r4, #11
 800705e:	f000 f829 	bl	80070b4 <__malloc_unlock>
 8007062:	f026 0607 	bic.w	r6, r6, #7
 8007066:	1d23      	adds	r3, r4, #4
 8007068:	1af2      	subs	r2, r6, r3
 800706a:	d0ae      	beq.n	8006fca <_malloc_r+0x22>
 800706c:	1b9b      	subs	r3, r3, r6
 800706e:	50a3      	str	r3, [r4, r2]
 8007070:	e7ab      	b.n	8006fca <_malloc_r+0x22>
 8007072:	42a3      	cmp	r3, r4
 8007074:	6862      	ldr	r2, [r4, #4]
 8007076:	d1dd      	bne.n	8007034 <_malloc_r+0x8c>
 8007078:	f8c8 2000 	str.w	r2, [r8]
 800707c:	e7ec      	b.n	8007058 <_malloc_r+0xb0>
 800707e:	4623      	mov	r3, r4
 8007080:	6864      	ldr	r4, [r4, #4]
 8007082:	e7ac      	b.n	8006fde <_malloc_r+0x36>
 8007084:	4634      	mov	r4, r6
 8007086:	6876      	ldr	r6, [r6, #4]
 8007088:	e7b4      	b.n	8006ff4 <_malloc_r+0x4c>
 800708a:	4613      	mov	r3, r2
 800708c:	e7cc      	b.n	8007028 <_malloc_r+0x80>
 800708e:	230c      	movs	r3, #12
 8007090:	4638      	mov	r0, r7
 8007092:	603b      	str	r3, [r7, #0]
 8007094:	f000 f80e 	bl	80070b4 <__malloc_unlock>
 8007098:	e797      	b.n	8006fca <_malloc_r+0x22>
 800709a:	6025      	str	r5, [r4, #0]
 800709c:	e7dc      	b.n	8007058 <_malloc_r+0xb0>
 800709e:	605b      	str	r3, [r3, #4]
 80070a0:	deff      	udf	#255	; 0xff
 80070a2:	bf00      	nop
 80070a4:	200004f8 	.word	0x200004f8

080070a8 <__malloc_lock>:
 80070a8:	4801      	ldr	r0, [pc, #4]	; (80070b0 <__malloc_lock+0x8>)
 80070aa:	f7ff b88e 	b.w	80061ca <__retarget_lock_acquire_recursive>
 80070ae:	bf00      	nop
 80070b0:	200004f4 	.word	0x200004f4

080070b4 <__malloc_unlock>:
 80070b4:	4801      	ldr	r0, [pc, #4]	; (80070bc <__malloc_unlock+0x8>)
 80070b6:	f7ff b889 	b.w	80061cc <__retarget_lock_release_recursive>
 80070ba:	bf00      	nop
 80070bc:	200004f4 	.word	0x200004f4

080070c0 <_Balloc>:
 80070c0:	b570      	push	{r4, r5, r6, lr}
 80070c2:	69c6      	ldr	r6, [r0, #28]
 80070c4:	4604      	mov	r4, r0
 80070c6:	460d      	mov	r5, r1
 80070c8:	b976      	cbnz	r6, 80070e8 <_Balloc+0x28>
 80070ca:	2010      	movs	r0, #16
 80070cc:	f7ff ff44 	bl	8006f58 <malloc>
 80070d0:	4602      	mov	r2, r0
 80070d2:	61e0      	str	r0, [r4, #28]
 80070d4:	b920      	cbnz	r0, 80070e0 <_Balloc+0x20>
 80070d6:	216b      	movs	r1, #107	; 0x6b
 80070d8:	4b17      	ldr	r3, [pc, #92]	; (8007138 <_Balloc+0x78>)
 80070da:	4818      	ldr	r0, [pc, #96]	; (800713c <_Balloc+0x7c>)
 80070dc:	f000 fda2 	bl	8007c24 <__assert_func>
 80070e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80070e4:	6006      	str	r6, [r0, #0]
 80070e6:	60c6      	str	r6, [r0, #12]
 80070e8:	69e6      	ldr	r6, [r4, #28]
 80070ea:	68f3      	ldr	r3, [r6, #12]
 80070ec:	b183      	cbz	r3, 8007110 <_Balloc+0x50>
 80070ee:	69e3      	ldr	r3, [r4, #28]
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80070f6:	b9b8      	cbnz	r0, 8007128 <_Balloc+0x68>
 80070f8:	2101      	movs	r1, #1
 80070fa:	fa01 f605 	lsl.w	r6, r1, r5
 80070fe:	1d72      	adds	r2, r6, #5
 8007100:	4620      	mov	r0, r4
 8007102:	0092      	lsls	r2, r2, #2
 8007104:	f000 fdac 	bl	8007c60 <_calloc_r>
 8007108:	b160      	cbz	r0, 8007124 <_Balloc+0x64>
 800710a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800710e:	e00e      	b.n	800712e <_Balloc+0x6e>
 8007110:	2221      	movs	r2, #33	; 0x21
 8007112:	2104      	movs	r1, #4
 8007114:	4620      	mov	r0, r4
 8007116:	f000 fda3 	bl	8007c60 <_calloc_r>
 800711a:	69e3      	ldr	r3, [r4, #28]
 800711c:	60f0      	str	r0, [r6, #12]
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d1e4      	bne.n	80070ee <_Balloc+0x2e>
 8007124:	2000      	movs	r0, #0
 8007126:	bd70      	pop	{r4, r5, r6, pc}
 8007128:	6802      	ldr	r2, [r0, #0]
 800712a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800712e:	2300      	movs	r3, #0
 8007130:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007134:	e7f7      	b.n	8007126 <_Balloc+0x66>
 8007136:	bf00      	nop
 8007138:	08008448 	.word	0x08008448
 800713c:	080084c8 	.word	0x080084c8

08007140 <_Bfree>:
 8007140:	b570      	push	{r4, r5, r6, lr}
 8007142:	69c6      	ldr	r6, [r0, #28]
 8007144:	4605      	mov	r5, r0
 8007146:	460c      	mov	r4, r1
 8007148:	b976      	cbnz	r6, 8007168 <_Bfree+0x28>
 800714a:	2010      	movs	r0, #16
 800714c:	f7ff ff04 	bl	8006f58 <malloc>
 8007150:	4602      	mov	r2, r0
 8007152:	61e8      	str	r0, [r5, #28]
 8007154:	b920      	cbnz	r0, 8007160 <_Bfree+0x20>
 8007156:	218f      	movs	r1, #143	; 0x8f
 8007158:	4b08      	ldr	r3, [pc, #32]	; (800717c <_Bfree+0x3c>)
 800715a:	4809      	ldr	r0, [pc, #36]	; (8007180 <_Bfree+0x40>)
 800715c:	f000 fd62 	bl	8007c24 <__assert_func>
 8007160:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007164:	6006      	str	r6, [r0, #0]
 8007166:	60c6      	str	r6, [r0, #12]
 8007168:	b13c      	cbz	r4, 800717a <_Bfree+0x3a>
 800716a:	69eb      	ldr	r3, [r5, #28]
 800716c:	6862      	ldr	r2, [r4, #4]
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007174:	6021      	str	r1, [r4, #0]
 8007176:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800717a:	bd70      	pop	{r4, r5, r6, pc}
 800717c:	08008448 	.word	0x08008448
 8007180:	080084c8 	.word	0x080084c8

08007184 <__multadd>:
 8007184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007188:	4607      	mov	r7, r0
 800718a:	460c      	mov	r4, r1
 800718c:	461e      	mov	r6, r3
 800718e:	2000      	movs	r0, #0
 8007190:	690d      	ldr	r5, [r1, #16]
 8007192:	f101 0c14 	add.w	ip, r1, #20
 8007196:	f8dc 3000 	ldr.w	r3, [ip]
 800719a:	3001      	adds	r0, #1
 800719c:	b299      	uxth	r1, r3
 800719e:	fb02 6101 	mla	r1, r2, r1, r6
 80071a2:	0c1e      	lsrs	r6, r3, #16
 80071a4:	0c0b      	lsrs	r3, r1, #16
 80071a6:	fb02 3306 	mla	r3, r2, r6, r3
 80071aa:	b289      	uxth	r1, r1
 80071ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80071b0:	4285      	cmp	r5, r0
 80071b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80071b6:	f84c 1b04 	str.w	r1, [ip], #4
 80071ba:	dcec      	bgt.n	8007196 <__multadd+0x12>
 80071bc:	b30e      	cbz	r6, 8007202 <__multadd+0x7e>
 80071be:	68a3      	ldr	r3, [r4, #8]
 80071c0:	42ab      	cmp	r3, r5
 80071c2:	dc19      	bgt.n	80071f8 <__multadd+0x74>
 80071c4:	6861      	ldr	r1, [r4, #4]
 80071c6:	4638      	mov	r0, r7
 80071c8:	3101      	adds	r1, #1
 80071ca:	f7ff ff79 	bl	80070c0 <_Balloc>
 80071ce:	4680      	mov	r8, r0
 80071d0:	b928      	cbnz	r0, 80071de <__multadd+0x5a>
 80071d2:	4602      	mov	r2, r0
 80071d4:	21ba      	movs	r1, #186	; 0xba
 80071d6:	4b0c      	ldr	r3, [pc, #48]	; (8007208 <__multadd+0x84>)
 80071d8:	480c      	ldr	r0, [pc, #48]	; (800720c <__multadd+0x88>)
 80071da:	f000 fd23 	bl	8007c24 <__assert_func>
 80071de:	6922      	ldr	r2, [r4, #16]
 80071e0:	f104 010c 	add.w	r1, r4, #12
 80071e4:	3202      	adds	r2, #2
 80071e6:	0092      	lsls	r2, r2, #2
 80071e8:	300c      	adds	r0, #12
 80071ea:	f000 fd0d 	bl	8007c08 <memcpy>
 80071ee:	4621      	mov	r1, r4
 80071f0:	4638      	mov	r0, r7
 80071f2:	f7ff ffa5 	bl	8007140 <_Bfree>
 80071f6:	4644      	mov	r4, r8
 80071f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80071fc:	3501      	adds	r5, #1
 80071fe:	615e      	str	r6, [r3, #20]
 8007200:	6125      	str	r5, [r4, #16]
 8007202:	4620      	mov	r0, r4
 8007204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007208:	080084b7 	.word	0x080084b7
 800720c:	080084c8 	.word	0x080084c8

08007210 <__hi0bits>:
 8007210:	0c02      	lsrs	r2, r0, #16
 8007212:	0412      	lsls	r2, r2, #16
 8007214:	4603      	mov	r3, r0
 8007216:	b9ca      	cbnz	r2, 800724c <__hi0bits+0x3c>
 8007218:	0403      	lsls	r3, r0, #16
 800721a:	2010      	movs	r0, #16
 800721c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007220:	bf04      	itt	eq
 8007222:	021b      	lsleq	r3, r3, #8
 8007224:	3008      	addeq	r0, #8
 8007226:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800722a:	bf04      	itt	eq
 800722c:	011b      	lsleq	r3, r3, #4
 800722e:	3004      	addeq	r0, #4
 8007230:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007234:	bf04      	itt	eq
 8007236:	009b      	lsleq	r3, r3, #2
 8007238:	3002      	addeq	r0, #2
 800723a:	2b00      	cmp	r3, #0
 800723c:	db05      	blt.n	800724a <__hi0bits+0x3a>
 800723e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007242:	f100 0001 	add.w	r0, r0, #1
 8007246:	bf08      	it	eq
 8007248:	2020      	moveq	r0, #32
 800724a:	4770      	bx	lr
 800724c:	2000      	movs	r0, #0
 800724e:	e7e5      	b.n	800721c <__hi0bits+0xc>

08007250 <__lo0bits>:
 8007250:	6803      	ldr	r3, [r0, #0]
 8007252:	4602      	mov	r2, r0
 8007254:	f013 0007 	ands.w	r0, r3, #7
 8007258:	d00b      	beq.n	8007272 <__lo0bits+0x22>
 800725a:	07d9      	lsls	r1, r3, #31
 800725c:	d421      	bmi.n	80072a2 <__lo0bits+0x52>
 800725e:	0798      	lsls	r0, r3, #30
 8007260:	bf49      	itett	mi
 8007262:	085b      	lsrmi	r3, r3, #1
 8007264:	089b      	lsrpl	r3, r3, #2
 8007266:	2001      	movmi	r0, #1
 8007268:	6013      	strmi	r3, [r2, #0]
 800726a:	bf5c      	itt	pl
 800726c:	2002      	movpl	r0, #2
 800726e:	6013      	strpl	r3, [r2, #0]
 8007270:	4770      	bx	lr
 8007272:	b299      	uxth	r1, r3
 8007274:	b909      	cbnz	r1, 800727a <__lo0bits+0x2a>
 8007276:	2010      	movs	r0, #16
 8007278:	0c1b      	lsrs	r3, r3, #16
 800727a:	b2d9      	uxtb	r1, r3
 800727c:	b909      	cbnz	r1, 8007282 <__lo0bits+0x32>
 800727e:	3008      	adds	r0, #8
 8007280:	0a1b      	lsrs	r3, r3, #8
 8007282:	0719      	lsls	r1, r3, #28
 8007284:	bf04      	itt	eq
 8007286:	091b      	lsreq	r3, r3, #4
 8007288:	3004      	addeq	r0, #4
 800728a:	0799      	lsls	r1, r3, #30
 800728c:	bf04      	itt	eq
 800728e:	089b      	lsreq	r3, r3, #2
 8007290:	3002      	addeq	r0, #2
 8007292:	07d9      	lsls	r1, r3, #31
 8007294:	d403      	bmi.n	800729e <__lo0bits+0x4e>
 8007296:	085b      	lsrs	r3, r3, #1
 8007298:	f100 0001 	add.w	r0, r0, #1
 800729c:	d003      	beq.n	80072a6 <__lo0bits+0x56>
 800729e:	6013      	str	r3, [r2, #0]
 80072a0:	4770      	bx	lr
 80072a2:	2000      	movs	r0, #0
 80072a4:	4770      	bx	lr
 80072a6:	2020      	movs	r0, #32
 80072a8:	4770      	bx	lr
	...

080072ac <__i2b>:
 80072ac:	b510      	push	{r4, lr}
 80072ae:	460c      	mov	r4, r1
 80072b0:	2101      	movs	r1, #1
 80072b2:	f7ff ff05 	bl	80070c0 <_Balloc>
 80072b6:	4602      	mov	r2, r0
 80072b8:	b928      	cbnz	r0, 80072c6 <__i2b+0x1a>
 80072ba:	f240 1145 	movw	r1, #325	; 0x145
 80072be:	4b04      	ldr	r3, [pc, #16]	; (80072d0 <__i2b+0x24>)
 80072c0:	4804      	ldr	r0, [pc, #16]	; (80072d4 <__i2b+0x28>)
 80072c2:	f000 fcaf 	bl	8007c24 <__assert_func>
 80072c6:	2301      	movs	r3, #1
 80072c8:	6144      	str	r4, [r0, #20]
 80072ca:	6103      	str	r3, [r0, #16]
 80072cc:	bd10      	pop	{r4, pc}
 80072ce:	bf00      	nop
 80072d0:	080084b7 	.word	0x080084b7
 80072d4:	080084c8 	.word	0x080084c8

080072d8 <__multiply>:
 80072d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072dc:	4691      	mov	r9, r2
 80072de:	690a      	ldr	r2, [r1, #16]
 80072e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80072e4:	460c      	mov	r4, r1
 80072e6:	429a      	cmp	r2, r3
 80072e8:	bfbe      	ittt	lt
 80072ea:	460b      	movlt	r3, r1
 80072ec:	464c      	movlt	r4, r9
 80072ee:	4699      	movlt	r9, r3
 80072f0:	6927      	ldr	r7, [r4, #16]
 80072f2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80072f6:	68a3      	ldr	r3, [r4, #8]
 80072f8:	6861      	ldr	r1, [r4, #4]
 80072fa:	eb07 060a 	add.w	r6, r7, sl
 80072fe:	42b3      	cmp	r3, r6
 8007300:	b085      	sub	sp, #20
 8007302:	bfb8      	it	lt
 8007304:	3101      	addlt	r1, #1
 8007306:	f7ff fedb 	bl	80070c0 <_Balloc>
 800730a:	b930      	cbnz	r0, 800731a <__multiply+0x42>
 800730c:	4602      	mov	r2, r0
 800730e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007312:	4b43      	ldr	r3, [pc, #268]	; (8007420 <__multiply+0x148>)
 8007314:	4843      	ldr	r0, [pc, #268]	; (8007424 <__multiply+0x14c>)
 8007316:	f000 fc85 	bl	8007c24 <__assert_func>
 800731a:	f100 0514 	add.w	r5, r0, #20
 800731e:	462b      	mov	r3, r5
 8007320:	2200      	movs	r2, #0
 8007322:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007326:	4543      	cmp	r3, r8
 8007328:	d321      	bcc.n	800736e <__multiply+0x96>
 800732a:	f104 0314 	add.w	r3, r4, #20
 800732e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007332:	f109 0314 	add.w	r3, r9, #20
 8007336:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800733a:	9202      	str	r2, [sp, #8]
 800733c:	1b3a      	subs	r2, r7, r4
 800733e:	3a15      	subs	r2, #21
 8007340:	f022 0203 	bic.w	r2, r2, #3
 8007344:	3204      	adds	r2, #4
 8007346:	f104 0115 	add.w	r1, r4, #21
 800734a:	428f      	cmp	r7, r1
 800734c:	bf38      	it	cc
 800734e:	2204      	movcc	r2, #4
 8007350:	9201      	str	r2, [sp, #4]
 8007352:	9a02      	ldr	r2, [sp, #8]
 8007354:	9303      	str	r3, [sp, #12]
 8007356:	429a      	cmp	r2, r3
 8007358:	d80c      	bhi.n	8007374 <__multiply+0x9c>
 800735a:	2e00      	cmp	r6, #0
 800735c:	dd03      	ble.n	8007366 <__multiply+0x8e>
 800735e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007362:	2b00      	cmp	r3, #0
 8007364:	d05a      	beq.n	800741c <__multiply+0x144>
 8007366:	6106      	str	r6, [r0, #16]
 8007368:	b005      	add	sp, #20
 800736a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800736e:	f843 2b04 	str.w	r2, [r3], #4
 8007372:	e7d8      	b.n	8007326 <__multiply+0x4e>
 8007374:	f8b3 a000 	ldrh.w	sl, [r3]
 8007378:	f1ba 0f00 	cmp.w	sl, #0
 800737c:	d023      	beq.n	80073c6 <__multiply+0xee>
 800737e:	46a9      	mov	r9, r5
 8007380:	f04f 0c00 	mov.w	ip, #0
 8007384:	f104 0e14 	add.w	lr, r4, #20
 8007388:	f85e 2b04 	ldr.w	r2, [lr], #4
 800738c:	f8d9 1000 	ldr.w	r1, [r9]
 8007390:	fa1f fb82 	uxth.w	fp, r2
 8007394:	b289      	uxth	r1, r1
 8007396:	fb0a 110b 	mla	r1, sl, fp, r1
 800739a:	4461      	add	r1, ip
 800739c:	f8d9 c000 	ldr.w	ip, [r9]
 80073a0:	0c12      	lsrs	r2, r2, #16
 80073a2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80073a6:	fb0a c202 	mla	r2, sl, r2, ip
 80073aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80073ae:	b289      	uxth	r1, r1
 80073b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80073b4:	4577      	cmp	r7, lr
 80073b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80073ba:	f849 1b04 	str.w	r1, [r9], #4
 80073be:	d8e3      	bhi.n	8007388 <__multiply+0xb0>
 80073c0:	9a01      	ldr	r2, [sp, #4]
 80073c2:	f845 c002 	str.w	ip, [r5, r2]
 80073c6:	9a03      	ldr	r2, [sp, #12]
 80073c8:	3304      	adds	r3, #4
 80073ca:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80073ce:	f1b9 0f00 	cmp.w	r9, #0
 80073d2:	d021      	beq.n	8007418 <__multiply+0x140>
 80073d4:	46ae      	mov	lr, r5
 80073d6:	f04f 0a00 	mov.w	sl, #0
 80073da:	6829      	ldr	r1, [r5, #0]
 80073dc:	f104 0c14 	add.w	ip, r4, #20
 80073e0:	f8bc b000 	ldrh.w	fp, [ip]
 80073e4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80073e8:	b289      	uxth	r1, r1
 80073ea:	fb09 220b 	mla	r2, r9, fp, r2
 80073ee:	4452      	add	r2, sl
 80073f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80073f4:	f84e 1b04 	str.w	r1, [lr], #4
 80073f8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80073fc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007400:	f8be 1000 	ldrh.w	r1, [lr]
 8007404:	4567      	cmp	r7, ip
 8007406:	fb09 110a 	mla	r1, r9, sl, r1
 800740a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800740e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007412:	d8e5      	bhi.n	80073e0 <__multiply+0x108>
 8007414:	9a01      	ldr	r2, [sp, #4]
 8007416:	50a9      	str	r1, [r5, r2]
 8007418:	3504      	adds	r5, #4
 800741a:	e79a      	b.n	8007352 <__multiply+0x7a>
 800741c:	3e01      	subs	r6, #1
 800741e:	e79c      	b.n	800735a <__multiply+0x82>
 8007420:	080084b7 	.word	0x080084b7
 8007424:	080084c8 	.word	0x080084c8

08007428 <__pow5mult>:
 8007428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800742c:	4615      	mov	r5, r2
 800742e:	f012 0203 	ands.w	r2, r2, #3
 8007432:	4606      	mov	r6, r0
 8007434:	460f      	mov	r7, r1
 8007436:	d007      	beq.n	8007448 <__pow5mult+0x20>
 8007438:	4c25      	ldr	r4, [pc, #148]	; (80074d0 <__pow5mult+0xa8>)
 800743a:	3a01      	subs	r2, #1
 800743c:	2300      	movs	r3, #0
 800743e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007442:	f7ff fe9f 	bl	8007184 <__multadd>
 8007446:	4607      	mov	r7, r0
 8007448:	10ad      	asrs	r5, r5, #2
 800744a:	d03d      	beq.n	80074c8 <__pow5mult+0xa0>
 800744c:	69f4      	ldr	r4, [r6, #28]
 800744e:	b97c      	cbnz	r4, 8007470 <__pow5mult+0x48>
 8007450:	2010      	movs	r0, #16
 8007452:	f7ff fd81 	bl	8006f58 <malloc>
 8007456:	4602      	mov	r2, r0
 8007458:	61f0      	str	r0, [r6, #28]
 800745a:	b928      	cbnz	r0, 8007468 <__pow5mult+0x40>
 800745c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007460:	4b1c      	ldr	r3, [pc, #112]	; (80074d4 <__pow5mult+0xac>)
 8007462:	481d      	ldr	r0, [pc, #116]	; (80074d8 <__pow5mult+0xb0>)
 8007464:	f000 fbde 	bl	8007c24 <__assert_func>
 8007468:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800746c:	6004      	str	r4, [r0, #0]
 800746e:	60c4      	str	r4, [r0, #12]
 8007470:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007474:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007478:	b94c      	cbnz	r4, 800748e <__pow5mult+0x66>
 800747a:	f240 2171 	movw	r1, #625	; 0x271
 800747e:	4630      	mov	r0, r6
 8007480:	f7ff ff14 	bl	80072ac <__i2b>
 8007484:	2300      	movs	r3, #0
 8007486:	4604      	mov	r4, r0
 8007488:	f8c8 0008 	str.w	r0, [r8, #8]
 800748c:	6003      	str	r3, [r0, #0]
 800748e:	f04f 0900 	mov.w	r9, #0
 8007492:	07eb      	lsls	r3, r5, #31
 8007494:	d50a      	bpl.n	80074ac <__pow5mult+0x84>
 8007496:	4639      	mov	r1, r7
 8007498:	4622      	mov	r2, r4
 800749a:	4630      	mov	r0, r6
 800749c:	f7ff ff1c 	bl	80072d8 <__multiply>
 80074a0:	4680      	mov	r8, r0
 80074a2:	4639      	mov	r1, r7
 80074a4:	4630      	mov	r0, r6
 80074a6:	f7ff fe4b 	bl	8007140 <_Bfree>
 80074aa:	4647      	mov	r7, r8
 80074ac:	106d      	asrs	r5, r5, #1
 80074ae:	d00b      	beq.n	80074c8 <__pow5mult+0xa0>
 80074b0:	6820      	ldr	r0, [r4, #0]
 80074b2:	b938      	cbnz	r0, 80074c4 <__pow5mult+0x9c>
 80074b4:	4622      	mov	r2, r4
 80074b6:	4621      	mov	r1, r4
 80074b8:	4630      	mov	r0, r6
 80074ba:	f7ff ff0d 	bl	80072d8 <__multiply>
 80074be:	6020      	str	r0, [r4, #0]
 80074c0:	f8c0 9000 	str.w	r9, [r0]
 80074c4:	4604      	mov	r4, r0
 80074c6:	e7e4      	b.n	8007492 <__pow5mult+0x6a>
 80074c8:	4638      	mov	r0, r7
 80074ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074ce:	bf00      	nop
 80074d0:	08008618 	.word	0x08008618
 80074d4:	08008448 	.word	0x08008448
 80074d8:	080084c8 	.word	0x080084c8

080074dc <__lshift>:
 80074dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074e0:	460c      	mov	r4, r1
 80074e2:	4607      	mov	r7, r0
 80074e4:	4691      	mov	r9, r2
 80074e6:	6923      	ldr	r3, [r4, #16]
 80074e8:	6849      	ldr	r1, [r1, #4]
 80074ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80074ee:	68a3      	ldr	r3, [r4, #8]
 80074f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80074f4:	f108 0601 	add.w	r6, r8, #1
 80074f8:	42b3      	cmp	r3, r6
 80074fa:	db0b      	blt.n	8007514 <__lshift+0x38>
 80074fc:	4638      	mov	r0, r7
 80074fe:	f7ff fddf 	bl	80070c0 <_Balloc>
 8007502:	4605      	mov	r5, r0
 8007504:	b948      	cbnz	r0, 800751a <__lshift+0x3e>
 8007506:	4602      	mov	r2, r0
 8007508:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800750c:	4b27      	ldr	r3, [pc, #156]	; (80075ac <__lshift+0xd0>)
 800750e:	4828      	ldr	r0, [pc, #160]	; (80075b0 <__lshift+0xd4>)
 8007510:	f000 fb88 	bl	8007c24 <__assert_func>
 8007514:	3101      	adds	r1, #1
 8007516:	005b      	lsls	r3, r3, #1
 8007518:	e7ee      	b.n	80074f8 <__lshift+0x1c>
 800751a:	2300      	movs	r3, #0
 800751c:	f100 0114 	add.w	r1, r0, #20
 8007520:	f100 0210 	add.w	r2, r0, #16
 8007524:	4618      	mov	r0, r3
 8007526:	4553      	cmp	r3, sl
 8007528:	db33      	blt.n	8007592 <__lshift+0xb6>
 800752a:	6920      	ldr	r0, [r4, #16]
 800752c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007530:	f104 0314 	add.w	r3, r4, #20
 8007534:	f019 091f 	ands.w	r9, r9, #31
 8007538:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800753c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007540:	d02b      	beq.n	800759a <__lshift+0xbe>
 8007542:	468a      	mov	sl, r1
 8007544:	2200      	movs	r2, #0
 8007546:	f1c9 0e20 	rsb	lr, r9, #32
 800754a:	6818      	ldr	r0, [r3, #0]
 800754c:	fa00 f009 	lsl.w	r0, r0, r9
 8007550:	4310      	orrs	r0, r2
 8007552:	f84a 0b04 	str.w	r0, [sl], #4
 8007556:	f853 2b04 	ldr.w	r2, [r3], #4
 800755a:	459c      	cmp	ip, r3
 800755c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007560:	d8f3      	bhi.n	800754a <__lshift+0x6e>
 8007562:	ebac 0304 	sub.w	r3, ip, r4
 8007566:	3b15      	subs	r3, #21
 8007568:	f023 0303 	bic.w	r3, r3, #3
 800756c:	3304      	adds	r3, #4
 800756e:	f104 0015 	add.w	r0, r4, #21
 8007572:	4584      	cmp	ip, r0
 8007574:	bf38      	it	cc
 8007576:	2304      	movcc	r3, #4
 8007578:	50ca      	str	r2, [r1, r3]
 800757a:	b10a      	cbz	r2, 8007580 <__lshift+0xa4>
 800757c:	f108 0602 	add.w	r6, r8, #2
 8007580:	3e01      	subs	r6, #1
 8007582:	4638      	mov	r0, r7
 8007584:	4621      	mov	r1, r4
 8007586:	612e      	str	r6, [r5, #16]
 8007588:	f7ff fdda 	bl	8007140 <_Bfree>
 800758c:	4628      	mov	r0, r5
 800758e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007592:	f842 0f04 	str.w	r0, [r2, #4]!
 8007596:	3301      	adds	r3, #1
 8007598:	e7c5      	b.n	8007526 <__lshift+0x4a>
 800759a:	3904      	subs	r1, #4
 800759c:	f853 2b04 	ldr.w	r2, [r3], #4
 80075a0:	459c      	cmp	ip, r3
 80075a2:	f841 2f04 	str.w	r2, [r1, #4]!
 80075a6:	d8f9      	bhi.n	800759c <__lshift+0xc0>
 80075a8:	e7ea      	b.n	8007580 <__lshift+0xa4>
 80075aa:	bf00      	nop
 80075ac:	080084b7 	.word	0x080084b7
 80075b0:	080084c8 	.word	0x080084c8

080075b4 <__mcmp>:
 80075b4:	4603      	mov	r3, r0
 80075b6:	690a      	ldr	r2, [r1, #16]
 80075b8:	6900      	ldr	r0, [r0, #16]
 80075ba:	b530      	push	{r4, r5, lr}
 80075bc:	1a80      	subs	r0, r0, r2
 80075be:	d10d      	bne.n	80075dc <__mcmp+0x28>
 80075c0:	3314      	adds	r3, #20
 80075c2:	3114      	adds	r1, #20
 80075c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80075c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80075cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80075d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80075d4:	4295      	cmp	r5, r2
 80075d6:	d002      	beq.n	80075de <__mcmp+0x2a>
 80075d8:	d304      	bcc.n	80075e4 <__mcmp+0x30>
 80075da:	2001      	movs	r0, #1
 80075dc:	bd30      	pop	{r4, r5, pc}
 80075de:	42a3      	cmp	r3, r4
 80075e0:	d3f4      	bcc.n	80075cc <__mcmp+0x18>
 80075e2:	e7fb      	b.n	80075dc <__mcmp+0x28>
 80075e4:	f04f 30ff 	mov.w	r0, #4294967295
 80075e8:	e7f8      	b.n	80075dc <__mcmp+0x28>
	...

080075ec <__mdiff>:
 80075ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075f0:	460d      	mov	r5, r1
 80075f2:	4607      	mov	r7, r0
 80075f4:	4611      	mov	r1, r2
 80075f6:	4628      	mov	r0, r5
 80075f8:	4614      	mov	r4, r2
 80075fa:	f7ff ffdb 	bl	80075b4 <__mcmp>
 80075fe:	1e06      	subs	r6, r0, #0
 8007600:	d111      	bne.n	8007626 <__mdiff+0x3a>
 8007602:	4631      	mov	r1, r6
 8007604:	4638      	mov	r0, r7
 8007606:	f7ff fd5b 	bl	80070c0 <_Balloc>
 800760a:	4602      	mov	r2, r0
 800760c:	b928      	cbnz	r0, 800761a <__mdiff+0x2e>
 800760e:	f240 2137 	movw	r1, #567	; 0x237
 8007612:	4b3a      	ldr	r3, [pc, #232]	; (80076fc <__mdiff+0x110>)
 8007614:	483a      	ldr	r0, [pc, #232]	; (8007700 <__mdiff+0x114>)
 8007616:	f000 fb05 	bl	8007c24 <__assert_func>
 800761a:	2301      	movs	r3, #1
 800761c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007620:	4610      	mov	r0, r2
 8007622:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007626:	bfa4      	itt	ge
 8007628:	4623      	movge	r3, r4
 800762a:	462c      	movge	r4, r5
 800762c:	4638      	mov	r0, r7
 800762e:	6861      	ldr	r1, [r4, #4]
 8007630:	bfa6      	itte	ge
 8007632:	461d      	movge	r5, r3
 8007634:	2600      	movge	r6, #0
 8007636:	2601      	movlt	r6, #1
 8007638:	f7ff fd42 	bl	80070c0 <_Balloc>
 800763c:	4602      	mov	r2, r0
 800763e:	b918      	cbnz	r0, 8007648 <__mdiff+0x5c>
 8007640:	f240 2145 	movw	r1, #581	; 0x245
 8007644:	4b2d      	ldr	r3, [pc, #180]	; (80076fc <__mdiff+0x110>)
 8007646:	e7e5      	b.n	8007614 <__mdiff+0x28>
 8007648:	f102 0814 	add.w	r8, r2, #20
 800764c:	46c2      	mov	sl, r8
 800764e:	f04f 0c00 	mov.w	ip, #0
 8007652:	6927      	ldr	r7, [r4, #16]
 8007654:	60c6      	str	r6, [r0, #12]
 8007656:	692e      	ldr	r6, [r5, #16]
 8007658:	f104 0014 	add.w	r0, r4, #20
 800765c:	f105 0914 	add.w	r9, r5, #20
 8007660:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007664:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007668:	3410      	adds	r4, #16
 800766a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800766e:	f859 3b04 	ldr.w	r3, [r9], #4
 8007672:	fa1f f18b 	uxth.w	r1, fp
 8007676:	4461      	add	r1, ip
 8007678:	fa1f fc83 	uxth.w	ip, r3
 800767c:	0c1b      	lsrs	r3, r3, #16
 800767e:	eba1 010c 	sub.w	r1, r1, ip
 8007682:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007686:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800768a:	b289      	uxth	r1, r1
 800768c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007690:	454e      	cmp	r6, r9
 8007692:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007696:	f84a 1b04 	str.w	r1, [sl], #4
 800769a:	d8e6      	bhi.n	800766a <__mdiff+0x7e>
 800769c:	1b73      	subs	r3, r6, r5
 800769e:	3b15      	subs	r3, #21
 80076a0:	f023 0303 	bic.w	r3, r3, #3
 80076a4:	3515      	adds	r5, #21
 80076a6:	3304      	adds	r3, #4
 80076a8:	42ae      	cmp	r6, r5
 80076aa:	bf38      	it	cc
 80076ac:	2304      	movcc	r3, #4
 80076ae:	4418      	add	r0, r3
 80076b0:	4443      	add	r3, r8
 80076b2:	461e      	mov	r6, r3
 80076b4:	4605      	mov	r5, r0
 80076b6:	4575      	cmp	r5, lr
 80076b8:	d30e      	bcc.n	80076d8 <__mdiff+0xec>
 80076ba:	f10e 0103 	add.w	r1, lr, #3
 80076be:	1a09      	subs	r1, r1, r0
 80076c0:	f021 0103 	bic.w	r1, r1, #3
 80076c4:	3803      	subs	r0, #3
 80076c6:	4586      	cmp	lr, r0
 80076c8:	bf38      	it	cc
 80076ca:	2100      	movcc	r1, #0
 80076cc:	440b      	add	r3, r1
 80076ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80076d2:	b189      	cbz	r1, 80076f8 <__mdiff+0x10c>
 80076d4:	6117      	str	r7, [r2, #16]
 80076d6:	e7a3      	b.n	8007620 <__mdiff+0x34>
 80076d8:	f855 8b04 	ldr.w	r8, [r5], #4
 80076dc:	fa1f f188 	uxth.w	r1, r8
 80076e0:	4461      	add	r1, ip
 80076e2:	140c      	asrs	r4, r1, #16
 80076e4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80076e8:	b289      	uxth	r1, r1
 80076ea:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80076ee:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80076f2:	f846 1b04 	str.w	r1, [r6], #4
 80076f6:	e7de      	b.n	80076b6 <__mdiff+0xca>
 80076f8:	3f01      	subs	r7, #1
 80076fa:	e7e8      	b.n	80076ce <__mdiff+0xe2>
 80076fc:	080084b7 	.word	0x080084b7
 8007700:	080084c8 	.word	0x080084c8

08007704 <__d2b>:
 8007704:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007706:	2101      	movs	r1, #1
 8007708:	4617      	mov	r7, r2
 800770a:	461c      	mov	r4, r3
 800770c:	9e08      	ldr	r6, [sp, #32]
 800770e:	f7ff fcd7 	bl	80070c0 <_Balloc>
 8007712:	4605      	mov	r5, r0
 8007714:	b930      	cbnz	r0, 8007724 <__d2b+0x20>
 8007716:	4602      	mov	r2, r0
 8007718:	f240 310f 	movw	r1, #783	; 0x30f
 800771c:	4b22      	ldr	r3, [pc, #136]	; (80077a8 <__d2b+0xa4>)
 800771e:	4823      	ldr	r0, [pc, #140]	; (80077ac <__d2b+0xa8>)
 8007720:	f000 fa80 	bl	8007c24 <__assert_func>
 8007724:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007728:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800772c:	bb24      	cbnz	r4, 8007778 <__d2b+0x74>
 800772e:	2f00      	cmp	r7, #0
 8007730:	9301      	str	r3, [sp, #4]
 8007732:	d026      	beq.n	8007782 <__d2b+0x7e>
 8007734:	4668      	mov	r0, sp
 8007736:	9700      	str	r7, [sp, #0]
 8007738:	f7ff fd8a 	bl	8007250 <__lo0bits>
 800773c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007740:	b1e8      	cbz	r0, 800777e <__d2b+0x7a>
 8007742:	f1c0 0320 	rsb	r3, r0, #32
 8007746:	fa02 f303 	lsl.w	r3, r2, r3
 800774a:	430b      	orrs	r3, r1
 800774c:	40c2      	lsrs	r2, r0
 800774e:	616b      	str	r3, [r5, #20]
 8007750:	9201      	str	r2, [sp, #4]
 8007752:	9b01      	ldr	r3, [sp, #4]
 8007754:	2b00      	cmp	r3, #0
 8007756:	bf14      	ite	ne
 8007758:	2102      	movne	r1, #2
 800775a:	2101      	moveq	r1, #1
 800775c:	61ab      	str	r3, [r5, #24]
 800775e:	6129      	str	r1, [r5, #16]
 8007760:	b1bc      	cbz	r4, 8007792 <__d2b+0x8e>
 8007762:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007766:	4404      	add	r4, r0
 8007768:	6034      	str	r4, [r6, #0]
 800776a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800776e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007770:	6018      	str	r0, [r3, #0]
 8007772:	4628      	mov	r0, r5
 8007774:	b003      	add	sp, #12
 8007776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007778:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800777c:	e7d7      	b.n	800772e <__d2b+0x2a>
 800777e:	6169      	str	r1, [r5, #20]
 8007780:	e7e7      	b.n	8007752 <__d2b+0x4e>
 8007782:	a801      	add	r0, sp, #4
 8007784:	f7ff fd64 	bl	8007250 <__lo0bits>
 8007788:	9b01      	ldr	r3, [sp, #4]
 800778a:	2101      	movs	r1, #1
 800778c:	616b      	str	r3, [r5, #20]
 800778e:	3020      	adds	r0, #32
 8007790:	e7e5      	b.n	800775e <__d2b+0x5a>
 8007792:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007796:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800779a:	6030      	str	r0, [r6, #0]
 800779c:	6918      	ldr	r0, [r3, #16]
 800779e:	f7ff fd37 	bl	8007210 <__hi0bits>
 80077a2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80077a6:	e7e2      	b.n	800776e <__d2b+0x6a>
 80077a8:	080084b7 	.word	0x080084b7
 80077ac:	080084c8 	.word	0x080084c8

080077b0 <__ssputs_r>:
 80077b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077b4:	461f      	mov	r7, r3
 80077b6:	688e      	ldr	r6, [r1, #8]
 80077b8:	4682      	mov	sl, r0
 80077ba:	42be      	cmp	r6, r7
 80077bc:	460c      	mov	r4, r1
 80077be:	4690      	mov	r8, r2
 80077c0:	680b      	ldr	r3, [r1, #0]
 80077c2:	d82c      	bhi.n	800781e <__ssputs_r+0x6e>
 80077c4:	898a      	ldrh	r2, [r1, #12]
 80077c6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80077ca:	d026      	beq.n	800781a <__ssputs_r+0x6a>
 80077cc:	6965      	ldr	r5, [r4, #20]
 80077ce:	6909      	ldr	r1, [r1, #16]
 80077d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80077d4:	eba3 0901 	sub.w	r9, r3, r1
 80077d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80077dc:	1c7b      	adds	r3, r7, #1
 80077de:	444b      	add	r3, r9
 80077e0:	106d      	asrs	r5, r5, #1
 80077e2:	429d      	cmp	r5, r3
 80077e4:	bf38      	it	cc
 80077e6:	461d      	movcc	r5, r3
 80077e8:	0553      	lsls	r3, r2, #21
 80077ea:	d527      	bpl.n	800783c <__ssputs_r+0x8c>
 80077ec:	4629      	mov	r1, r5
 80077ee:	f7ff fbdb 	bl	8006fa8 <_malloc_r>
 80077f2:	4606      	mov	r6, r0
 80077f4:	b360      	cbz	r0, 8007850 <__ssputs_r+0xa0>
 80077f6:	464a      	mov	r2, r9
 80077f8:	6921      	ldr	r1, [r4, #16]
 80077fa:	f000 fa05 	bl	8007c08 <memcpy>
 80077fe:	89a3      	ldrh	r3, [r4, #12]
 8007800:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007808:	81a3      	strh	r3, [r4, #12]
 800780a:	6126      	str	r6, [r4, #16]
 800780c:	444e      	add	r6, r9
 800780e:	6026      	str	r6, [r4, #0]
 8007810:	463e      	mov	r6, r7
 8007812:	6165      	str	r5, [r4, #20]
 8007814:	eba5 0509 	sub.w	r5, r5, r9
 8007818:	60a5      	str	r5, [r4, #8]
 800781a:	42be      	cmp	r6, r7
 800781c:	d900      	bls.n	8007820 <__ssputs_r+0x70>
 800781e:	463e      	mov	r6, r7
 8007820:	4632      	mov	r2, r6
 8007822:	4641      	mov	r1, r8
 8007824:	6820      	ldr	r0, [r4, #0]
 8007826:	f000 f9c5 	bl	8007bb4 <memmove>
 800782a:	2000      	movs	r0, #0
 800782c:	68a3      	ldr	r3, [r4, #8]
 800782e:	1b9b      	subs	r3, r3, r6
 8007830:	60a3      	str	r3, [r4, #8]
 8007832:	6823      	ldr	r3, [r4, #0]
 8007834:	4433      	add	r3, r6
 8007836:	6023      	str	r3, [r4, #0]
 8007838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800783c:	462a      	mov	r2, r5
 800783e:	f000 fa35 	bl	8007cac <_realloc_r>
 8007842:	4606      	mov	r6, r0
 8007844:	2800      	cmp	r0, #0
 8007846:	d1e0      	bne.n	800780a <__ssputs_r+0x5a>
 8007848:	4650      	mov	r0, sl
 800784a:	6921      	ldr	r1, [r4, #16]
 800784c:	f7ff fb3c 	bl	8006ec8 <_free_r>
 8007850:	230c      	movs	r3, #12
 8007852:	f8ca 3000 	str.w	r3, [sl]
 8007856:	89a3      	ldrh	r3, [r4, #12]
 8007858:	f04f 30ff 	mov.w	r0, #4294967295
 800785c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007860:	81a3      	strh	r3, [r4, #12]
 8007862:	e7e9      	b.n	8007838 <__ssputs_r+0x88>

08007864 <_svfiprintf_r>:
 8007864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007868:	4698      	mov	r8, r3
 800786a:	898b      	ldrh	r3, [r1, #12]
 800786c:	4607      	mov	r7, r0
 800786e:	061b      	lsls	r3, r3, #24
 8007870:	460d      	mov	r5, r1
 8007872:	4614      	mov	r4, r2
 8007874:	b09d      	sub	sp, #116	; 0x74
 8007876:	d50e      	bpl.n	8007896 <_svfiprintf_r+0x32>
 8007878:	690b      	ldr	r3, [r1, #16]
 800787a:	b963      	cbnz	r3, 8007896 <_svfiprintf_r+0x32>
 800787c:	2140      	movs	r1, #64	; 0x40
 800787e:	f7ff fb93 	bl	8006fa8 <_malloc_r>
 8007882:	6028      	str	r0, [r5, #0]
 8007884:	6128      	str	r0, [r5, #16]
 8007886:	b920      	cbnz	r0, 8007892 <_svfiprintf_r+0x2e>
 8007888:	230c      	movs	r3, #12
 800788a:	603b      	str	r3, [r7, #0]
 800788c:	f04f 30ff 	mov.w	r0, #4294967295
 8007890:	e0d0      	b.n	8007a34 <_svfiprintf_r+0x1d0>
 8007892:	2340      	movs	r3, #64	; 0x40
 8007894:	616b      	str	r3, [r5, #20]
 8007896:	2300      	movs	r3, #0
 8007898:	9309      	str	r3, [sp, #36]	; 0x24
 800789a:	2320      	movs	r3, #32
 800789c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078a0:	2330      	movs	r3, #48	; 0x30
 80078a2:	f04f 0901 	mov.w	r9, #1
 80078a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80078aa:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8007a4c <_svfiprintf_r+0x1e8>
 80078ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078b2:	4623      	mov	r3, r4
 80078b4:	469a      	mov	sl, r3
 80078b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078ba:	b10a      	cbz	r2, 80078c0 <_svfiprintf_r+0x5c>
 80078bc:	2a25      	cmp	r2, #37	; 0x25
 80078be:	d1f9      	bne.n	80078b4 <_svfiprintf_r+0x50>
 80078c0:	ebba 0b04 	subs.w	fp, sl, r4
 80078c4:	d00b      	beq.n	80078de <_svfiprintf_r+0x7a>
 80078c6:	465b      	mov	r3, fp
 80078c8:	4622      	mov	r2, r4
 80078ca:	4629      	mov	r1, r5
 80078cc:	4638      	mov	r0, r7
 80078ce:	f7ff ff6f 	bl	80077b0 <__ssputs_r>
 80078d2:	3001      	adds	r0, #1
 80078d4:	f000 80a9 	beq.w	8007a2a <_svfiprintf_r+0x1c6>
 80078d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078da:	445a      	add	r2, fp
 80078dc:	9209      	str	r2, [sp, #36]	; 0x24
 80078de:	f89a 3000 	ldrb.w	r3, [sl]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	f000 80a1 	beq.w	8007a2a <_svfiprintf_r+0x1c6>
 80078e8:	2300      	movs	r3, #0
 80078ea:	f04f 32ff 	mov.w	r2, #4294967295
 80078ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078f2:	f10a 0a01 	add.w	sl, sl, #1
 80078f6:	9304      	str	r3, [sp, #16]
 80078f8:	9307      	str	r3, [sp, #28]
 80078fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078fe:	931a      	str	r3, [sp, #104]	; 0x68
 8007900:	4654      	mov	r4, sl
 8007902:	2205      	movs	r2, #5
 8007904:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007908:	4850      	ldr	r0, [pc, #320]	; (8007a4c <_svfiprintf_r+0x1e8>)
 800790a:	f7fe fc60 	bl	80061ce <memchr>
 800790e:	9a04      	ldr	r2, [sp, #16]
 8007910:	b9d8      	cbnz	r0, 800794a <_svfiprintf_r+0xe6>
 8007912:	06d0      	lsls	r0, r2, #27
 8007914:	bf44      	itt	mi
 8007916:	2320      	movmi	r3, #32
 8007918:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800791c:	0711      	lsls	r1, r2, #28
 800791e:	bf44      	itt	mi
 8007920:	232b      	movmi	r3, #43	; 0x2b
 8007922:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007926:	f89a 3000 	ldrb.w	r3, [sl]
 800792a:	2b2a      	cmp	r3, #42	; 0x2a
 800792c:	d015      	beq.n	800795a <_svfiprintf_r+0xf6>
 800792e:	4654      	mov	r4, sl
 8007930:	2000      	movs	r0, #0
 8007932:	f04f 0c0a 	mov.w	ip, #10
 8007936:	9a07      	ldr	r2, [sp, #28]
 8007938:	4621      	mov	r1, r4
 800793a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800793e:	3b30      	subs	r3, #48	; 0x30
 8007940:	2b09      	cmp	r3, #9
 8007942:	d94d      	bls.n	80079e0 <_svfiprintf_r+0x17c>
 8007944:	b1b0      	cbz	r0, 8007974 <_svfiprintf_r+0x110>
 8007946:	9207      	str	r2, [sp, #28]
 8007948:	e014      	b.n	8007974 <_svfiprintf_r+0x110>
 800794a:	eba0 0308 	sub.w	r3, r0, r8
 800794e:	fa09 f303 	lsl.w	r3, r9, r3
 8007952:	4313      	orrs	r3, r2
 8007954:	46a2      	mov	sl, r4
 8007956:	9304      	str	r3, [sp, #16]
 8007958:	e7d2      	b.n	8007900 <_svfiprintf_r+0x9c>
 800795a:	9b03      	ldr	r3, [sp, #12]
 800795c:	1d19      	adds	r1, r3, #4
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	9103      	str	r1, [sp, #12]
 8007962:	2b00      	cmp	r3, #0
 8007964:	bfbb      	ittet	lt
 8007966:	425b      	neglt	r3, r3
 8007968:	f042 0202 	orrlt.w	r2, r2, #2
 800796c:	9307      	strge	r3, [sp, #28]
 800796e:	9307      	strlt	r3, [sp, #28]
 8007970:	bfb8      	it	lt
 8007972:	9204      	strlt	r2, [sp, #16]
 8007974:	7823      	ldrb	r3, [r4, #0]
 8007976:	2b2e      	cmp	r3, #46	; 0x2e
 8007978:	d10c      	bne.n	8007994 <_svfiprintf_r+0x130>
 800797a:	7863      	ldrb	r3, [r4, #1]
 800797c:	2b2a      	cmp	r3, #42	; 0x2a
 800797e:	d134      	bne.n	80079ea <_svfiprintf_r+0x186>
 8007980:	9b03      	ldr	r3, [sp, #12]
 8007982:	3402      	adds	r4, #2
 8007984:	1d1a      	adds	r2, r3, #4
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	9203      	str	r2, [sp, #12]
 800798a:	2b00      	cmp	r3, #0
 800798c:	bfb8      	it	lt
 800798e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007992:	9305      	str	r3, [sp, #20]
 8007994:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8007a50 <_svfiprintf_r+0x1ec>
 8007998:	2203      	movs	r2, #3
 800799a:	4650      	mov	r0, sl
 800799c:	7821      	ldrb	r1, [r4, #0]
 800799e:	f7fe fc16 	bl	80061ce <memchr>
 80079a2:	b138      	cbz	r0, 80079b4 <_svfiprintf_r+0x150>
 80079a4:	2240      	movs	r2, #64	; 0x40
 80079a6:	9b04      	ldr	r3, [sp, #16]
 80079a8:	eba0 000a 	sub.w	r0, r0, sl
 80079ac:	4082      	lsls	r2, r0
 80079ae:	4313      	orrs	r3, r2
 80079b0:	3401      	adds	r4, #1
 80079b2:	9304      	str	r3, [sp, #16]
 80079b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079b8:	2206      	movs	r2, #6
 80079ba:	4826      	ldr	r0, [pc, #152]	; (8007a54 <_svfiprintf_r+0x1f0>)
 80079bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079c0:	f7fe fc05 	bl	80061ce <memchr>
 80079c4:	2800      	cmp	r0, #0
 80079c6:	d038      	beq.n	8007a3a <_svfiprintf_r+0x1d6>
 80079c8:	4b23      	ldr	r3, [pc, #140]	; (8007a58 <_svfiprintf_r+0x1f4>)
 80079ca:	bb1b      	cbnz	r3, 8007a14 <_svfiprintf_r+0x1b0>
 80079cc:	9b03      	ldr	r3, [sp, #12]
 80079ce:	3307      	adds	r3, #7
 80079d0:	f023 0307 	bic.w	r3, r3, #7
 80079d4:	3308      	adds	r3, #8
 80079d6:	9303      	str	r3, [sp, #12]
 80079d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079da:	4433      	add	r3, r6
 80079dc:	9309      	str	r3, [sp, #36]	; 0x24
 80079de:	e768      	b.n	80078b2 <_svfiprintf_r+0x4e>
 80079e0:	460c      	mov	r4, r1
 80079e2:	2001      	movs	r0, #1
 80079e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80079e8:	e7a6      	b.n	8007938 <_svfiprintf_r+0xd4>
 80079ea:	2300      	movs	r3, #0
 80079ec:	f04f 0c0a 	mov.w	ip, #10
 80079f0:	4619      	mov	r1, r3
 80079f2:	3401      	adds	r4, #1
 80079f4:	9305      	str	r3, [sp, #20]
 80079f6:	4620      	mov	r0, r4
 80079f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079fc:	3a30      	subs	r2, #48	; 0x30
 80079fe:	2a09      	cmp	r2, #9
 8007a00:	d903      	bls.n	8007a0a <_svfiprintf_r+0x1a6>
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d0c6      	beq.n	8007994 <_svfiprintf_r+0x130>
 8007a06:	9105      	str	r1, [sp, #20]
 8007a08:	e7c4      	b.n	8007994 <_svfiprintf_r+0x130>
 8007a0a:	4604      	mov	r4, r0
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a12:	e7f0      	b.n	80079f6 <_svfiprintf_r+0x192>
 8007a14:	ab03      	add	r3, sp, #12
 8007a16:	9300      	str	r3, [sp, #0]
 8007a18:	462a      	mov	r2, r5
 8007a1a:	4638      	mov	r0, r7
 8007a1c:	4b0f      	ldr	r3, [pc, #60]	; (8007a5c <_svfiprintf_r+0x1f8>)
 8007a1e:	a904      	add	r1, sp, #16
 8007a20:	f7fd fe6e 	bl	8005700 <_printf_float>
 8007a24:	1c42      	adds	r2, r0, #1
 8007a26:	4606      	mov	r6, r0
 8007a28:	d1d6      	bne.n	80079d8 <_svfiprintf_r+0x174>
 8007a2a:	89ab      	ldrh	r3, [r5, #12]
 8007a2c:	065b      	lsls	r3, r3, #25
 8007a2e:	f53f af2d 	bmi.w	800788c <_svfiprintf_r+0x28>
 8007a32:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a34:	b01d      	add	sp, #116	; 0x74
 8007a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a3a:	ab03      	add	r3, sp, #12
 8007a3c:	9300      	str	r3, [sp, #0]
 8007a3e:	462a      	mov	r2, r5
 8007a40:	4638      	mov	r0, r7
 8007a42:	4b06      	ldr	r3, [pc, #24]	; (8007a5c <_svfiprintf_r+0x1f8>)
 8007a44:	a904      	add	r1, sp, #16
 8007a46:	f7fe f8fb 	bl	8005c40 <_printf_i>
 8007a4a:	e7eb      	b.n	8007a24 <_svfiprintf_r+0x1c0>
 8007a4c:	08008624 	.word	0x08008624
 8007a50:	0800862a 	.word	0x0800862a
 8007a54:	0800862e 	.word	0x0800862e
 8007a58:	08005701 	.word	0x08005701
 8007a5c:	080077b1 	.word	0x080077b1

08007a60 <__sflush_r>:
 8007a60:	898a      	ldrh	r2, [r1, #12]
 8007a62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a64:	4605      	mov	r5, r0
 8007a66:	0710      	lsls	r0, r2, #28
 8007a68:	460c      	mov	r4, r1
 8007a6a:	d457      	bmi.n	8007b1c <__sflush_r+0xbc>
 8007a6c:	684b      	ldr	r3, [r1, #4]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	dc04      	bgt.n	8007a7c <__sflush_r+0x1c>
 8007a72:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	dc01      	bgt.n	8007a7c <__sflush_r+0x1c>
 8007a78:	2000      	movs	r0, #0
 8007a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a7e:	2e00      	cmp	r6, #0
 8007a80:	d0fa      	beq.n	8007a78 <__sflush_r+0x18>
 8007a82:	2300      	movs	r3, #0
 8007a84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a88:	682f      	ldr	r7, [r5, #0]
 8007a8a:	6a21      	ldr	r1, [r4, #32]
 8007a8c:	602b      	str	r3, [r5, #0]
 8007a8e:	d032      	beq.n	8007af6 <__sflush_r+0x96>
 8007a90:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a92:	89a3      	ldrh	r3, [r4, #12]
 8007a94:	075a      	lsls	r2, r3, #29
 8007a96:	d505      	bpl.n	8007aa4 <__sflush_r+0x44>
 8007a98:	6863      	ldr	r3, [r4, #4]
 8007a9a:	1ac0      	subs	r0, r0, r3
 8007a9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a9e:	b10b      	cbz	r3, 8007aa4 <__sflush_r+0x44>
 8007aa0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007aa2:	1ac0      	subs	r0, r0, r3
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007aaa:	4628      	mov	r0, r5
 8007aac:	6a21      	ldr	r1, [r4, #32]
 8007aae:	47b0      	blx	r6
 8007ab0:	1c43      	adds	r3, r0, #1
 8007ab2:	89a3      	ldrh	r3, [r4, #12]
 8007ab4:	d106      	bne.n	8007ac4 <__sflush_r+0x64>
 8007ab6:	6829      	ldr	r1, [r5, #0]
 8007ab8:	291d      	cmp	r1, #29
 8007aba:	d82b      	bhi.n	8007b14 <__sflush_r+0xb4>
 8007abc:	4a28      	ldr	r2, [pc, #160]	; (8007b60 <__sflush_r+0x100>)
 8007abe:	410a      	asrs	r2, r1
 8007ac0:	07d6      	lsls	r6, r2, #31
 8007ac2:	d427      	bmi.n	8007b14 <__sflush_r+0xb4>
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	6062      	str	r2, [r4, #4]
 8007ac8:	6922      	ldr	r2, [r4, #16]
 8007aca:	04d9      	lsls	r1, r3, #19
 8007acc:	6022      	str	r2, [r4, #0]
 8007ace:	d504      	bpl.n	8007ada <__sflush_r+0x7a>
 8007ad0:	1c42      	adds	r2, r0, #1
 8007ad2:	d101      	bne.n	8007ad8 <__sflush_r+0x78>
 8007ad4:	682b      	ldr	r3, [r5, #0]
 8007ad6:	b903      	cbnz	r3, 8007ada <__sflush_r+0x7a>
 8007ad8:	6560      	str	r0, [r4, #84]	; 0x54
 8007ada:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007adc:	602f      	str	r7, [r5, #0]
 8007ade:	2900      	cmp	r1, #0
 8007ae0:	d0ca      	beq.n	8007a78 <__sflush_r+0x18>
 8007ae2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ae6:	4299      	cmp	r1, r3
 8007ae8:	d002      	beq.n	8007af0 <__sflush_r+0x90>
 8007aea:	4628      	mov	r0, r5
 8007aec:	f7ff f9ec 	bl	8006ec8 <_free_r>
 8007af0:	2000      	movs	r0, #0
 8007af2:	6360      	str	r0, [r4, #52]	; 0x34
 8007af4:	e7c1      	b.n	8007a7a <__sflush_r+0x1a>
 8007af6:	2301      	movs	r3, #1
 8007af8:	4628      	mov	r0, r5
 8007afa:	47b0      	blx	r6
 8007afc:	1c41      	adds	r1, r0, #1
 8007afe:	d1c8      	bne.n	8007a92 <__sflush_r+0x32>
 8007b00:	682b      	ldr	r3, [r5, #0]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d0c5      	beq.n	8007a92 <__sflush_r+0x32>
 8007b06:	2b1d      	cmp	r3, #29
 8007b08:	d001      	beq.n	8007b0e <__sflush_r+0xae>
 8007b0a:	2b16      	cmp	r3, #22
 8007b0c:	d101      	bne.n	8007b12 <__sflush_r+0xb2>
 8007b0e:	602f      	str	r7, [r5, #0]
 8007b10:	e7b2      	b.n	8007a78 <__sflush_r+0x18>
 8007b12:	89a3      	ldrh	r3, [r4, #12]
 8007b14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b18:	81a3      	strh	r3, [r4, #12]
 8007b1a:	e7ae      	b.n	8007a7a <__sflush_r+0x1a>
 8007b1c:	690f      	ldr	r7, [r1, #16]
 8007b1e:	2f00      	cmp	r7, #0
 8007b20:	d0aa      	beq.n	8007a78 <__sflush_r+0x18>
 8007b22:	0793      	lsls	r3, r2, #30
 8007b24:	bf18      	it	ne
 8007b26:	2300      	movne	r3, #0
 8007b28:	680e      	ldr	r6, [r1, #0]
 8007b2a:	bf08      	it	eq
 8007b2c:	694b      	ldreq	r3, [r1, #20]
 8007b2e:	1bf6      	subs	r6, r6, r7
 8007b30:	600f      	str	r7, [r1, #0]
 8007b32:	608b      	str	r3, [r1, #8]
 8007b34:	2e00      	cmp	r6, #0
 8007b36:	dd9f      	ble.n	8007a78 <__sflush_r+0x18>
 8007b38:	4633      	mov	r3, r6
 8007b3a:	463a      	mov	r2, r7
 8007b3c:	4628      	mov	r0, r5
 8007b3e:	6a21      	ldr	r1, [r4, #32]
 8007b40:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007b44:	47e0      	blx	ip
 8007b46:	2800      	cmp	r0, #0
 8007b48:	dc06      	bgt.n	8007b58 <__sflush_r+0xf8>
 8007b4a:	89a3      	ldrh	r3, [r4, #12]
 8007b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b54:	81a3      	strh	r3, [r4, #12]
 8007b56:	e790      	b.n	8007a7a <__sflush_r+0x1a>
 8007b58:	4407      	add	r7, r0
 8007b5a:	1a36      	subs	r6, r6, r0
 8007b5c:	e7ea      	b.n	8007b34 <__sflush_r+0xd4>
 8007b5e:	bf00      	nop
 8007b60:	dfbffffe 	.word	0xdfbffffe

08007b64 <_fflush_r>:
 8007b64:	b538      	push	{r3, r4, r5, lr}
 8007b66:	690b      	ldr	r3, [r1, #16]
 8007b68:	4605      	mov	r5, r0
 8007b6a:	460c      	mov	r4, r1
 8007b6c:	b913      	cbnz	r3, 8007b74 <_fflush_r+0x10>
 8007b6e:	2500      	movs	r5, #0
 8007b70:	4628      	mov	r0, r5
 8007b72:	bd38      	pop	{r3, r4, r5, pc}
 8007b74:	b118      	cbz	r0, 8007b7e <_fflush_r+0x1a>
 8007b76:	6a03      	ldr	r3, [r0, #32]
 8007b78:	b90b      	cbnz	r3, 8007b7e <_fflush_r+0x1a>
 8007b7a:	f7fe fa0f 	bl	8005f9c <__sinit>
 8007b7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d0f3      	beq.n	8007b6e <_fflush_r+0xa>
 8007b86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b88:	07d0      	lsls	r0, r2, #31
 8007b8a:	d404      	bmi.n	8007b96 <_fflush_r+0x32>
 8007b8c:	0599      	lsls	r1, r3, #22
 8007b8e:	d402      	bmi.n	8007b96 <_fflush_r+0x32>
 8007b90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b92:	f7fe fb1a 	bl	80061ca <__retarget_lock_acquire_recursive>
 8007b96:	4628      	mov	r0, r5
 8007b98:	4621      	mov	r1, r4
 8007b9a:	f7ff ff61 	bl	8007a60 <__sflush_r>
 8007b9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ba0:	4605      	mov	r5, r0
 8007ba2:	07da      	lsls	r2, r3, #31
 8007ba4:	d4e4      	bmi.n	8007b70 <_fflush_r+0xc>
 8007ba6:	89a3      	ldrh	r3, [r4, #12]
 8007ba8:	059b      	lsls	r3, r3, #22
 8007baa:	d4e1      	bmi.n	8007b70 <_fflush_r+0xc>
 8007bac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bae:	f7fe fb0d 	bl	80061cc <__retarget_lock_release_recursive>
 8007bb2:	e7dd      	b.n	8007b70 <_fflush_r+0xc>

08007bb4 <memmove>:
 8007bb4:	4288      	cmp	r0, r1
 8007bb6:	b510      	push	{r4, lr}
 8007bb8:	eb01 0402 	add.w	r4, r1, r2
 8007bbc:	d902      	bls.n	8007bc4 <memmove+0x10>
 8007bbe:	4284      	cmp	r4, r0
 8007bc0:	4623      	mov	r3, r4
 8007bc2:	d807      	bhi.n	8007bd4 <memmove+0x20>
 8007bc4:	1e43      	subs	r3, r0, #1
 8007bc6:	42a1      	cmp	r1, r4
 8007bc8:	d008      	beq.n	8007bdc <memmove+0x28>
 8007bca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007bd2:	e7f8      	b.n	8007bc6 <memmove+0x12>
 8007bd4:	4601      	mov	r1, r0
 8007bd6:	4402      	add	r2, r0
 8007bd8:	428a      	cmp	r2, r1
 8007bda:	d100      	bne.n	8007bde <memmove+0x2a>
 8007bdc:	bd10      	pop	{r4, pc}
 8007bde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007be2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007be6:	e7f7      	b.n	8007bd8 <memmove+0x24>

08007be8 <_sbrk_r>:
 8007be8:	b538      	push	{r3, r4, r5, lr}
 8007bea:	2300      	movs	r3, #0
 8007bec:	4d05      	ldr	r5, [pc, #20]	; (8007c04 <_sbrk_r+0x1c>)
 8007bee:	4604      	mov	r4, r0
 8007bf0:	4608      	mov	r0, r1
 8007bf2:	602b      	str	r3, [r5, #0]
 8007bf4:	f7f9 ff4e 	bl	8001a94 <_sbrk>
 8007bf8:	1c43      	adds	r3, r0, #1
 8007bfa:	d102      	bne.n	8007c02 <_sbrk_r+0x1a>
 8007bfc:	682b      	ldr	r3, [r5, #0]
 8007bfe:	b103      	cbz	r3, 8007c02 <_sbrk_r+0x1a>
 8007c00:	6023      	str	r3, [r4, #0]
 8007c02:	bd38      	pop	{r3, r4, r5, pc}
 8007c04:	200004f0 	.word	0x200004f0

08007c08 <memcpy>:
 8007c08:	440a      	add	r2, r1
 8007c0a:	4291      	cmp	r1, r2
 8007c0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c10:	d100      	bne.n	8007c14 <memcpy+0xc>
 8007c12:	4770      	bx	lr
 8007c14:	b510      	push	{r4, lr}
 8007c16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c1a:	4291      	cmp	r1, r2
 8007c1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c20:	d1f9      	bne.n	8007c16 <memcpy+0xe>
 8007c22:	bd10      	pop	{r4, pc}

08007c24 <__assert_func>:
 8007c24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c26:	4614      	mov	r4, r2
 8007c28:	461a      	mov	r2, r3
 8007c2a:	4b09      	ldr	r3, [pc, #36]	; (8007c50 <__assert_func+0x2c>)
 8007c2c:	4605      	mov	r5, r0
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	68d8      	ldr	r0, [r3, #12]
 8007c32:	b14c      	cbz	r4, 8007c48 <__assert_func+0x24>
 8007c34:	4b07      	ldr	r3, [pc, #28]	; (8007c54 <__assert_func+0x30>)
 8007c36:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007c3a:	9100      	str	r1, [sp, #0]
 8007c3c:	462b      	mov	r3, r5
 8007c3e:	4906      	ldr	r1, [pc, #24]	; (8007c58 <__assert_func+0x34>)
 8007c40:	f000 f870 	bl	8007d24 <fiprintf>
 8007c44:	f000 f880 	bl	8007d48 <abort>
 8007c48:	4b04      	ldr	r3, [pc, #16]	; (8007c5c <__assert_func+0x38>)
 8007c4a:	461c      	mov	r4, r3
 8007c4c:	e7f3      	b.n	8007c36 <__assert_func+0x12>
 8007c4e:	bf00      	nop
 8007c50:	20000064 	.word	0x20000064
 8007c54:	0800863f 	.word	0x0800863f
 8007c58:	0800864c 	.word	0x0800864c
 8007c5c:	0800867a 	.word	0x0800867a

08007c60 <_calloc_r>:
 8007c60:	b570      	push	{r4, r5, r6, lr}
 8007c62:	fba1 5402 	umull	r5, r4, r1, r2
 8007c66:	b934      	cbnz	r4, 8007c76 <_calloc_r+0x16>
 8007c68:	4629      	mov	r1, r5
 8007c6a:	f7ff f99d 	bl	8006fa8 <_malloc_r>
 8007c6e:	4606      	mov	r6, r0
 8007c70:	b928      	cbnz	r0, 8007c7e <_calloc_r+0x1e>
 8007c72:	4630      	mov	r0, r6
 8007c74:	bd70      	pop	{r4, r5, r6, pc}
 8007c76:	220c      	movs	r2, #12
 8007c78:	2600      	movs	r6, #0
 8007c7a:	6002      	str	r2, [r0, #0]
 8007c7c:	e7f9      	b.n	8007c72 <_calloc_r+0x12>
 8007c7e:	462a      	mov	r2, r5
 8007c80:	4621      	mov	r1, r4
 8007c82:	f7fe fa24 	bl	80060ce <memset>
 8007c86:	e7f4      	b.n	8007c72 <_calloc_r+0x12>

08007c88 <__ascii_mbtowc>:
 8007c88:	b082      	sub	sp, #8
 8007c8a:	b901      	cbnz	r1, 8007c8e <__ascii_mbtowc+0x6>
 8007c8c:	a901      	add	r1, sp, #4
 8007c8e:	b142      	cbz	r2, 8007ca2 <__ascii_mbtowc+0x1a>
 8007c90:	b14b      	cbz	r3, 8007ca6 <__ascii_mbtowc+0x1e>
 8007c92:	7813      	ldrb	r3, [r2, #0]
 8007c94:	600b      	str	r3, [r1, #0]
 8007c96:	7812      	ldrb	r2, [r2, #0]
 8007c98:	1e10      	subs	r0, r2, #0
 8007c9a:	bf18      	it	ne
 8007c9c:	2001      	movne	r0, #1
 8007c9e:	b002      	add	sp, #8
 8007ca0:	4770      	bx	lr
 8007ca2:	4610      	mov	r0, r2
 8007ca4:	e7fb      	b.n	8007c9e <__ascii_mbtowc+0x16>
 8007ca6:	f06f 0001 	mvn.w	r0, #1
 8007caa:	e7f8      	b.n	8007c9e <__ascii_mbtowc+0x16>

08007cac <_realloc_r>:
 8007cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cb0:	4680      	mov	r8, r0
 8007cb2:	4614      	mov	r4, r2
 8007cb4:	460e      	mov	r6, r1
 8007cb6:	b921      	cbnz	r1, 8007cc2 <_realloc_r+0x16>
 8007cb8:	4611      	mov	r1, r2
 8007cba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cbe:	f7ff b973 	b.w	8006fa8 <_malloc_r>
 8007cc2:	b92a      	cbnz	r2, 8007cd0 <_realloc_r+0x24>
 8007cc4:	f7ff f900 	bl	8006ec8 <_free_r>
 8007cc8:	4625      	mov	r5, r4
 8007cca:	4628      	mov	r0, r5
 8007ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cd0:	f000 f841 	bl	8007d56 <_malloc_usable_size_r>
 8007cd4:	4284      	cmp	r4, r0
 8007cd6:	4607      	mov	r7, r0
 8007cd8:	d802      	bhi.n	8007ce0 <_realloc_r+0x34>
 8007cda:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007cde:	d812      	bhi.n	8007d06 <_realloc_r+0x5a>
 8007ce0:	4621      	mov	r1, r4
 8007ce2:	4640      	mov	r0, r8
 8007ce4:	f7ff f960 	bl	8006fa8 <_malloc_r>
 8007ce8:	4605      	mov	r5, r0
 8007cea:	2800      	cmp	r0, #0
 8007cec:	d0ed      	beq.n	8007cca <_realloc_r+0x1e>
 8007cee:	42bc      	cmp	r4, r7
 8007cf0:	4622      	mov	r2, r4
 8007cf2:	4631      	mov	r1, r6
 8007cf4:	bf28      	it	cs
 8007cf6:	463a      	movcs	r2, r7
 8007cf8:	f7ff ff86 	bl	8007c08 <memcpy>
 8007cfc:	4631      	mov	r1, r6
 8007cfe:	4640      	mov	r0, r8
 8007d00:	f7ff f8e2 	bl	8006ec8 <_free_r>
 8007d04:	e7e1      	b.n	8007cca <_realloc_r+0x1e>
 8007d06:	4635      	mov	r5, r6
 8007d08:	e7df      	b.n	8007cca <_realloc_r+0x1e>

08007d0a <__ascii_wctomb>:
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	4608      	mov	r0, r1
 8007d0e:	b141      	cbz	r1, 8007d22 <__ascii_wctomb+0x18>
 8007d10:	2aff      	cmp	r2, #255	; 0xff
 8007d12:	d904      	bls.n	8007d1e <__ascii_wctomb+0x14>
 8007d14:	228a      	movs	r2, #138	; 0x8a
 8007d16:	f04f 30ff 	mov.w	r0, #4294967295
 8007d1a:	601a      	str	r2, [r3, #0]
 8007d1c:	4770      	bx	lr
 8007d1e:	2001      	movs	r0, #1
 8007d20:	700a      	strb	r2, [r1, #0]
 8007d22:	4770      	bx	lr

08007d24 <fiprintf>:
 8007d24:	b40e      	push	{r1, r2, r3}
 8007d26:	b503      	push	{r0, r1, lr}
 8007d28:	4601      	mov	r1, r0
 8007d2a:	ab03      	add	r3, sp, #12
 8007d2c:	4805      	ldr	r0, [pc, #20]	; (8007d44 <fiprintf+0x20>)
 8007d2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d32:	6800      	ldr	r0, [r0, #0]
 8007d34:	9301      	str	r3, [sp, #4]
 8007d36:	f000 f83d 	bl	8007db4 <_vfiprintf_r>
 8007d3a:	b002      	add	sp, #8
 8007d3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d40:	b003      	add	sp, #12
 8007d42:	4770      	bx	lr
 8007d44:	20000064 	.word	0x20000064

08007d48 <abort>:
 8007d48:	2006      	movs	r0, #6
 8007d4a:	b508      	push	{r3, lr}
 8007d4c:	f000 fa0a 	bl	8008164 <raise>
 8007d50:	2001      	movs	r0, #1
 8007d52:	f7f9 fe2c 	bl	80019ae <_exit>

08007d56 <_malloc_usable_size_r>:
 8007d56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d5a:	1f18      	subs	r0, r3, #4
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	bfbc      	itt	lt
 8007d60:	580b      	ldrlt	r3, [r1, r0]
 8007d62:	18c0      	addlt	r0, r0, r3
 8007d64:	4770      	bx	lr

08007d66 <__sfputc_r>:
 8007d66:	6893      	ldr	r3, [r2, #8]
 8007d68:	b410      	push	{r4}
 8007d6a:	3b01      	subs	r3, #1
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	6093      	str	r3, [r2, #8]
 8007d70:	da07      	bge.n	8007d82 <__sfputc_r+0x1c>
 8007d72:	6994      	ldr	r4, [r2, #24]
 8007d74:	42a3      	cmp	r3, r4
 8007d76:	db01      	blt.n	8007d7c <__sfputc_r+0x16>
 8007d78:	290a      	cmp	r1, #10
 8007d7a:	d102      	bne.n	8007d82 <__sfputc_r+0x1c>
 8007d7c:	bc10      	pop	{r4}
 8007d7e:	f000 b933 	b.w	8007fe8 <__swbuf_r>
 8007d82:	6813      	ldr	r3, [r2, #0]
 8007d84:	1c58      	adds	r0, r3, #1
 8007d86:	6010      	str	r0, [r2, #0]
 8007d88:	7019      	strb	r1, [r3, #0]
 8007d8a:	4608      	mov	r0, r1
 8007d8c:	bc10      	pop	{r4}
 8007d8e:	4770      	bx	lr

08007d90 <__sfputs_r>:
 8007d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d92:	4606      	mov	r6, r0
 8007d94:	460f      	mov	r7, r1
 8007d96:	4614      	mov	r4, r2
 8007d98:	18d5      	adds	r5, r2, r3
 8007d9a:	42ac      	cmp	r4, r5
 8007d9c:	d101      	bne.n	8007da2 <__sfputs_r+0x12>
 8007d9e:	2000      	movs	r0, #0
 8007da0:	e007      	b.n	8007db2 <__sfputs_r+0x22>
 8007da2:	463a      	mov	r2, r7
 8007da4:	4630      	mov	r0, r6
 8007da6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007daa:	f7ff ffdc 	bl	8007d66 <__sfputc_r>
 8007dae:	1c43      	adds	r3, r0, #1
 8007db0:	d1f3      	bne.n	8007d9a <__sfputs_r+0xa>
 8007db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007db4 <_vfiprintf_r>:
 8007db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007db8:	460d      	mov	r5, r1
 8007dba:	4614      	mov	r4, r2
 8007dbc:	4698      	mov	r8, r3
 8007dbe:	4606      	mov	r6, r0
 8007dc0:	b09d      	sub	sp, #116	; 0x74
 8007dc2:	b118      	cbz	r0, 8007dcc <_vfiprintf_r+0x18>
 8007dc4:	6a03      	ldr	r3, [r0, #32]
 8007dc6:	b90b      	cbnz	r3, 8007dcc <_vfiprintf_r+0x18>
 8007dc8:	f7fe f8e8 	bl	8005f9c <__sinit>
 8007dcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007dce:	07d9      	lsls	r1, r3, #31
 8007dd0:	d405      	bmi.n	8007dde <_vfiprintf_r+0x2a>
 8007dd2:	89ab      	ldrh	r3, [r5, #12]
 8007dd4:	059a      	lsls	r2, r3, #22
 8007dd6:	d402      	bmi.n	8007dde <_vfiprintf_r+0x2a>
 8007dd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007dda:	f7fe f9f6 	bl	80061ca <__retarget_lock_acquire_recursive>
 8007dde:	89ab      	ldrh	r3, [r5, #12]
 8007de0:	071b      	lsls	r3, r3, #28
 8007de2:	d501      	bpl.n	8007de8 <_vfiprintf_r+0x34>
 8007de4:	692b      	ldr	r3, [r5, #16]
 8007de6:	b99b      	cbnz	r3, 8007e10 <_vfiprintf_r+0x5c>
 8007de8:	4629      	mov	r1, r5
 8007dea:	4630      	mov	r0, r6
 8007dec:	f000 f93a 	bl	8008064 <__swsetup_r>
 8007df0:	b170      	cbz	r0, 8007e10 <_vfiprintf_r+0x5c>
 8007df2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007df4:	07dc      	lsls	r4, r3, #31
 8007df6:	d504      	bpl.n	8007e02 <_vfiprintf_r+0x4e>
 8007df8:	f04f 30ff 	mov.w	r0, #4294967295
 8007dfc:	b01d      	add	sp, #116	; 0x74
 8007dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e02:	89ab      	ldrh	r3, [r5, #12]
 8007e04:	0598      	lsls	r0, r3, #22
 8007e06:	d4f7      	bmi.n	8007df8 <_vfiprintf_r+0x44>
 8007e08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e0a:	f7fe f9df 	bl	80061cc <__retarget_lock_release_recursive>
 8007e0e:	e7f3      	b.n	8007df8 <_vfiprintf_r+0x44>
 8007e10:	2300      	movs	r3, #0
 8007e12:	9309      	str	r3, [sp, #36]	; 0x24
 8007e14:	2320      	movs	r3, #32
 8007e16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e1a:	2330      	movs	r3, #48	; 0x30
 8007e1c:	f04f 0901 	mov.w	r9, #1
 8007e20:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e24:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8007fd4 <_vfiprintf_r+0x220>
 8007e28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e2c:	4623      	mov	r3, r4
 8007e2e:	469a      	mov	sl, r3
 8007e30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e34:	b10a      	cbz	r2, 8007e3a <_vfiprintf_r+0x86>
 8007e36:	2a25      	cmp	r2, #37	; 0x25
 8007e38:	d1f9      	bne.n	8007e2e <_vfiprintf_r+0x7a>
 8007e3a:	ebba 0b04 	subs.w	fp, sl, r4
 8007e3e:	d00b      	beq.n	8007e58 <_vfiprintf_r+0xa4>
 8007e40:	465b      	mov	r3, fp
 8007e42:	4622      	mov	r2, r4
 8007e44:	4629      	mov	r1, r5
 8007e46:	4630      	mov	r0, r6
 8007e48:	f7ff ffa2 	bl	8007d90 <__sfputs_r>
 8007e4c:	3001      	adds	r0, #1
 8007e4e:	f000 80a9 	beq.w	8007fa4 <_vfiprintf_r+0x1f0>
 8007e52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e54:	445a      	add	r2, fp
 8007e56:	9209      	str	r2, [sp, #36]	; 0x24
 8007e58:	f89a 3000 	ldrb.w	r3, [sl]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	f000 80a1 	beq.w	8007fa4 <_vfiprintf_r+0x1f0>
 8007e62:	2300      	movs	r3, #0
 8007e64:	f04f 32ff 	mov.w	r2, #4294967295
 8007e68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e6c:	f10a 0a01 	add.w	sl, sl, #1
 8007e70:	9304      	str	r3, [sp, #16]
 8007e72:	9307      	str	r3, [sp, #28]
 8007e74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e78:	931a      	str	r3, [sp, #104]	; 0x68
 8007e7a:	4654      	mov	r4, sl
 8007e7c:	2205      	movs	r2, #5
 8007e7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e82:	4854      	ldr	r0, [pc, #336]	; (8007fd4 <_vfiprintf_r+0x220>)
 8007e84:	f7fe f9a3 	bl	80061ce <memchr>
 8007e88:	9a04      	ldr	r2, [sp, #16]
 8007e8a:	b9d8      	cbnz	r0, 8007ec4 <_vfiprintf_r+0x110>
 8007e8c:	06d1      	lsls	r1, r2, #27
 8007e8e:	bf44      	itt	mi
 8007e90:	2320      	movmi	r3, #32
 8007e92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e96:	0713      	lsls	r3, r2, #28
 8007e98:	bf44      	itt	mi
 8007e9a:	232b      	movmi	r3, #43	; 0x2b
 8007e9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ea0:	f89a 3000 	ldrb.w	r3, [sl]
 8007ea4:	2b2a      	cmp	r3, #42	; 0x2a
 8007ea6:	d015      	beq.n	8007ed4 <_vfiprintf_r+0x120>
 8007ea8:	4654      	mov	r4, sl
 8007eaa:	2000      	movs	r0, #0
 8007eac:	f04f 0c0a 	mov.w	ip, #10
 8007eb0:	9a07      	ldr	r2, [sp, #28]
 8007eb2:	4621      	mov	r1, r4
 8007eb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007eb8:	3b30      	subs	r3, #48	; 0x30
 8007eba:	2b09      	cmp	r3, #9
 8007ebc:	d94d      	bls.n	8007f5a <_vfiprintf_r+0x1a6>
 8007ebe:	b1b0      	cbz	r0, 8007eee <_vfiprintf_r+0x13a>
 8007ec0:	9207      	str	r2, [sp, #28]
 8007ec2:	e014      	b.n	8007eee <_vfiprintf_r+0x13a>
 8007ec4:	eba0 0308 	sub.w	r3, r0, r8
 8007ec8:	fa09 f303 	lsl.w	r3, r9, r3
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	46a2      	mov	sl, r4
 8007ed0:	9304      	str	r3, [sp, #16]
 8007ed2:	e7d2      	b.n	8007e7a <_vfiprintf_r+0xc6>
 8007ed4:	9b03      	ldr	r3, [sp, #12]
 8007ed6:	1d19      	adds	r1, r3, #4
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	9103      	str	r1, [sp, #12]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	bfbb      	ittet	lt
 8007ee0:	425b      	neglt	r3, r3
 8007ee2:	f042 0202 	orrlt.w	r2, r2, #2
 8007ee6:	9307      	strge	r3, [sp, #28]
 8007ee8:	9307      	strlt	r3, [sp, #28]
 8007eea:	bfb8      	it	lt
 8007eec:	9204      	strlt	r2, [sp, #16]
 8007eee:	7823      	ldrb	r3, [r4, #0]
 8007ef0:	2b2e      	cmp	r3, #46	; 0x2e
 8007ef2:	d10c      	bne.n	8007f0e <_vfiprintf_r+0x15a>
 8007ef4:	7863      	ldrb	r3, [r4, #1]
 8007ef6:	2b2a      	cmp	r3, #42	; 0x2a
 8007ef8:	d134      	bne.n	8007f64 <_vfiprintf_r+0x1b0>
 8007efa:	9b03      	ldr	r3, [sp, #12]
 8007efc:	3402      	adds	r4, #2
 8007efe:	1d1a      	adds	r2, r3, #4
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	9203      	str	r2, [sp, #12]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	bfb8      	it	lt
 8007f08:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f0c:	9305      	str	r3, [sp, #20]
 8007f0e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007fd8 <_vfiprintf_r+0x224>
 8007f12:	2203      	movs	r2, #3
 8007f14:	4650      	mov	r0, sl
 8007f16:	7821      	ldrb	r1, [r4, #0]
 8007f18:	f7fe f959 	bl	80061ce <memchr>
 8007f1c:	b138      	cbz	r0, 8007f2e <_vfiprintf_r+0x17a>
 8007f1e:	2240      	movs	r2, #64	; 0x40
 8007f20:	9b04      	ldr	r3, [sp, #16]
 8007f22:	eba0 000a 	sub.w	r0, r0, sl
 8007f26:	4082      	lsls	r2, r0
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	3401      	adds	r4, #1
 8007f2c:	9304      	str	r3, [sp, #16]
 8007f2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f32:	2206      	movs	r2, #6
 8007f34:	4829      	ldr	r0, [pc, #164]	; (8007fdc <_vfiprintf_r+0x228>)
 8007f36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f3a:	f7fe f948 	bl	80061ce <memchr>
 8007f3e:	2800      	cmp	r0, #0
 8007f40:	d03f      	beq.n	8007fc2 <_vfiprintf_r+0x20e>
 8007f42:	4b27      	ldr	r3, [pc, #156]	; (8007fe0 <_vfiprintf_r+0x22c>)
 8007f44:	bb1b      	cbnz	r3, 8007f8e <_vfiprintf_r+0x1da>
 8007f46:	9b03      	ldr	r3, [sp, #12]
 8007f48:	3307      	adds	r3, #7
 8007f4a:	f023 0307 	bic.w	r3, r3, #7
 8007f4e:	3308      	adds	r3, #8
 8007f50:	9303      	str	r3, [sp, #12]
 8007f52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f54:	443b      	add	r3, r7
 8007f56:	9309      	str	r3, [sp, #36]	; 0x24
 8007f58:	e768      	b.n	8007e2c <_vfiprintf_r+0x78>
 8007f5a:	460c      	mov	r4, r1
 8007f5c:	2001      	movs	r0, #1
 8007f5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f62:	e7a6      	b.n	8007eb2 <_vfiprintf_r+0xfe>
 8007f64:	2300      	movs	r3, #0
 8007f66:	f04f 0c0a 	mov.w	ip, #10
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	3401      	adds	r4, #1
 8007f6e:	9305      	str	r3, [sp, #20]
 8007f70:	4620      	mov	r0, r4
 8007f72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f76:	3a30      	subs	r2, #48	; 0x30
 8007f78:	2a09      	cmp	r2, #9
 8007f7a:	d903      	bls.n	8007f84 <_vfiprintf_r+0x1d0>
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d0c6      	beq.n	8007f0e <_vfiprintf_r+0x15a>
 8007f80:	9105      	str	r1, [sp, #20]
 8007f82:	e7c4      	b.n	8007f0e <_vfiprintf_r+0x15a>
 8007f84:	4604      	mov	r4, r0
 8007f86:	2301      	movs	r3, #1
 8007f88:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f8c:	e7f0      	b.n	8007f70 <_vfiprintf_r+0x1bc>
 8007f8e:	ab03      	add	r3, sp, #12
 8007f90:	9300      	str	r3, [sp, #0]
 8007f92:	462a      	mov	r2, r5
 8007f94:	4630      	mov	r0, r6
 8007f96:	4b13      	ldr	r3, [pc, #76]	; (8007fe4 <_vfiprintf_r+0x230>)
 8007f98:	a904      	add	r1, sp, #16
 8007f9a:	f7fd fbb1 	bl	8005700 <_printf_float>
 8007f9e:	4607      	mov	r7, r0
 8007fa0:	1c78      	adds	r0, r7, #1
 8007fa2:	d1d6      	bne.n	8007f52 <_vfiprintf_r+0x19e>
 8007fa4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fa6:	07d9      	lsls	r1, r3, #31
 8007fa8:	d405      	bmi.n	8007fb6 <_vfiprintf_r+0x202>
 8007faa:	89ab      	ldrh	r3, [r5, #12]
 8007fac:	059a      	lsls	r2, r3, #22
 8007fae:	d402      	bmi.n	8007fb6 <_vfiprintf_r+0x202>
 8007fb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fb2:	f7fe f90b 	bl	80061cc <__retarget_lock_release_recursive>
 8007fb6:	89ab      	ldrh	r3, [r5, #12]
 8007fb8:	065b      	lsls	r3, r3, #25
 8007fba:	f53f af1d 	bmi.w	8007df8 <_vfiprintf_r+0x44>
 8007fbe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007fc0:	e71c      	b.n	8007dfc <_vfiprintf_r+0x48>
 8007fc2:	ab03      	add	r3, sp, #12
 8007fc4:	9300      	str	r3, [sp, #0]
 8007fc6:	462a      	mov	r2, r5
 8007fc8:	4630      	mov	r0, r6
 8007fca:	4b06      	ldr	r3, [pc, #24]	; (8007fe4 <_vfiprintf_r+0x230>)
 8007fcc:	a904      	add	r1, sp, #16
 8007fce:	f7fd fe37 	bl	8005c40 <_printf_i>
 8007fd2:	e7e4      	b.n	8007f9e <_vfiprintf_r+0x1ea>
 8007fd4:	08008624 	.word	0x08008624
 8007fd8:	0800862a 	.word	0x0800862a
 8007fdc:	0800862e 	.word	0x0800862e
 8007fe0:	08005701 	.word	0x08005701
 8007fe4:	08007d91 	.word	0x08007d91

08007fe8 <__swbuf_r>:
 8007fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fea:	460e      	mov	r6, r1
 8007fec:	4614      	mov	r4, r2
 8007fee:	4605      	mov	r5, r0
 8007ff0:	b118      	cbz	r0, 8007ffa <__swbuf_r+0x12>
 8007ff2:	6a03      	ldr	r3, [r0, #32]
 8007ff4:	b90b      	cbnz	r3, 8007ffa <__swbuf_r+0x12>
 8007ff6:	f7fd ffd1 	bl	8005f9c <__sinit>
 8007ffa:	69a3      	ldr	r3, [r4, #24]
 8007ffc:	60a3      	str	r3, [r4, #8]
 8007ffe:	89a3      	ldrh	r3, [r4, #12]
 8008000:	071a      	lsls	r2, r3, #28
 8008002:	d525      	bpl.n	8008050 <__swbuf_r+0x68>
 8008004:	6923      	ldr	r3, [r4, #16]
 8008006:	b31b      	cbz	r3, 8008050 <__swbuf_r+0x68>
 8008008:	6823      	ldr	r3, [r4, #0]
 800800a:	6922      	ldr	r2, [r4, #16]
 800800c:	b2f6      	uxtb	r6, r6
 800800e:	1a98      	subs	r0, r3, r2
 8008010:	6963      	ldr	r3, [r4, #20]
 8008012:	4637      	mov	r7, r6
 8008014:	4283      	cmp	r3, r0
 8008016:	dc04      	bgt.n	8008022 <__swbuf_r+0x3a>
 8008018:	4621      	mov	r1, r4
 800801a:	4628      	mov	r0, r5
 800801c:	f7ff fda2 	bl	8007b64 <_fflush_r>
 8008020:	b9e0      	cbnz	r0, 800805c <__swbuf_r+0x74>
 8008022:	68a3      	ldr	r3, [r4, #8]
 8008024:	3b01      	subs	r3, #1
 8008026:	60a3      	str	r3, [r4, #8]
 8008028:	6823      	ldr	r3, [r4, #0]
 800802a:	1c5a      	adds	r2, r3, #1
 800802c:	6022      	str	r2, [r4, #0]
 800802e:	701e      	strb	r6, [r3, #0]
 8008030:	6962      	ldr	r2, [r4, #20]
 8008032:	1c43      	adds	r3, r0, #1
 8008034:	429a      	cmp	r2, r3
 8008036:	d004      	beq.n	8008042 <__swbuf_r+0x5a>
 8008038:	89a3      	ldrh	r3, [r4, #12]
 800803a:	07db      	lsls	r3, r3, #31
 800803c:	d506      	bpl.n	800804c <__swbuf_r+0x64>
 800803e:	2e0a      	cmp	r6, #10
 8008040:	d104      	bne.n	800804c <__swbuf_r+0x64>
 8008042:	4621      	mov	r1, r4
 8008044:	4628      	mov	r0, r5
 8008046:	f7ff fd8d 	bl	8007b64 <_fflush_r>
 800804a:	b938      	cbnz	r0, 800805c <__swbuf_r+0x74>
 800804c:	4638      	mov	r0, r7
 800804e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008050:	4621      	mov	r1, r4
 8008052:	4628      	mov	r0, r5
 8008054:	f000 f806 	bl	8008064 <__swsetup_r>
 8008058:	2800      	cmp	r0, #0
 800805a:	d0d5      	beq.n	8008008 <__swbuf_r+0x20>
 800805c:	f04f 37ff 	mov.w	r7, #4294967295
 8008060:	e7f4      	b.n	800804c <__swbuf_r+0x64>
	...

08008064 <__swsetup_r>:
 8008064:	b538      	push	{r3, r4, r5, lr}
 8008066:	4b2a      	ldr	r3, [pc, #168]	; (8008110 <__swsetup_r+0xac>)
 8008068:	4605      	mov	r5, r0
 800806a:	6818      	ldr	r0, [r3, #0]
 800806c:	460c      	mov	r4, r1
 800806e:	b118      	cbz	r0, 8008078 <__swsetup_r+0x14>
 8008070:	6a03      	ldr	r3, [r0, #32]
 8008072:	b90b      	cbnz	r3, 8008078 <__swsetup_r+0x14>
 8008074:	f7fd ff92 	bl	8005f9c <__sinit>
 8008078:	89a3      	ldrh	r3, [r4, #12]
 800807a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800807e:	0718      	lsls	r0, r3, #28
 8008080:	d422      	bmi.n	80080c8 <__swsetup_r+0x64>
 8008082:	06d9      	lsls	r1, r3, #27
 8008084:	d407      	bmi.n	8008096 <__swsetup_r+0x32>
 8008086:	2309      	movs	r3, #9
 8008088:	602b      	str	r3, [r5, #0]
 800808a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800808e:	f04f 30ff 	mov.w	r0, #4294967295
 8008092:	81a3      	strh	r3, [r4, #12]
 8008094:	e034      	b.n	8008100 <__swsetup_r+0x9c>
 8008096:	0758      	lsls	r0, r3, #29
 8008098:	d512      	bpl.n	80080c0 <__swsetup_r+0x5c>
 800809a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800809c:	b141      	cbz	r1, 80080b0 <__swsetup_r+0x4c>
 800809e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080a2:	4299      	cmp	r1, r3
 80080a4:	d002      	beq.n	80080ac <__swsetup_r+0x48>
 80080a6:	4628      	mov	r0, r5
 80080a8:	f7fe ff0e 	bl	8006ec8 <_free_r>
 80080ac:	2300      	movs	r3, #0
 80080ae:	6363      	str	r3, [r4, #52]	; 0x34
 80080b0:	89a3      	ldrh	r3, [r4, #12]
 80080b2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80080b6:	81a3      	strh	r3, [r4, #12]
 80080b8:	2300      	movs	r3, #0
 80080ba:	6063      	str	r3, [r4, #4]
 80080bc:	6923      	ldr	r3, [r4, #16]
 80080be:	6023      	str	r3, [r4, #0]
 80080c0:	89a3      	ldrh	r3, [r4, #12]
 80080c2:	f043 0308 	orr.w	r3, r3, #8
 80080c6:	81a3      	strh	r3, [r4, #12]
 80080c8:	6923      	ldr	r3, [r4, #16]
 80080ca:	b94b      	cbnz	r3, 80080e0 <__swsetup_r+0x7c>
 80080cc:	89a3      	ldrh	r3, [r4, #12]
 80080ce:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80080d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080d6:	d003      	beq.n	80080e0 <__swsetup_r+0x7c>
 80080d8:	4621      	mov	r1, r4
 80080da:	4628      	mov	r0, r5
 80080dc:	f000 f883 	bl	80081e6 <__smakebuf_r>
 80080e0:	89a0      	ldrh	r0, [r4, #12]
 80080e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080e6:	f010 0301 	ands.w	r3, r0, #1
 80080ea:	d00a      	beq.n	8008102 <__swsetup_r+0x9e>
 80080ec:	2300      	movs	r3, #0
 80080ee:	60a3      	str	r3, [r4, #8]
 80080f0:	6963      	ldr	r3, [r4, #20]
 80080f2:	425b      	negs	r3, r3
 80080f4:	61a3      	str	r3, [r4, #24]
 80080f6:	6923      	ldr	r3, [r4, #16]
 80080f8:	b943      	cbnz	r3, 800810c <__swsetup_r+0xa8>
 80080fa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80080fe:	d1c4      	bne.n	800808a <__swsetup_r+0x26>
 8008100:	bd38      	pop	{r3, r4, r5, pc}
 8008102:	0781      	lsls	r1, r0, #30
 8008104:	bf58      	it	pl
 8008106:	6963      	ldrpl	r3, [r4, #20]
 8008108:	60a3      	str	r3, [r4, #8]
 800810a:	e7f4      	b.n	80080f6 <__swsetup_r+0x92>
 800810c:	2000      	movs	r0, #0
 800810e:	e7f7      	b.n	8008100 <__swsetup_r+0x9c>
 8008110:	20000064 	.word	0x20000064

08008114 <_raise_r>:
 8008114:	291f      	cmp	r1, #31
 8008116:	b538      	push	{r3, r4, r5, lr}
 8008118:	4604      	mov	r4, r0
 800811a:	460d      	mov	r5, r1
 800811c:	d904      	bls.n	8008128 <_raise_r+0x14>
 800811e:	2316      	movs	r3, #22
 8008120:	6003      	str	r3, [r0, #0]
 8008122:	f04f 30ff 	mov.w	r0, #4294967295
 8008126:	bd38      	pop	{r3, r4, r5, pc}
 8008128:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800812a:	b112      	cbz	r2, 8008132 <_raise_r+0x1e>
 800812c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008130:	b94b      	cbnz	r3, 8008146 <_raise_r+0x32>
 8008132:	4620      	mov	r0, r4
 8008134:	f000 f830 	bl	8008198 <_getpid_r>
 8008138:	462a      	mov	r2, r5
 800813a:	4601      	mov	r1, r0
 800813c:	4620      	mov	r0, r4
 800813e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008142:	f000 b817 	b.w	8008174 <_kill_r>
 8008146:	2b01      	cmp	r3, #1
 8008148:	d00a      	beq.n	8008160 <_raise_r+0x4c>
 800814a:	1c59      	adds	r1, r3, #1
 800814c:	d103      	bne.n	8008156 <_raise_r+0x42>
 800814e:	2316      	movs	r3, #22
 8008150:	6003      	str	r3, [r0, #0]
 8008152:	2001      	movs	r0, #1
 8008154:	e7e7      	b.n	8008126 <_raise_r+0x12>
 8008156:	2400      	movs	r4, #0
 8008158:	4628      	mov	r0, r5
 800815a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800815e:	4798      	blx	r3
 8008160:	2000      	movs	r0, #0
 8008162:	e7e0      	b.n	8008126 <_raise_r+0x12>

08008164 <raise>:
 8008164:	4b02      	ldr	r3, [pc, #8]	; (8008170 <raise+0xc>)
 8008166:	4601      	mov	r1, r0
 8008168:	6818      	ldr	r0, [r3, #0]
 800816a:	f7ff bfd3 	b.w	8008114 <_raise_r>
 800816e:	bf00      	nop
 8008170:	20000064 	.word	0x20000064

08008174 <_kill_r>:
 8008174:	b538      	push	{r3, r4, r5, lr}
 8008176:	2300      	movs	r3, #0
 8008178:	4d06      	ldr	r5, [pc, #24]	; (8008194 <_kill_r+0x20>)
 800817a:	4604      	mov	r4, r0
 800817c:	4608      	mov	r0, r1
 800817e:	4611      	mov	r1, r2
 8008180:	602b      	str	r3, [r5, #0]
 8008182:	f7f9 fc04 	bl	800198e <_kill>
 8008186:	1c43      	adds	r3, r0, #1
 8008188:	d102      	bne.n	8008190 <_kill_r+0x1c>
 800818a:	682b      	ldr	r3, [r5, #0]
 800818c:	b103      	cbz	r3, 8008190 <_kill_r+0x1c>
 800818e:	6023      	str	r3, [r4, #0]
 8008190:	bd38      	pop	{r3, r4, r5, pc}
 8008192:	bf00      	nop
 8008194:	200004f0 	.word	0x200004f0

08008198 <_getpid_r>:
 8008198:	f7f9 bbf2 	b.w	8001980 <_getpid>

0800819c <__swhatbuf_r>:
 800819c:	b570      	push	{r4, r5, r6, lr}
 800819e:	460c      	mov	r4, r1
 80081a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081a4:	4615      	mov	r5, r2
 80081a6:	2900      	cmp	r1, #0
 80081a8:	461e      	mov	r6, r3
 80081aa:	b096      	sub	sp, #88	; 0x58
 80081ac:	da0c      	bge.n	80081c8 <__swhatbuf_r+0x2c>
 80081ae:	89a3      	ldrh	r3, [r4, #12]
 80081b0:	2100      	movs	r1, #0
 80081b2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80081b6:	bf0c      	ite	eq
 80081b8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80081bc:	2340      	movne	r3, #64	; 0x40
 80081be:	2000      	movs	r0, #0
 80081c0:	6031      	str	r1, [r6, #0]
 80081c2:	602b      	str	r3, [r5, #0]
 80081c4:	b016      	add	sp, #88	; 0x58
 80081c6:	bd70      	pop	{r4, r5, r6, pc}
 80081c8:	466a      	mov	r2, sp
 80081ca:	f000 f849 	bl	8008260 <_fstat_r>
 80081ce:	2800      	cmp	r0, #0
 80081d0:	dbed      	blt.n	80081ae <__swhatbuf_r+0x12>
 80081d2:	9901      	ldr	r1, [sp, #4]
 80081d4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80081d8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80081dc:	4259      	negs	r1, r3
 80081de:	4159      	adcs	r1, r3
 80081e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081e4:	e7eb      	b.n	80081be <__swhatbuf_r+0x22>

080081e6 <__smakebuf_r>:
 80081e6:	898b      	ldrh	r3, [r1, #12]
 80081e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80081ea:	079d      	lsls	r5, r3, #30
 80081ec:	4606      	mov	r6, r0
 80081ee:	460c      	mov	r4, r1
 80081f0:	d507      	bpl.n	8008202 <__smakebuf_r+0x1c>
 80081f2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80081f6:	6023      	str	r3, [r4, #0]
 80081f8:	6123      	str	r3, [r4, #16]
 80081fa:	2301      	movs	r3, #1
 80081fc:	6163      	str	r3, [r4, #20]
 80081fe:	b002      	add	sp, #8
 8008200:	bd70      	pop	{r4, r5, r6, pc}
 8008202:	466a      	mov	r2, sp
 8008204:	ab01      	add	r3, sp, #4
 8008206:	f7ff ffc9 	bl	800819c <__swhatbuf_r>
 800820a:	9900      	ldr	r1, [sp, #0]
 800820c:	4605      	mov	r5, r0
 800820e:	4630      	mov	r0, r6
 8008210:	f7fe feca 	bl	8006fa8 <_malloc_r>
 8008214:	b948      	cbnz	r0, 800822a <__smakebuf_r+0x44>
 8008216:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800821a:	059a      	lsls	r2, r3, #22
 800821c:	d4ef      	bmi.n	80081fe <__smakebuf_r+0x18>
 800821e:	f023 0303 	bic.w	r3, r3, #3
 8008222:	f043 0302 	orr.w	r3, r3, #2
 8008226:	81a3      	strh	r3, [r4, #12]
 8008228:	e7e3      	b.n	80081f2 <__smakebuf_r+0xc>
 800822a:	89a3      	ldrh	r3, [r4, #12]
 800822c:	6020      	str	r0, [r4, #0]
 800822e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008232:	81a3      	strh	r3, [r4, #12]
 8008234:	9b00      	ldr	r3, [sp, #0]
 8008236:	6120      	str	r0, [r4, #16]
 8008238:	6163      	str	r3, [r4, #20]
 800823a:	9b01      	ldr	r3, [sp, #4]
 800823c:	b15b      	cbz	r3, 8008256 <__smakebuf_r+0x70>
 800823e:	4630      	mov	r0, r6
 8008240:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008244:	f000 f81e 	bl	8008284 <_isatty_r>
 8008248:	b128      	cbz	r0, 8008256 <__smakebuf_r+0x70>
 800824a:	89a3      	ldrh	r3, [r4, #12]
 800824c:	f023 0303 	bic.w	r3, r3, #3
 8008250:	f043 0301 	orr.w	r3, r3, #1
 8008254:	81a3      	strh	r3, [r4, #12]
 8008256:	89a3      	ldrh	r3, [r4, #12]
 8008258:	431d      	orrs	r5, r3
 800825a:	81a5      	strh	r5, [r4, #12]
 800825c:	e7cf      	b.n	80081fe <__smakebuf_r+0x18>
	...

08008260 <_fstat_r>:
 8008260:	b538      	push	{r3, r4, r5, lr}
 8008262:	2300      	movs	r3, #0
 8008264:	4d06      	ldr	r5, [pc, #24]	; (8008280 <_fstat_r+0x20>)
 8008266:	4604      	mov	r4, r0
 8008268:	4608      	mov	r0, r1
 800826a:	4611      	mov	r1, r2
 800826c:	602b      	str	r3, [r5, #0]
 800826e:	f7f9 fbec 	bl	8001a4a <_fstat>
 8008272:	1c43      	adds	r3, r0, #1
 8008274:	d102      	bne.n	800827c <_fstat_r+0x1c>
 8008276:	682b      	ldr	r3, [r5, #0]
 8008278:	b103      	cbz	r3, 800827c <_fstat_r+0x1c>
 800827a:	6023      	str	r3, [r4, #0]
 800827c:	bd38      	pop	{r3, r4, r5, pc}
 800827e:	bf00      	nop
 8008280:	200004f0 	.word	0x200004f0

08008284 <_isatty_r>:
 8008284:	b538      	push	{r3, r4, r5, lr}
 8008286:	2300      	movs	r3, #0
 8008288:	4d05      	ldr	r5, [pc, #20]	; (80082a0 <_isatty_r+0x1c>)
 800828a:	4604      	mov	r4, r0
 800828c:	4608      	mov	r0, r1
 800828e:	602b      	str	r3, [r5, #0]
 8008290:	f7f9 fbea 	bl	8001a68 <_isatty>
 8008294:	1c43      	adds	r3, r0, #1
 8008296:	d102      	bne.n	800829e <_isatty_r+0x1a>
 8008298:	682b      	ldr	r3, [r5, #0]
 800829a:	b103      	cbz	r3, 800829e <_isatty_r+0x1a>
 800829c:	6023      	str	r3, [r4, #0]
 800829e:	bd38      	pop	{r3, r4, r5, pc}
 80082a0:	200004f0 	.word	0x200004f0

080082a4 <_init>:
 80082a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082a6:	bf00      	nop
 80082a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082aa:	bc08      	pop	{r3}
 80082ac:	469e      	mov	lr, r3
 80082ae:	4770      	bx	lr

080082b0 <_fini>:
 80082b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082b2:	bf00      	nop
 80082b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082b6:	bc08      	pop	{r3}
 80082b8:	469e      	mov	lr, r3
 80082ba:	4770      	bx	lr
